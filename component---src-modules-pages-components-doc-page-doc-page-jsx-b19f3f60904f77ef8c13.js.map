{"version":3,"sources":["webpack:///./src/modules/parts/components/DevRelCta/CtaItem/CtaItem.jsx","webpack:///./src/modules/parts/components/DevRelCta/DevRelCta.jsx","webpack:///./src/modules/pages/components/DocPage/Content/Content.jsx","webpack:///./src/modules/pages/components/DocPage/SectionListItem/SectionListItem.jsx","webpack:///./src/modules/pages/components/DocPage/SectionList/SectionList.jsx","webpack:///./src/modules/pages/components/DocPage/Sidebar/Sidebar.jsx","webpack:///./src/modules/pages/components/DocPage/Sidebar/Sidebar.js","webpack:///./src/modules/pages/components/DocPage/DocPage.jsx","webpack:///./src/modules/parts/components/SEO/SEO.jsx","webpack:///./src/modules/parts/components/SEO/SEO.js","webpack:///./src/hoc/files/index.js","webpack:///./src/modules/parts/components/SEO/index.js"],"names":["CtaItem","_ref","contentText","headingText","linkText","linkUrl","react_default","a","createElement","className","styles","main","contentContainer","Heading","appearance","margin","size","theme","weight","text","index_es","linkContainer","Button","padding","linkTo","style","fontSize","buttonTextSize","displayName","MSG","defineMessages","supportHeading","id","defaultMessage","supportContent","supportLinkText","improveDocHeading","improveDocContent","improveDocLinkText","DevRelCta","editUrl","ctaItem","DevRelCta_CtaItem_CtaItem","COLONY_DISCOURSE_SUPPORT","Content","children","commonHeadingAppearanceProps","doc","locale","intl","project","Fragment","es","path","getProjectEntryPoint","_ref2","match","titleWrapper","name","titleRuler","astContent","Object","assign","frontmatter","title","injectIntl","SectionListItem","_ref$section","section","docs","_useState","useState","isSectionOpen","setIsSectionOpen","sectionHeadingProps","aria-expanded","mobileSectionExpander","onClick","Icon","expandArrow","sectionTitle","docsList","getDocsForLocale","sort","orderDocs","map","key","slug","docsItem","Link","activeClassName","active","itemLink","href","fields","persistLocale","state","fromParent","SectionList","sectionsList","getSectionsForLocale","DocPage_SectionListItem_SectionListItem","linkHome","btnBackToTop","iconTitleVisitLink","renderAst","RehypeReact","components","rest","objectWithoutPropertiesLoose_default","listItemStyles","fromChild","subItemLink","li","props","p","withProps","Compiler","Sidebar","htmlAst","_ref2$locationState","locationState","projectName","projectEntryPoint","tableOfContents","getMainClasses","hasNoItems","length","menuContentsWrapper","_ref3","arrow","homeLink","PAGE_DEVELOPER_PORTAL_INDEX","mobileProjectTitle","chevron","menuContents","projectTitle","DocPage_SectionList_SectionList","lineHeight","projectTitleLineHeight","tocMenuWrapper","tocWrapper","backToTop","handleBackToTop","e","window","preventDefault","scrollTo","enhance","compose","withLocation","location","headingWithSize","DocPage","_this","_Component","call","this","getElementTextValue","node","child","value","join","getAllImages","imagePaths","isTagName","properties","push","src","getToc","defaultReturn","type","tagName","find","element","hasClassname","transformInternalUrls","_this$props","projectNodes","data","allProject","edges","slugPrefix","pageContext","url","toLowerCase","projectNameSlugs","reduce","names","slugify","lower","urlParts","split","filter","part","hasLocale","localePrefix","isDocPage","some","startsWith","replace","transformUrl","h1","h2","h3","h4","h5","img","Image","ul","ulProps","render","_this$props$data","forEach","isMethodHeading","Array","isArray","methodHeading","toc","metaTitle","seoDescription","seoImages","logo","DeveloperPortalLayout","Helmet_default","SEO","description","images","mainInnerContainer","sidebar","components_DocPage_Sidebar_Sidebar","content","DocPage_Content_Content","components_DevRelCta_DevRelCta","Component","includes","pageQuery","siteName","baseUrl","descriptionContent","descriptionValues","getAbsoluteImagePath","formatMessage","siteLogo","titleContent","titleValues","_ref$images","absolutePath","withPrefix","pathname","indexOf","ogType","schemaOrgJSONLD","@context","@type","itemListElement","position","item","@id","image","author","headline","imagePath","JSON","stringify","itemProp","property","BaseComponent","fromRenderProps","FileContext","Consumer","files","defaultProps","withHandlers","__webpack_require__","d","__webpack_exports__","parts_components_SEO_SEO"],"mappings":"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","file":"component---src-modules-pages-components-doc-page-doc-page-jsx-b19f3f60904f77ef8c13.js","sourcesContent":["/* @flow */\n\nimport type { MessageDescriptor } from 'react-intl';\n\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport Button from '~core/Button';\nimport Heading from '~core/Heading';\n\nimport styles from './CtaItem.module.css';\n\ntype Props = {|\n  contentText: MessageDescriptor | string,\n  headingText: MessageDescriptor | string,\n  linkText: MessageDescriptor | string,\n  linkUrl: string,\n|};\n\nconst displayName = 'parts.DevRelCta.CtaItem';\n\nconst CtaItem = ({ contentText, headingText, linkText, linkUrl }: Props) => (\n  <div className={styles.main}>\n    <div className={styles.contentContainer}>\n      <Heading\n        appearance={{\n          margin: 'large',\n          size: 'mediumLarge',\n          theme: 'dark',\n          weight: 'medium',\n        }}\n        text={headingText}\n      />\n      <p className={styles.contentText}>\n        {typeof contentText === 'string' ? (\n          contentText\n        ) : (\n          <FormattedMessage {...contentText} />\n        )}\n      </p>\n    </div>\n    <div className={styles.linkContainer}>\n      <Button\n        appearance={{ padding: 'small', theme: 'primaryHollow' }}\n        linkTo={linkUrl}\n        style={{ fontSize: styles.buttonTextSize }}\n        text={linkText}\n      />\n    </div>\n  </div>\n);\n\nCtaItem.displayName = displayName;\n\nexport default CtaItem;\n","/* @flow */\n\nimport React from 'react';\nimport { defineMessages } from 'react-intl';\n\nimport { COLONY_DISCOURSE_SUPPORT } from '~routes';\n\nimport CtaItem from './CtaItem';\n\nimport styles from './DevRelCta.module.css';\n\nconst MSG = defineMessages({\n  supportHeading: {\n    id: 'parts.DevRelCta.supportHeading',\n    defaultMessage: 'Support',\n  },\n  supportContent: {\n    id: 'parts.DevRelCta.supportContent',\n    defaultMessage:\n      'Questions? Problems? Existential dilemmas? We’re here to help!',\n  },\n  supportLinkText: {\n    id: 'parts.DevRelCta.supportLinkText',\n    defaultMessage: 'Contact DevRel',\n  },\n  improveDocHeading: {\n    id: 'parts.DevRelCta.improveDocHeading',\n    defaultMessage: 'Improve this doc.',\n  },\n  improveDocContent: {\n    id: 'parts.DevRelCta.improveDocContent',\n    defaultMessage:\n      // eslint-disable-next-line max-len\n      'All improvements to documentation are welcome and encouraged. Submit a PR for documentation on GitHub.',\n  },\n  improveDocLinkText: {\n    id: 'parts.DevRelCta.supportLinkText',\n    defaultMessage: 'To the repo!',\n  },\n});\n\ntype Props = {|\n  editUrl: string,\n|};\n\nconst displayName = 'parts.DevRelCta';\n\nconst DevRelCta = ({ editUrl }: Props) => (\n  <div className={styles.main}>\n    <div className={styles.ctaItem}>\n      <CtaItem\n        contentText={MSG.supportContent}\n        headingText={MSG.supportHeading}\n        linkText={MSG.supportLinkText}\n        linkUrl={COLONY_DISCOURSE_SUPPORT}\n      />\n    </div>\n    <div className={styles.ctaItem}>\n      <CtaItem\n        contentText={MSG.improveDocContent}\n        headingText={MSG.improveDocHeading}\n        linkText={MSG.improveDocLinkText}\n        linkUrl={editUrl}\n      />\n    </div>\n  </div>\n);\n\nDevRelCta.displayName = displayName;\n\nexport default DevRelCta;\n","/* @flow */\n\nimport type { Node } from 'react';\nimport type { IntlShape } from 'react-intl';\n\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Match } from '@reach/router';\n\nimport type { Doc, Project } from '~types';\nimport type { Appearance as HeadingAppearance } from '~core/Heading';\n\nimport Heading from '~core/Heading';\nimport { getProjectEntryPoint } from '~utils/docs';\n\nimport styles from './Content.module.css';\n\ntype Props = {|\n  children?: Node,\n  commonHeadingAppearanceProps: HeadingAppearance,\n  doc: Doc,\n  /** Injected via `injectIntl` */\n  intl: IntlShape,\n  project: Project,\n|};\n\nconst displayName = 'pages.DocPage.Content';\n\nconst Content = ({\n  children,\n  commonHeadingAppearanceProps,\n  doc,\n  intl: { locale },\n  project,\n}: Props) => (\n  <>\n    <Match path={getProjectEntryPoint(project, locale)}>\n      {({ match }) =>\n        match ? (\n          <div className={styles.titleWrapper}>\n            <Heading\n              appearance={{ margin: 'none', size: 'large', theme: 'dark' }}\n              text={project.name}\n            />\n            <hr className={styles.titleRuler} />\n          </div>\n        ) : null\n      }\n    </Match>\n    <div className={styles.astContent}>\n      <Heading\n        appearance={{\n          ...commonHeadingAppearanceProps,\n          size: 'large',\n        }}\n        text={doc.frontmatter.title}\n      />\n      {children}\n    </div>\n  </>\n);\n\nContent.displayName = displayName;\n\nexport default injectIntl(Content);\n","/* @flow */\n\nimport React, { useState } from 'react';\n\nimport type { Section } from '~types';\n\nimport Button from '~core/Button';\nimport Heading from '~core/Heading';\nimport Icon from '~core/Icon';\nimport Link from '~core/Link';\nimport { getDocsForLocale, orderDocs } from '~utils/docs';\n\nimport styles from './SectionListItem.module.css';\n\ntype Props = {|\n  locale: string,\n  section: Section,\n|};\n\nconst displayName = 'pages.DocPage.SectionListItem';\n\nconst SectionListItem = ({ locale, section: { docs, name } }: Props) => {\n  const [isSectionOpen, setIsSectionOpen] = useState(false);\n  const sectionHeadingProps = {\n    appearance: {\n      margin: 'none',\n      size: 'normal',\n      theme: 'dark',\n      weight: 'medium',\n    },\n    text: name,\n  };\n  return (\n    <li className={styles.main} aria-expanded={isSectionOpen}>\n      <span className={styles.mobileSectionExpander}>\n        <Button\n          appearance={{ theme: 'reset' }}\n          onClick={() => setIsSectionOpen(!isSectionOpen)}\n        >\n          <Heading {...sectionHeadingProps} />\n          <Icon className={styles.expandArrow} name=\"chevron\" title={name} />\n        </Button>\n      </span>\n      <span className={styles.sectionTitle}>\n        <Heading {...sectionHeadingProps} />\n      </span>\n      <ul className={styles.docsList}>\n        {getDocsForLocale(docs, locale)\n          .sort(orderDocs)\n          .map(doc => (\n            <li key={doc.slug} className={styles.docsItem}>\n              <Link\n                activeClassName={styles.active}\n                className={styles.itemLink}\n                href={doc.fields.slug}\n                persistLocale={false}\n                state={{ fromParent: true }}\n                text={doc.frontmatter.title}\n                title={doc.frontmatter.title}\n              />\n            </li>\n          ))}\n      </ul>\n    </li>\n  );\n};\n\nSectionListItem.displayName = displayName;\n\nexport default SectionListItem;\n","/* @flow */\n\nimport type { IntlShape } from 'react-intl';\n\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\n\nimport type { Project } from '~types';\n\nimport SectionListItem from '~pages/DocPage/SectionListItem';\nimport { getSectionsForLocale } from '~utils/docs';\n\nimport styles from './SectionList.module.css';\n\ntype Props = {|\n  /* Injected via `injectIntl` */\n  intl: IntlShape,\n  project: Project,\n|};\n\nconst displayName = 'pages.DocPage.SectionList';\n\nconst SectionList = ({ intl: { locale }, project }: Props) => (\n  <ul className={styles.sectionsList}>\n    {getSectionsForLocale(project, locale).map(section => (\n      <SectionListItem key={section.slug} locale={locale} section={section} />\n    ))}\n  </ul>\n);\n\nSectionList.displayName = displayName;\n\nexport default injectIntl(SectionList);\n","/* @flow */\n\nimport React, { createElement } from 'react';\nimport { defineMessages } from 'react-intl';\nimport { withProps } from 'recompose';\nimport { Match } from '@reach/router';\nimport RehypeReact from 'rehype-react';\n\nimport type { Project, HtmlAst } from '~types';\n\nimport Button from '~core/Button';\nimport Heading from '~core/Heading';\nimport Icon from '~core/Icon';\nimport Link from '~core/Link';\nimport SectionList from '~pages/DocPage/SectionList';\nimport { PAGE_DEVELOPER_PORTAL_INDEX } from '~routes';\nimport { getMainClasses } from '~utils/css';\n\nimport styles from './Sidebar.module.css';\nimport listItemStyles from '../SectionListItem/SectionListItem.module.css';\n\nconst MSG = defineMessages({\n  linkHome: {\n    id: 'pages.DocPage.Sidebar.linkHome',\n    defaultMessage: 'Home',\n  },\n  btnBackToTop: {\n    id: 'pages.DocPage.Sidebar.btnBackToTop',\n    defaultMessage: 'Back to Top',\n  },\n  iconTitleVisitLink: {\n    id: 'pages.DocPage.Sidebar.iconTitleVisitLink',\n    defaultMessage: 'Visit Link',\n  },\n});\n\ntype Props = {|\n  locationState: {\n    fromChild: boolean,\n    fromParent: boolean,\n    key: string,\n  },\n  project: Project,\n  projectEntryPoint: string,\n  tableOfContents: HtmlAst,\n  title?: string,\n|};\n\nconst hasNodes = (htmlAst?: HtmlAst) =>\n  htmlAst && htmlAst.children && htmlAst.children.length > 0;\n\nconst ItemLink = ({ children, ...rest }: Object) => (\n  <Link\n    {...rest}\n    className={listItemStyles.itemLink}\n    state={{ fromChild: true }}\n  >\n    <div className={styles.subItemLink}>{children}</div>\n  </Link>\n);\n\nconst renderAst = new RehypeReact({\n  createElement,\n  components: {\n    a: ItemLink,\n    li: props =>\n      createElement('li', { ...props, className: listItemStyles.docsItem }),\n    p: withProps({\n      appearance: {\n        margin: 'none',\n        size: 'normal',\n        theme: 'dark',\n        weight: 'medium',\n      },\n    })(Heading),\n  },\n}).Compiler;\n\nconst displayName = 'pages.DocPage.Sidebar';\n\nconst Sidebar = ({\n  locationState: { fromChild, fromParent },\n  project: { name: projectName },\n  project,\n  projectEntryPoint,\n  tableOfContents,\n  title,\n}: Props) => (\n  <nav\n    className={getMainClasses({}, styles, {\n      fromChild,\n      fromParent,\n      hasNoItems: !hasNodes(tableOfContents),\n    })}\n  >\n    <div className={styles.menuContentsWrapper}>\n      <Match path={projectEntryPoint}>\n        {({ match }) =>\n          match ? (\n            <>\n              <Link\n                arrow=\"left\"\n                className={styles.homeLink}\n                href={PAGE_DEVELOPER_PORTAL_INDEX}\n                text={MSG.linkHome}\n              />\n              <div className={styles.mobileProjectTitle}>\n                <Link href={PAGE_DEVELOPER_PORTAL_INDEX}>\n                  <Icon\n                    className={styles.chevron}\n                    name=\"chevron\"\n                    title={projectName}\n                  />\n                  <Heading\n                    appearance={{\n                      margin: 'none',\n                      size: 'mediumLarge',\n                      theme: 'dark',\n                      weight: 'medium',\n                    }}\n                    text={projectName}\n                  />\n                </Link>\n              </div>\n              <div className={styles.menuContents}>\n                <div className={styles.projectTitle}>\n                  <Heading\n                    appearance={{\n                      size: 'mediumLarge',\n                      theme: 'dark',\n                      weight: 'medium',\n                    }}\n                    text={projectName}\n                  />\n                </div>\n                <SectionList project={project} />\n              </div>\n            </>\n          ) : (\n            <>\n              <Link\n                arrow=\"left\"\n                className={styles.homeLink}\n                href={projectEntryPoint}\n                state={{ fromChild: true }}\n                text={projectName}\n              />\n              {title && (\n                <>\n                  <div className={styles.mobileProjectTitle}>\n                    <Link href={projectEntryPoint} state={{ fromChild: true }}>\n                      <Icon\n                        className={styles.chevron}\n                        name=\"chevron\"\n                        title={title}\n                      />\n                      <Heading\n                        appearance={{\n                          margin: 'none',\n                          size: 'mediumLarge',\n                          theme: 'dark',\n                          weight: 'medium',\n                        }}\n                        text={title}\n                      />\n                    </Link>\n                  </div>\n                  <div className={styles.menuContents}>\n                    <div className={styles.projectTitle}>\n                      <Heading\n                        appearance={{\n                          size: 'mediumLarge',\n                          theme: 'dark',\n                          weight: 'medium',\n                        }}\n                        style={{ lineHeight: styles.projectTitleLineHeight }}\n                        text={title}\n                      />\n                    </div>\n                    <div className={styles.tocMenuWrapper}>\n                      <div className={styles.tocWrapper}>\n                        {renderAst(tableOfContents)}\n                      </div>\n                    </div>\n                  </div>\n                </>\n              )}\n            </>\n          )\n        }\n      </Match>\n    </div>\n    <div className={styles.backToTop}>\n      <Button\n        className={styles.itemLink}\n        onClick={handleBackToTop}\n        text={MSG.btnBackToTop}\n      />\n    </div>\n  </nav>\n);\n\nSidebar.displayName = displayName;\n\nfunction handleBackToTop(e) {\n  if (typeof window !== 'undefined') {\n    e.preventDefault();\n    window.scrollTo(0, 0);\n  }\n}\n\nexport default Sidebar;\n","/* @flow */\n\nimport { injectIntl } from 'react-intl';\nimport { compose, withProps } from 'recompose';\n\nimport { getProjectEntryPoint } from '~utils/docs';\nimport { withLocation } from '~hoc/location';\n\nimport Sidebar from './Sidebar.jsx';\n\nconst enhance = compose(\n  injectIntl,\n  withLocation(),\n  withProps(({ intl: { locale }, location: { state }, project }) => {\n    const fromChild = state && state.fromChild ? state.fromChild : false;\n    const fromParent = state && state.fromParent ? state.fromParent : false;\n    return {\n      locationState: {\n        fromChild,\n        fromParent,\n        key: (state && state.key) || '0', // state.key only relevant if it already exists\n      },\n      projectEntryPoint: getProjectEntryPoint(project, locale),\n    };\n  }),\n);\n\nexport default enhance(Sidebar);\n","/* @flow */\n\nimport React, { Component, createElement } from 'react';\nimport RehypeReact from 'rehype-react';\nimport Helmet from 'react-helmet';\nimport { withProps } from 'recompose';\nimport { graphql } from 'gatsby';\nimport slugify from 'slugify';\n\nimport type { Doc, HtmlAst, Project } from '~types';\nimport type { Appearance as HeadingAppearance } from '~core/Heading';\n\nimport Heading from '~core/Heading';\nimport Image from '~core/Image';\nimport Link from '~core/Link';\nimport DeveloperPortalLayout from '~layouts/DeveloperPortalLayout';\nimport DevRelCta from '~parts/DevRelCta';\nimport SEO from '~parts/SEO';\n\nimport Content from './Content';\nimport Sidebar from './Sidebar';\n\nimport styles from './DocPage.module.css';\n\nconst commonHeadingAppearanceProps: HeadingAppearance = {\n  theme: 'dark',\n  weight: 'medium',\n};\n\nconst headingWithSize = (size: string) =>\n  withProps({\n    appearance: { ...commonHeadingAppearanceProps, size },\n  })(Heading);\n\ntype Props = {|\n  data: {\n    project: Project,\n    doc: Doc,\n    allProject: {\n      edges: Array<{\n        node: {\n          name: string,\n        },\n      }>,\n    },\n  },\n  pageContext: {\n    slugPrefix: string,\n  },\n|};\n\nclass DocPage extends Component<Props> {\n  renderAst: (node: Object) => void;\n\n  static displayName = 'pages.DocPage';\n\n  static hasClassname = (element: HtmlAst, className: string): boolean => {\n    return (\n      !!element.properties &&\n      element.properties.className &&\n      element.properties.className.includes(className)\n    );\n  };\n\n  static isTagName = (element: HtmlAst, tagName: string): boolean => {\n    return !!element.tagName && element.tagName === tagName;\n  };\n\n  static isMethodHeading = (section: HtmlAst) => {\n    return (\n      section.children &&\n      section.children.length === 2 &&\n      DocPage.isTagName(section.children[0], 'a') &&\n      DocPage.isTagName(section.children[1], 'code')\n    );\n  };\n\n  constructor(props: Props) {\n    super(props);\n\n    this.renderAst = new RehypeReact({\n      createElement,\n      components: {\n        a: withProps({\n          transformUrl: this.transformInternalUrls,\n          persistLocale: false,\n        })(Link),\n        h1: headingWithSize('large'),\n        h2: headingWithSize('medium'),\n        h3: headingWithSize('normal'),\n        h4: headingWithSize('small'),\n        h5: headingWithSize('tiny'),\n        img: withProps({ project: props.data.project.name })(Image),\n        // remove toc from ast\n        ul: ({ ...ulProps }) =>\n          ulProps.className === 'md-toc' ? null : createElement('ul', ulProps),\n      },\n    }).Compiler;\n  }\n\n  getElementTextValue = (node?: HtmlAst) => {\n    if (node && node.children && node.children.length > 0) {\n      const textValues = node.children.map(child => {\n        if (child.children && child.children.length > 0) {\n          return this.getElementTextValue(child);\n        }\n        return child.value;\n      });\n      return textValues.join('');\n    }\n    return '';\n  };\n\n  getAllImages = (node: HtmlAst, imagePaths: Array<string> = []) => {\n    if (DocPage.isTagName(node, 'img') && node.properties) {\n      imagePaths.push(node.properties.src);\n    } else if (node.children && node.children.length > 0) {\n      node.children.map(child => this.getAllImages(child, imagePaths));\n    }\n    return imagePaths;\n  };\n\n  getToc = (node?: HtmlAst): HtmlAst => {\n    const defaultReturn = { type: 'element', tagName: 'div' };\n    if (node && node.children && node.children.length > 0) {\n      return (\n        node.children.find(\n          element =>\n            DocPage.isTagName(element, 'ul') &&\n            DocPage.hasClassname(element, 'md-toc'),\n        ) || defaultReturn\n      );\n    }\n    return defaultReturn;\n  };\n\n  transformInternalUrls = (href: string): string => {\n    const {\n      data: {\n        allProject: { edges: projectNodes },\n      },\n      pageContext: { slugPrefix },\n    } = this.props;\n    let url: string = href.toLowerCase();\n\n    // Get possible project slugs (both camelCase & lowercase for each project)\n    const projectNameSlugs: Array<string> = projectNodes.reduce(\n      (names, { node }) => {\n        names.push(slugify(node.name), slugify(node.name, { lower: true }));\n        return names;\n      },\n      [],\n    );\n\n    // Get the non-empty url parts\n    const urlParts: Array<string> = url.split('/').filter(part => !!part);\n\n    /*\n     * Docs links within the docs are written in 1 of 2 forms:\n     *     1) With locale (non-default): `/locale/projectSlug/docPageSlug/`\n     *     2) Without locale (default language): `/projectSlug/docPageSlug/`\n     */\n    const hasLocale: boolean = urlParts.length === 3;\n    const localePrefix: string = hasLocale ? `/${urlParts[0]}` : '';\n    const isDocPage: boolean = projectNameSlugs.some(projectName =>\n      url.startsWith(`${localePrefix}/${projectName}/`),\n    );\n    if (isDocPage && hasLocale) {\n      url = url.replace(localePrefix, '');\n    }\n    // If it's a doc page and a slug prefix is configured, add the prefix to the url\n    return isDocPage && slugPrefix\n      ? `${localePrefix}/${slugPrefix}${url}`\n      : url;\n  };\n\n  render() {\n    const {\n      data: { project, doc },\n    } = this.props;\n    if (doc.htmlAst.children) {\n      doc.htmlAst.children.forEach(section => {\n        if (DocPage.isTagName(section, 'h3')) {\n          if (DocPage.isMethodHeading(section) && section.properties) {\n            if (\n              section.properties.className &&\n              Array.isArray(section.properties.className)\n            ) {\n              section.properties.className.push(styles.methodHeading);\n            } else {\n              // eslint-disable-next-line no-param-reassign\n              section.properties.className = [styles.methodHeading];\n            }\n          }\n        }\n      });\n    }\n\n    const toc = this.getToc(doc.htmlAst);\n\n    const metaTitle = `${doc.frontmatter.title} - ${project.name}`;\n\n    const seoDescription =\n      (doc.htmlAst.children &&\n        doc.htmlAst.children.length > 0 &&\n        this.getElementTextValue(\n          doc.htmlAst.children.find(child => DocPage.isTagName(child, 'p')),\n        )) ||\n      metaTitle;\n\n    const seoImages = this.getAllImages(doc.htmlAst, [project.logo]);\n    return (\n      <DeveloperPortalLayout>\n        <Helmet>\n          <title>{metaTitle}</title>\n        </Helmet>\n        <SEO\n          title={metaTitle}\n          description={seoDescription}\n          images={seoImages}\n          project={project.name}\n          isDocPage\n        />\n        <div className={styles.main}>\n          <div className={styles.mainInnerContainer}>\n            <div className={styles.sidebar}>\n              <Sidebar\n                project={project}\n                tableOfContents={toc}\n                title={doc.frontmatter.title}\n              />\n            </div>\n            <main className={styles.content}>\n              <Content\n                commonHeadingAppearanceProps={commonHeadingAppearanceProps}\n                doc={doc}\n                project={project}\n              >\n                {this.renderAst(doc.htmlAst)}\n              </Content>\n              <DevRelCta editUrl={doc.editUrl} />\n            </main>\n          </div>\n        </div>\n      </DeveloperPortalLayout>\n    );\n  }\n}\n\nexport const pageQuery = graphql`\n  query projectAndDocQuery($docId: String!, $projectName: String!) {\n    ...singleDocFragment\n    ...singleProjectFragment\n    ...allProjectNamesFragment\n  }\n`;\n\nexport default DocPage;\n","/* @flow */\n\nimport React from 'react';\nimport { defineMessages } from 'react-intl';\nimport Helmet from 'react-helmet';\nimport { withPrefix } from 'gatsby';\n\nimport type { OutProps as Props } from './types';\n\nconst MSG = defineMessages({\n  siteName: {\n    id: 'parts.SEO.siteName',\n    defaultMessage: 'Colony Open Source Docs',\n  },\n});\n\nconst displayName = 'parts.SEO';\n\nconst SEO = ({\n  baseUrl,\n  description: descriptionContent,\n  descriptionValues,\n  getAbsoluteImagePath,\n  intl: { formatMessage },\n  isDocPage,\n  location,\n  siteLogo,\n  title: titleContent,\n  titleValues,\n  images = [siteLogo],\n}: Props) => {\n  const absolutePath = location && `${baseUrl}${withPrefix(location.pathname)}`;\n  const imagePaths = images.map(getAbsoluteImagePath);\n  if (imagePaths.indexOf(siteLogo) < 0) imagePaths.push(siteLogo);\n  const ogType = location && location.pathname === '/' ? 'website' : 'article';\n  const siteName = formatMessage(MSG.siteName);\n  const title =\n    typeof titleContent === 'string'\n      ? titleContent\n      : formatMessage(titleContent, titleValues);\n  const description =\n    typeof descriptionContent === 'string'\n      ? descriptionContent\n      : formatMessage(descriptionContent, descriptionValues);\n\n  const schemaOrgJSONLD = [\n    {\n      '@context': 'http://schema.org',\n      '@type': 'WebSite',\n      url: baseUrl,\n      name: siteName,\n    },\n  ];\n\n  if (isDocPage) {\n    schemaOrgJSONLD.push(\n      {\n        '@context': 'http://schema.org',\n        '@type': 'BreadcrumbList',\n        itemListElement: [\n          {\n            '@type': 'ListItem',\n            position: 1,\n            item: {\n              '@id': absolutePath,\n              name: title,\n              image: imagePaths[0],\n            },\n          },\n        ],\n      },\n      {\n        '@context': 'http://schema.org',\n        '@type': 'BlogPosting',\n        author: 'Colony',\n        url: absolutePath,\n        name: title,\n        headline: title,\n        image: {\n          '@type': 'ImageObject',\n          url: imagePaths[0],\n        },\n        description,\n      },\n    );\n  }\n\n  return (\n    <Helmet>\n      {/* General tags */}\n      <meta name=\"description\" content={description} />\n      {imagePaths.map(imagePath => (\n        <meta name=\"image\" content={imagePath} key={imagePath} />\n      ))}\n\n      {/* Schema.org tags */}\n      <script type=\"application/ld+json\">\n        {JSON.stringify(schemaOrgJSONLD)}\n      </script>\n\n      {/* Google+ tags */}\n      <meta itemProp=\"name\" content={title} />\n      <meta itemProp=\"description\" content={description} />\n      {imagePaths.map(imagePath => (\n        <meta itemProp=\"image\" content={imagePath} key={imagePath} />\n      ))}\n\n      {/* OpenGraph tags */}\n      <meta property=\"og:url\" content={absolutePath} />\n      <meta property=\"og:type\" content={ogType} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={description} />\n      <meta property=\"og:site_name\" content={siteName} />\n      {imagePaths.map(imagePath => (\n        <meta property=\"og:image\" content={imagePath} key={imagePath} />\n      ))}\n\n      {/* Twitter Card tags */}\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:site\" content=\"@joincolony\" />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={description} />\n      {imagePaths.map(imagePath => (\n        <meta name=\"twitter:image\" content={imagePath} key={imagePath} />\n      ))}\n    </Helmet>\n  );\n};\n\nSEO.displayName = displayName;\n\nexport default SEO;\n","/* @flow */\n\nimport type { HOC } from 'recompose';\n\nimport { injectIntl } from 'react-intl';\nimport { compose, defaultProps, withHandlers, withProps } from 'recompose';\n\nimport { withFileContext } from '~hoc/files';\nimport { withLocation } from '~hoc/location';\n\nimport type { InProps } from './types';\n\nimport SEO from './SEO.jsx';\n\nconst enhance: HOC<*, InProps> = compose(\n  injectIntl,\n  withFileContext(),\n  withLocation(),\n  defaultProps({\n    isDocPage: false,\n  }),\n  withProps(() => ({\n    baseUrl: 'https://docs.colony.io',\n  })),\n  withHandlers({\n    getAbsoluteImagePath: ({ baseUrl, files, project }) => (\n      imagePath: string,\n    ) => {\n      return imagePath.startsWith('http')\n        ? imagePath\n        : `${baseUrl}${\n            files && files[`${project}/${imagePath}`]\n              ? files[`${project}/${imagePath}`]\n              : imagePath\n          }`;\n    },\n  }),\n  withProps(({ getAbsoluteImagePath }) => ({\n    siteLogo: getAbsoluteImagePath('/img/colonyDocs_combomark.svg'),\n  })),\n);\n\nexport default enhance(SEO);\n","/* @flow */\n\nimport type { ComponentType } from 'react';\n\nimport { fromRenderProps } from 'recompose';\n\nimport FileContext from '~context/FileContext';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const withFileContext = () => (BaseComponent: ComponentType<Object>) =>\n  // $FlowFixMe\n  fromRenderProps(FileContext.Consumer, files => ({ files }))(BaseComponent);\n","/* @flow */\n\nexport { default } from './SEO';\n"],"sourceRoot":""}