{"version":3,"sources":["webpack:///./src/pages/dashboard/colonies.js","webpack:///./src/modules/core/components/ErrorMessage/ErrorMessage.jsx","webpack:///./src/modules/core/components/ErrorMessage/index.js","webpack:///./src/modules/core/components/Input/Input.jsx","webpack:///./src/modules/core/components/Input/index.js","webpack:///./src/modules/core/components/FormattedToken/FormattedToken.jsx","webpack:///./src/modules/core/components/FormattedToken/index.js","webpack:///./src/modules/parts/components/SEO/SEO.jsx","webpack:///./src/modules/parts/components/SEO/SEO.js","webpack:///./src/hoc/files/index.js","webpack:///./src/modules/parts/components/SEO/index.js","webpack:///./src/modules/layouts/components/DeveloperPortalLayout/ipfs.js","webpack:///./src/modules/parts/components/IssueTableRow/IssueTableRow.jsx","webpack:///./src/modules/parts/components/IssueTableRow/index.js","webpack:///./node_modules/copy-to-clipboard/index.js","webpack:///./node_modules/toggle-selection/index.js","webpack:///./src/modules/pages/components/Dashboard/Login/Login.jsx","webpack:///./src/modules/pages/components/Dashboard/Sidebar/Sidebar.jsx","webpack:///./src/modules/core/components/Copy/Copy.jsx","webpack:///./src/modules/pages/components/Dashboard/Account/Address/Address.jsx","webpack:///./src/modules/pages/components/Dashboard/Account/DeleteAccount/DeleteAccount.jsx","webpack:///./src/modules/pages/components/Dashboard/Account/Discourse/Discourse.jsx","webpack:///./src/modules/pages/components/Dashboard/Account/Email/Email.jsx","webpack:///./src/modules/pages/components/Dashboard/Account/Name/Name.jsx","webpack:///./src/modules/pages/components/Dashboard/Account/Statistics/Statistics.jsx","webpack:///./src/modules/pages/components/Dashboard/Account/Account.jsx","webpack:///./src/modules/pages/components/Dashboard/Admin/AddAdmin/AddAdmin.jsx","webpack:///./src/modules/pages/components/Dashboard/Admin/AddPayment/AddPayment.jsx","webpack:///./src/modules/pages/components/Dashboard/Admin/AddTask/AddTask.jsx","webpack:///./src/modules/pages/components/Dashboard/Admin/Admin.jsx","webpack:///./src/modules/pages/components/Dashboard/Colonies/AddColony/AddColony.jsx","webpack:///./src/modules/pages/components/Dashboard/Colonies/ColonyItem/ColonyItem.jsx","webpack:///./src/modules/pages/components/Dashboard/Colonies/Colonies.jsx","webpack:///./src/modules/pages/components/Dashboard/Contributions/Contributions.jsx","webpack:///./src/modules/pages/components/Dashboard/Dashboard.jsx","webpack:///./src/modules/pages/components/Dashboard/Dashboard.js","webpack:///./src/modules/pages/components/Dashboard/index.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","_pages_Dashboard__WEBPACK_IMPORTED_MODULE_1__","Colonies","createElement","Dashboard","page","MSG","defineMessages","defaultError","id","defaultMessage","ErrorMessage","_ref","appearance","className","error","rest","objectWithoutPropertiesLoose_default","classNames","getMainClasses","styles","react_default","a","Object","assign","errorDot","Error","toString","index_es","displayName","injectIntl","d","components_ErrorMessage_ErrorMessage","Input","formatMessage","intl","label","labelValues","_ref$type","type","labelText","htmlFor","style","borderColor","components_Input_Input","amount","symbol","FormattedToken","decimals","loading","maximumFractionDigits","minimumFractionDigits","formattedAmount","Math","pow","tokenFormat","SpinnerLoader","theme","values","value","components_FormattedToken_FormattedToken","siteName","SEO","baseUrl","descriptionContent","description","descriptionValues","getAbsoluteImagePath","isDocPage","location","siteLogo","titleContent","title","titleValues","_ref$images","images","absolutePath","withPrefix","pathname","imagePaths","map","indexOf","push","ogType","schemaOrgJSONLD","@context","@type","url","name","itemListElement","position","item","@id","image","author","headline","Helmet_default","content","imagePath","key","JSON","stringify","itemProp","property","enhance","compose","BaseComponent","fromRenderProps","FileContext","Consumer","files","withLocation","defaultProps","withProps","withHandlers","project","startsWith","_ref2","parts_components_SEO_SEO","node","IPFS","require","Buffer","waitForIPFS","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","start","abrupt","Promise","resolve","reject","on","err","stop","this","apply","arguments","exports","init","_callee2","_context2","saveHash","_ref3","_callee3","data","result","_context3","from","add","sent","hash","_x","getHash","_ref4","_callee4","buf","_context4","cat","parse","t0","_x2","none","server","process","SERVER_URL","IssueTableRow","issue","loadedRemote","network","_useState","useState","contribution","setContribution","_useState2","setError","_useState3","loadedLocal","setLoadedLocal","_useState4","setLoading","getContribution","useCallback","asyncToGenerator_default","regenerator_default","options","method","headers","Content-Type","fetch","then","res","json","catch","fetchError","useEffect","localContribution","getStore","setStore","createdAt","length","substring","concat","Link","href","text","split","typeId","payout","components_IssueTableRow_IssueTableRow","deselectCurrent","module","debug","message","reselectPrevious","range","selection","success","document","createRange","getSelection","textContent","all","top","clip","whiteSpace","webkitUserSelect","MozUserSelect","msUserSelect","userSelect","addEventListener","e","stopPropagation","format","preventDefault","clipboardData","clearData","setData","body","appendChild","selectNodeContents","addRange","execCommand","console","warn","window","copyKey","test","navigator","userAgent","replace","prompt","removeRange","removeAllRanges","removeChild","rangeCount","active","activeElement","ranges","i","getRangeAt","tagName","toUpperCase","blur","forEach","focus","connectGitHubMessage","connectGitHubInputLabel","connectGitHubButton","connectGitHubGitHubMessage","Login","authenticate","serverError","wallet","main","field","disabled","padding","size","address","Button","color","onClick","adminLink","accountLink","coloniesLink","contributionsLink","Sidebar","user","linkActive","link","admin","slug","copy","copied","Copy","copyTarget","setCopied","copiedTimeout","useRef","handleCopy","current","setTimeout","clearTimeout","Image","alt","src","primaryAddress","primaryAddressWarning","updateAddress","Address","setUser","components_Copy_Copy","addresses","session","loader","deleteAccount","deleteAccountConfirm","deleteAccountCancel","deleteAccountDelete","DeleteAccount","disconnect","confirmDelete","setConfirmDelete","Fragment","font","weight","response","connectedAccountsConnect","connectedAccountsDiscourseLabel","connectedAccountsRemove","Discourse","display","discourse","undefined","username","margin","emailAdd","emailCancel","emailEdit","emailLabel","emailSave","Email","initialEmail","email","edit","setEdit","setEmail","input","setInput","_useState5","handleSaveEmail","onChange","event","currentTarget","onKeyDown","nameCancel","nameEdit","nameSave","Name","initialName","setName","handleSaveName","marginRight","marginTop","statisticsSwitchNetwork","Statistics","colonyClient","loaded","setLoaded","statistics","setStatistics","getStatistics","balance","skillId","_ref5","reputationAmount","tokenClient","getBalanceOf","call","sourceAddress","getDomain","domainId","getReputation","reputation","localStatistics","supportedNetwork","statistic","displayStatistics","connectedAccountsTitle","connectedAccountsDescription","connectedAccountsGitHubLabel","logout","Account","header","photo","github","Account_Name_Name","Account_Address_Address","Account_Statistics_Statistics","contentColumn","contentTitle","Account_Discourse_Discourse","Account_Email_Email","accountButtons","Account_DeleteAccount_DeleteAccount","buttonAddAdmin","labelAddress","labelUsername","AddAdmin","setAddress","setSuccess","setUsername","handleAddAdmin","setRootRole","send","setTo","buttonAddPayment","contributionLink","labelAmount","labelIssue","labelPullRequest","labelRecipient","labelSkillId","AddPayment","setAmount","setIssue","pullRequest","setPullRequest","_useState6","recipient","setRecipient","_useState7","setSkillId","_useState8","handleAddPayment","addPaymentResponse","paymentId","addPayment","token","contract","BN","Number","eventData","networkId","handleChangeAmount","handleChangeIssue","handleChangePullRequest","handleChangeRecipient","handleChangeSkillId","handleChangeUsername","buttonAddTask","labelDueDate","AddTask","dueDate","setDueDate","handleAddTask","specificationHash","addTaskResponse","taskId","ipfs","addTask","Date","setAllTaskPayouts","managerAmount","evaluatorAmount","workerAmount","handleChangeDueDate","unauthorized","Admin","visible","setVisible","menu","Admin_AddAdmin_AddAdmin","Admin_AddPayment_AddPayment","Admin_AddTask_AddTask","submitAddress","AddColony","networkClient","setAddColony","handleAddColony","isAddress","isColony","colony","colonies","colonyAddress","colonyLabel","colonyTokenAddress","linkColonyLabel","removeColony","removeColonyCancel","removeColonyConfirm","ColonyItem","actions","setActions","setColony","setRemoveColony","localColony","tokenAddress","lookupRegisteredENSDomain","ensAddress","domain","getColonyClientByAddress","getTokenAddress","handleHideActions","handleShowActions","_ref6","handleCancelRemove","_ref7","handleRemoveColony","_ref8","_callee5","_context5","colonyError","onMouseEnter","onMouseLeave","colonyContent","arrow","DOCS_COLONY_JS_REGISTERING_ENS_LABELS","buttonAddColony","buttonCancel","mainTitle","mainDescription","emptyTitle","emptyDescription","emptyCreateColony","emptyCreateColonyDescription","emptyAddColony","emptyAddColonyDescription","learnMoreTitle","linkColonyRoles","linkDomainsAndSkills","linkGetStarted","linkTasksAndPayments","linkTokensAndFunding","unsupportedNetworkTitle","unsupportedNetworkMessage","addColony","coloniesExist","wrapper","subTitle","addColonyButton","Colonies_AddColony_AddColony","Colonies_ColonyItem_ColonyItem","learnMore","DOCS_COLONY_JS_GET_STARTED","DOCS_COLONY_JS_TOKENS_AND_FUNDING","DOCS_COLONY_JS_TASKS_AND_PAYMENTS","emptyItem","emptyItemTitle","networkWrapper","networkContentWrapper","networkContent","networkImage","buttonRequestReward","issuesHeaderDate","issuesHeaderLink","issuesHeaderReward","issuesHeaderTitle","issuesSubtext","noContributionsLink","noContributionsMessage","noContributionsTitle","showMore","Contributions","count","setCount","issues","setIssues","setLoadedRemote","loadingMore","setLoadingMore","getIssues","Authorization","DOCS_GITHUB_TOKEN","query","search","edges","localUserIssues","slice","joinColonyLink","noContributions","noContributionsWrapper","noContributionsImage","PAGE_DEVELOPER_PORTAL_CONTRIBUTE","pageDescription","pageTitle","close","Dashboard_Login_Login","Helmet","sidebar","Dashboard_Sidebar_Sidebar","es","primary","Dashboard_Admin_Admin","path","PAGE_DEVELOPER_PORTAL_DASHBOARD_ADMIN","Dashboard_Account_Account","PAGE_DEVELOPER_PORTAL_DASHBOARD_ACCOUNT","PAGE_DEVELOPER_PORTAL_DASHBOARD","Dashboard_Colonies_Colonies","PAGE_DEVELOPER_PORTAL_DASHBOARD_COLONIES","Dashboard_Contributions_Contributions","PAGE_DEVELOPER_PORTAL_DASHBOARD_CONTRIBUTIONS","height","nest","DeveloperPortalLayout","pages_components_Dashboard_Dashboard"],"mappings":"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","file":"component---src-pages-dashboard-colonies-js-6e0e59b56bd531ea7ff0.js","sourcesContent":["/* @flow */\n\nimport { createElement } from 'react';\n\nimport Dashboard from '~pages/Dashboard';\n\nconst Colonies = () => createElement(Dashboard, { page: 'colonies' });\n\nexport default Colonies;\n","/* @flow */\n\nimport type { IntlShape, MessageDescriptor } from 'react-intl';\n\nimport React from 'react';\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\n\nimport { getMainClasses } from '~utils/css';\n\nimport styles from './ErrorMessage.module.css';\n\nconst MSG = defineMessages({\n  defaultError: {\n    id: 'core.ErrorMessage.defaultError',\n    defaultMessage: 'An error occured',\n  },\n});\n\ntype Appearance = {|\n  color?: 'pink',\n|};\n\ntype Props = {|\n  /** Appearance object */\n  appearance?: Appearance,\n  /** Setting this will add className styles to the `appearance` object */\n  className?: string,\n  /** Error message */\n  error: Error | MessageDescriptor | string,\n  /** Injected by `injectIntl` */\n  intl: IntlShape,\n|};\n\nconst displayName = 'ErrorMessage';\n\nconst ErrorMessage = ({ appearance, className, error, ...rest }: Props) => {\n  const classNames = className\n    ? `${getMainClasses(appearance, styles)} ${className}`\n    : getMainClasses(appearance, styles);\n  const printMessage = () => {\n    if (error instanceof Error) {\n      return error.toString();\n    }\n    if (typeof error === 'object') {\n      return <FormattedMessage {...error} />;\n    }\n    if (typeof error === 'string') {\n      return error;\n    }\n    return <FormattedMessage {...MSG.defaultError} />;\n  };\n  return (\n    <div className={classNames} {...rest}>\n      <div className={styles.errorDot} />\n      <div>{printMessage()}</div>\n    </div>\n  );\n};\n\nErrorMessage.displayName = displayName;\n\nexport default injectIntl(ErrorMessage);\n","/* @flow */\n\nexport { default } from './ErrorMessage.jsx';\n","/* @flow */\n\nimport type { IntlShape, MessageDescriptor } from 'react-intl';\n\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\n\nimport { getMainClasses } from '~utils/css';\n\nimport styles from './Input.module.css';\n\ntype Appearance = {|\n  display?: 'none',\n  padding?: 'small' | 'large' | 'huge',\n  size?: 'large' | 'stretch',\n|};\n\ntype Props = {\n  /** Appearance object */\n  appearance?: Appearance,\n  /** Setting this will add className styles to the `appearance` object */\n  className?: string,\n  /** Outline in red if error */\n  error?: ?string,\n  /** Injected by `injectIntl` */\n  intl: IntlShape,\n  /** ID required to connect label and input */\n  id: string,\n  /** A string or a `messageDescriptor` that make up the input's label */\n  label?: MessageDescriptor | string,\n  /** Values for loading label (react-intl interpolation) */\n  labelValues?: Object,\n  /** Input html type attribute */\n  type?: 'date' | 'number' | 'text',\n};\n\nconst displayName = 'Input';\n\nconst Input = ({\n  appearance,\n  className,\n  error,\n  id,\n  intl: { formatMessage },\n  label,\n  labelValues,\n  type = 'text',\n  ...rest\n}: Props) => {\n  const classNames = className\n    ? `${getMainClasses(appearance, styles)} ${className}`\n    : getMainClasses(appearance, styles);\n  const labelText =\n    typeof label === 'string'\n      ? label\n      : label && formatMessage(label, labelValues);\n  return (\n    <label htmlFor={id} className={styles.label}>\n      <span>{labelText}</span>\n      <input\n        id={id}\n        className={classNames}\n        style={error ? { borderColor: '#F5416E' } : null}\n        type={type}\n        {...rest}\n      />\n    </label>\n  );\n};\n\nInput.displayName = displayName;\n\nexport default injectIntl(Input);\n","/* @flow */\n\nexport { default } from './Input.jsx';\n","/* @flow */\n\nimport type { IntlShape } from 'react-intl';\n\nimport React from 'react';\nimport {\n  defineMessages,\n  FormattedMessage,\n  FormattedNumber,\n  injectIntl,\n} from 'react-intl';\n\nimport { getMainClasses } from '~utils/css';\n\nimport SpinnerLoader from '~core/SpinnerLoader';\n\nimport styles from './FormattedToken.module.css';\n\nconst MSG = defineMessages({\n  amount: {\n    id: 'parts.FormattedToken.amount',\n    defaultMessage: '{amount}',\n  },\n  symbol: {\n    id: 'parts.FormattedToken.symbol',\n    defaultMessage: ' {symbol}',\n  },\n});\n\ntype Appearance = {|\n  theme?: 'statistics',\n|};\n\ntype Props = {|\n  /** Appearance object */\n  appearance?: Appearance,\n  /** Token amount */\n  amount: number,\n  /** Setting this will add className styles to the `appearance` object */\n  className?: string,\n  /** Token amount */\n  decimals?: number,\n  /** Injected by `injectIntl` */\n  intl: IntlShape,\n  /** Replace amount with loading indicator when loading */\n  loading?: boolean,\n  /** Maximum number of fraction digits */\n  maximumFractionDigits?: number,\n  /** Minimum number of fraction digits */\n  minimumFractionDigits?: number,\n  /** Token symbol */\n  symbol: string,\n|};\n\nconst displayName = 'FormattedToken';\n\nconst FormattedToken = ({\n  amount,\n  appearance,\n  className,\n  decimals,\n  loading,\n  maximumFractionDigits,\n  minimumFractionDigits,\n  symbol,\n}: Props) => {\n  const classNames = className\n    ? `${getMainClasses(appearance, styles)} ${className}`\n    : getMainClasses(appearance, styles);\n  const formattedAmount = amount / 10 ** (decimals || 18);\n  const tokenFormat = {\n    id: symbol,\n    maximumFractionDigits: maximumFractionDigits || 4,\n    minimumFractionDigits: minimumFractionDigits || 0,\n  };\n  return (\n    <div className={classNames}>\n      {loading ? (\n        <SpinnerLoader appearance={{ theme: 'primary' }} />\n      ) : (\n        <FormattedMessage\n          {...MSG.amount}\n          values={{\n            amount: (\n              <FormattedNumber {...tokenFormat} value={formattedAmount} />\n            ),\n          }}\n        />\n      )}\n      <FormattedMessage {...MSG.symbol} values={{ symbol }} />\n    </div>\n  );\n};\n\nFormattedToken.displayName = displayName;\n\nexport default injectIntl(FormattedToken);\n","/* @flow */\n\nexport { default } from './FormattedToken.jsx';\n","/* @flow */\n\nimport React from 'react';\nimport { defineMessages } from 'react-intl';\nimport Helmet from 'react-helmet';\nimport { withPrefix } from 'gatsby';\n\nimport type { OutProps as Props } from './types';\n\nconst MSG = defineMessages({\n  siteName: {\n    id: 'parts.SEO.siteName',\n    defaultMessage: 'Colony Open Source Docs',\n  },\n});\n\nconst displayName = 'parts.SEO';\n\nconst SEO = ({\n  baseUrl,\n  description: descriptionContent,\n  descriptionValues,\n  getAbsoluteImagePath,\n  intl: { formatMessage },\n  isDocPage,\n  location,\n  siteLogo,\n  title: titleContent,\n  titleValues,\n  images = [siteLogo],\n}: Props) => {\n  const absolutePath = location && `${baseUrl}${withPrefix(location.pathname)}`;\n  const imagePaths = images.map(getAbsoluteImagePath);\n  if (imagePaths.indexOf(siteLogo) < 0) imagePaths.push(siteLogo);\n  const ogType = location && location.pathname === '/' ? 'website' : 'article';\n  const siteName = formatMessage(MSG.siteName);\n  const title =\n    typeof titleContent === 'string'\n      ? titleContent\n      : formatMessage(titleContent, titleValues);\n  const description =\n    typeof descriptionContent === 'string'\n      ? descriptionContent\n      : formatMessage(descriptionContent, descriptionValues);\n\n  const schemaOrgJSONLD = [\n    {\n      '@context': 'http://schema.org',\n      '@type': 'WebSite',\n      url: baseUrl,\n      name: siteName,\n    },\n  ];\n\n  if (isDocPage) {\n    schemaOrgJSONLD.push(\n      {\n        '@context': 'http://schema.org',\n        '@type': 'BreadcrumbList',\n        itemListElement: [\n          {\n            '@type': 'ListItem',\n            position: 1,\n            item: {\n              '@id': absolutePath,\n              name: title,\n              image: imagePaths[0],\n            },\n          },\n        ],\n      },\n      {\n        '@context': 'http://schema.org',\n        '@type': 'BlogPosting',\n        author: 'Colony',\n        url: absolutePath,\n        name: title,\n        headline: title,\n        image: {\n          '@type': 'ImageObject',\n          url: imagePaths[0],\n        },\n        description,\n      },\n    );\n  }\n\n  return (\n    <Helmet>\n      {/* General tags */}\n      <meta name=\"description\" content={description} />\n      {imagePaths.map(imagePath => (\n        <meta name=\"image\" content={imagePath} key={imagePath} />\n      ))}\n\n      {/* Schema.org tags */}\n      <script type=\"application/ld+json\">\n        {JSON.stringify(schemaOrgJSONLD)}\n      </script>\n\n      {/* Google+ tags */}\n      <meta itemProp=\"name\" content={title} />\n      <meta itemProp=\"description\" content={description} />\n      {imagePaths.map(imagePath => (\n        <meta itemProp=\"image\" content={imagePath} key={imagePath} />\n      ))}\n\n      {/* OpenGraph tags */}\n      <meta property=\"og:url\" content={absolutePath} />\n      <meta property=\"og:type\" content={ogType} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={description} />\n      <meta property=\"og:site_name\" content={siteName} />\n      {imagePaths.map(imagePath => (\n        <meta property=\"og:image\" content={imagePath} key={imagePath} />\n      ))}\n\n      {/* Twitter Card tags */}\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:site\" content=\"@joincolony\" />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={description} />\n      {imagePaths.map(imagePath => (\n        <meta name=\"twitter:image\" content={imagePath} key={imagePath} />\n      ))}\n    </Helmet>\n  );\n};\n\nSEO.displayName = displayName;\n\nexport default SEO;\n","/* @flow */\n\nimport type { HOC } from 'recompose';\n\nimport { injectIntl } from 'react-intl';\nimport { compose, defaultProps, withHandlers, withProps } from 'recompose';\n\nimport { withFileContext } from '~hoc/files';\nimport { withLocation } from '~hoc/location';\n\nimport type { InProps } from './types';\n\nimport SEO from './SEO.jsx';\n\nconst enhance: HOC<*, InProps> = compose(\n  injectIntl,\n  withFileContext(),\n  withLocation(),\n  defaultProps({\n    isDocPage: false,\n  }),\n  withProps(() => ({\n    baseUrl: 'https://docs.colony.io',\n  })),\n  withHandlers({\n    getAbsoluteImagePath: ({ baseUrl, files, project }) => (\n      imagePath: string,\n    ) => {\n      return imagePath.startsWith('http')\n        ? imagePath\n        : `${baseUrl}${\n            files && files[`${project}/${imagePath}`]\n              ? files[`${project}/${imagePath}`]\n              : imagePath\n          }`;\n    },\n  }),\n  withProps(({ getAbsoluteImagePath }) => ({\n    siteLogo: getAbsoluteImagePath('/img/colonyDocs_combomark.svg'),\n  })),\n);\n\nexport default enhance(SEO);\n","/* @flow */\n\nimport type { ComponentType } from 'react';\n\nimport { fromRenderProps } from 'recompose';\n\nimport FileContext from '~context/FileContext';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const withFileContext = () => (BaseComponent: ComponentType<Object>) =>\n  // $FlowFixMe\n  fromRenderProps(FileContext.Consumer, files => ({ files }))(BaseComponent);\n","/* @flow */\n\nexport { default } from './SEO';\n","/* @flow */\n\nconst IPFS = require('ipfs');\n\nconst { Buffer } = IPFS;\n\nlet node;\n\nconst waitForIPFS = async () => {\n  node = new IPFS({ start: false });\n  return new Promise((resolve, reject) => {\n    node.on('ready', () => resolve(true));\n    node.on('error', err => reject(err));\n  });\n};\n\nexports.init = async () => {\n  await waitForIPFS();\n  return node.start();\n};\n\nexports.saveHash = async (item: *) => {\n  const data = Buffer.from(JSON.stringify(item));\n  const result = await node.add(data);\n  return result[0].hash;\n};\n\nexports.getHash = async (hash: string) => {\n  const buf = await node.cat(`/ipfs/${hash}`);\n  let item;\n  try {\n    item = JSON.parse(buf.toString());\n  } catch (err) {\n    throw new Error(`Could not get hash ${hash}`);\n  }\n  return item;\n};\n\nexports.stop = () => node.stop();\n","/* @flow */\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { defineMessages, FormattedDate, FormattedMessage } from 'react-intl';\n\nimport type { Issue, Network } from '~types';\n\nimport FormattedToken from '~core/FormattedToken';\nimport Link from '~core/Link';\nimport SpinnerLoader from '~core/SpinnerLoader';\n\nimport {\n  getStore,\n  setStore,\n} from '~layouts/DeveloperPortalLayout/localStorage';\n\nimport styles from './IssueTableRow.module.css';\n\nconst MSG = defineMessages({\n  error: {\n    id: 'pages.Contribute.Issue.error',\n    defaultMessage: 'Error',\n  },\n  none: {\n    id: 'pages.Contribute.Issue.none',\n    defaultMessage: 'None',\n  },\n});\n\ntype Props = {|\n  issue: Issue,\n  loadedRemote?: boolean,\n  network: Network,\n|};\n\nconst displayName = 'pages.Contribute.Issue';\n\nconst server = process.env.SERVER_URL || 'https://chora.io';\n\nconst IssueTableRow = ({ issue, loadedRemote, network }: Props) => {\n  const [contribution, setContribution] = useState(null);\n  const [error, setError] = useState(null);\n  const [loadedLocal, setLoadedLocal] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  const formatIssueLink = url => {\n    const repository = url.split('/')[4];\n    const issueNumber = url.split('/')[6];\n    return `${repository}#${issueNumber}`;\n  };\n\n  const getContribution = useCallback(async () => {\n    const options = {\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' },\n    };\n    // eslint-disable-next-line no-undef\n    fetch(\n      `${server}/api/contribution?networkId=${network ? network.id : 1}&issue=${\n        issue.node.url\n      }`,\n      options,\n    )\n      .then(res => res.json())\n      .then(data => {\n        setContribution(data.contribution || { none: true });\n        setLoading(false);\n      })\n      .catch(fetchError => {\n        setError(fetchError);\n        setLoading(false);\n      });\n  }, [issue, network]);\n\n  useEffect(() => {\n    if (!loadedLocal) {\n      const localContribution = getStore(issue.node.url);\n      setContribution(localContribution);\n      setLoadedLocal(true);\n    }\n  }, [issue, loadedLocal]);\n\n  useEffect(() => {\n    setStore(issue.node.url, contribution);\n  }, [contribution, issue]);\n\n  useEffect(() => {\n    if (loadedRemote) {\n      getContribution();\n    }\n  }, [getContribution, loadedRemote]);\n\n  return (\n    <tr>\n      <td>\n        <FormattedDate value={issue.node.createdAt} />\n      </td>\n      <td>\n        {issue.node.title.length > 50\n          ? issue.node.title.substring(0, 50).concat('...')\n          : issue.node.title}\n      </td>\n      <td>\n        <Link href={issue.node.url} text={formatIssueLink(issue.node.url)} />\n      </td>\n      <td>\n        {contribution && contribution.none && (\n          <FormattedMessage {...MSG.none} />\n        )}\n        {contribution && !contribution.none && (\n          <Link\n            href={`/contribute/${contribution.type}?id=${contribution.typeId}`}\n          >\n            <FormattedToken amount={contribution.payout} symbol=\"CDEV\" />\n          </Link>\n        )}\n        {!contribution && loading && (\n          <SpinnerLoader appearance={{ theme: 'primary' }} />\n        )}\n        {!contribution && error && (\n          <span className={styles.error}>\n            <FormattedMessage {...MSG.error} />\n          </span>\n        )}\n      </td>\n    </tr>\n  );\n};\n\nIssueTableRow.displayName = displayName;\n\nexport default IssueTableRow;\n","/* @flow */\n\nexport { default } from './IssueTableRow.jsx';\n","\"use strict\";\n\nvar deselectCurrent = require(\"toggle-selection\");\n\nvar defaultMessage = \"Copy to clipboard: #{key}, Enter\";\n\nfunction format(message) {\n  var copyKey = (/mac os x/i.test(navigator.userAgent) ? \"⌘\" : \"Ctrl\") + \"+C\";\n  return message.replace(/#{\\s*key\\s*}/g, copyKey);\n}\n\nfunction copy(text, options) {\n  var debug,\n    message,\n    reselectPrevious,\n    range,\n    selection,\n    mark,\n    success = false;\n  if (!options) {\n    options = {};\n  }\n  debug = options.debug || false;\n  try {\n    reselectPrevious = deselectCurrent();\n\n    range = document.createRange();\n    selection = document.getSelection();\n\n    mark = document.createElement(\"span\");\n    mark.textContent = text;\n    // reset user styles for span element\n    mark.style.all = \"unset\";\n    // prevents scrolling to the end of the page\n    mark.style.position = \"fixed\";\n    mark.style.top = 0;\n    mark.style.clip = \"rect(0, 0, 0, 0)\";\n    // used to preserve spaces and line breaks\n    mark.style.whiteSpace = \"pre\";\n    // do not inherit user-select (it may be `none`)\n    mark.style.webkitUserSelect = \"text\";\n    mark.style.MozUserSelect = \"text\";\n    mark.style.msUserSelect = \"text\";\n    mark.style.userSelect = \"text\";\n    mark.addEventListener(\"copy\", function(e) {\n      e.stopPropagation();\n      if (options.format) {\n        e.preventDefault();\n        e.clipboardData.clearData();\n        e.clipboardData.setData(options.format, text);\n      }\n    });\n\n    document.body.appendChild(mark);\n\n    range.selectNodeContents(mark);\n    selection.addRange(range);\n\n    var successful = document.execCommand(\"copy\");\n    if (!successful) {\n      throw new Error(\"copy command was unsuccessful\");\n    }\n    success = true;\n  } catch (err) {\n    debug && console.error(\"unable to copy using execCommand: \", err);\n    debug && console.warn(\"trying IE specific stuff\");\n    try {\n      window.clipboardData.setData(options.format || \"text\", text);\n      success = true;\n    } catch (err) {\n      debug && console.error(\"unable to copy using clipboardData: \", err);\n      debug && console.error(\"falling back to prompt\");\n      message = format(\"message\" in options ? options.message : defaultMessage);\n      window.prompt(message, text);\n    }\n  } finally {\n    if (selection) {\n      if (typeof selection.removeRange == \"function\") {\n        selection.removeRange(range);\n      } else {\n        selection.removeAllRanges();\n      }\n    }\n\n    if (mark) {\n      document.body.removeChild(mark);\n    }\n    reselectPrevious();\n  }\n\n  return success;\n}\n\nmodule.exports = copy;\n","\nmodule.exports = function () {\n  var selection = document.getSelection();\n  if (!selection.rangeCount) {\n    return function () {};\n  }\n  var active = document.activeElement;\n\n  var ranges = [];\n  for (var i = 0; i < selection.rangeCount; i++) {\n    ranges.push(selection.getRangeAt(i));\n  }\n\n  switch (active.tagName.toUpperCase()) { // .toUpperCase handles XHTML\n    case 'INPUT':\n    case 'TEXTAREA':\n      active.blur();\n      break;\n\n    default:\n      active = null;\n      break;\n  }\n\n  selection.removeAllRanges();\n  return function () {\n    selection.type === 'Caret' &&\n    selection.removeAllRanges();\n\n    if (!selection.rangeCount) {\n      ranges.forEach(function(range) {\n        selection.addRange(range);\n      });\n    }\n\n    active &&\n    active.focus();\n  };\n};\n","/* @flow */\n\nimport type { WalletObjectType } from '@colony/purser-core';\n\nimport React from 'react';\nimport { defineMessages, FormattedMessage } from 'react-intl';\n\nimport Button from '~core/Button';\nimport ErrorMessage from '~core/ErrorMessage';\nimport Input from '~core/Input';\n\nimport type { Provider } from '~types';\n\nimport styles from './Login.module.css';\n\nconst MSG = defineMessages({\n  connectGitHubMessage: {\n    id: 'pages.Dashboard.connectGitHubMessage',\n    defaultMessage: \"MetaMask connected. Let's connect your GitHub account.\",\n  },\n  connectGitHubInputLabel: {\n    id: 'pages.Dashboard.connectGitHubInputLabel',\n    defaultMessage: `Wallet Address`,\n  },\n  connectGitHubButton: {\n    id: 'pages.Dashboard.connectGitHubButton',\n    defaultMessage: `Connect GitHub`,\n  },\n  connectGitHubGitHubMessage: {\n    id: 'pages.Dashboard.connectGitHubGitHubMessage',\n    defaultMessage: `We'll use your GitHub account to reward you for\n    contributions.`,\n  },\n});\n\ntype Props = {|\n  authenticate: (provider: Provider) => void,\n  serverError?: string,\n  wallet: WalletObjectType,\n|};\n\nconst displayName = 'pages.Dashboard.Login';\n\nconst Login = ({ authenticate, serverError, wallet }: Props) => (\n  <div className={styles.main}>\n    <div className={styles.content}>\n      <p className={styles.text}>\n        <FormattedMessage {...MSG.connectGitHubMessage} />\n      </p>\n      <div className={styles.field}>\n        <Input\n          disabled\n          appearance={{\n            padding: 'huge',\n            size: 'stretch',\n          }}\n          id=\"address\"\n          label={MSG.connectGitHubInputLabel}\n          type=\"text\"\n          value={wallet.address}\n        />\n      </div>\n      <div className={styles.field}>\n        <Button\n          appearance={{\n            theme: 'primary',\n            color: 'white',\n            padding: 'huge',\n            size: 'stretch',\n          }}\n          onClick={() => authenticate('github')}\n          text={MSG.connectGitHubButton}\n        />\n      </div>\n      {serverError && (\n        <ErrorMessage appearance={{ color: 'pink' }} error={serverError} />\n      )}\n    </div>\n  </div>\n);\n\nLogin.displayName = displayName;\n\nexport default Login;\n","/* @flow */\n\nimport React from 'react';\n\nimport { defineMessages } from 'react-intl';\n\nimport type { Network, User } from '~types';\n\nimport Link from '~core/Link';\n\nimport styles from './Sidebar.module.css';\n\nconst MSG = defineMessages({\n  adminLink: {\n    id: 'pages.Dashboard.Sidebar.adminLink',\n    defaultMessage: 'Admin',\n  },\n  accountLink: {\n    id: 'pages.Dashboard.Sidebar.accountLink',\n    defaultMessage: 'Account',\n  },\n  coloniesLink: {\n    id: 'pages.Dashboard.Sidebar.coloniesLink',\n    defaultMessage: 'Colonies',\n  },\n  contributionsLink: {\n    id: 'pages.Dashboard.Sidebar.contributionsLink',\n    defaultMessage: 'Contributions',\n  },\n});\n\ntype Props = {|\n  active: string,\n  network: ?Network,\n  user: ?User,\n|};\n\nconst displayName = 'pages.Dashboard.Sidebar';\n\nconst Sidebar = ({ active, network, user }: Props) => (\n  <div className={styles.main}>\n    <div>\n      <Link\n        className={active === 'account' ? styles.linkActive : styles.link}\n        href=\"/dashboard/account\"\n        text={MSG.accountLink}\n      />\n      <Link\n        className={active === 'colonies' ? styles.linkActive : styles.link}\n        href=\"/dashboard/colonies\"\n        text={MSG.coloniesLink}\n      />\n      <Link\n        className={active === 'contributions' ? styles.linkActive : styles.link}\n        href=\"/dashboard/contributions\"\n        text={MSG.contributionsLink}\n      />\n      {user && network && user.admin && user.admin[network.slug] && (\n        <Link\n          className={active === 'admin' ? styles.linkActive : styles.link}\n          href=\"/dashboard/admin\"\n          text={MSG.adminLink}\n        />\n      )}\n    </div>\n  </div>\n);\n\nSidebar.displayName = displayName;\n\nexport default Sidebar;\n","/* @flow */\n\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { defineMessages, FormattedMessage } from 'react-intl';\nimport copy from 'copy-to-clipboard';\n\nimport Button from '~core/Button';\nimport Image from '~core/Image';\n\nimport styles from './Copy.module.css';\n\nconst MSG = defineMessages({\n  copy: {\n    id: 'pages.Dashboard.Account.Address.copy',\n    defaultMessage: 'Copy',\n  },\n  copied: {\n    id: 'pages.Dashboard.Account.Address.copied',\n    defaultMessage: 'Copied',\n  },\n});\n\ntype Props = {|\n  /** The text that will be copied */\n  copyTarget: string,\n|};\n\nconst displayName = 'Copy';\n\nconst Copy = ({ copyTarget }: Props) => {\n  const [copied, setCopied] = useState(false);\n  const copiedTimeout = useRef(null);\n\n  const handleCopy = useCallback(() => {\n    copy(copyTarget);\n    setCopied(true);\n    copiedTimeout.current = setTimeout(() => {\n      setCopied(false);\n    }, 2000);\n  }, [copyTarget]);\n\n  useEffect(() => {\n    return () => {\n      if (copied) clearTimeout(copiedTimeout.current);\n    };\n  }, [copied]);\n\n  if (copied) {\n    return (\n      <div className={styles.main}>\n        <Button appearance={{ theme: 'reset' }} disabled type=\"submit\">\n          <Image className={styles.copy} alt={MSG.copy} src=\"/img/copied.svg\" />\n        </Button>\n        <FormattedMessage {...MSG.copied} />\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.main}>\n      <Button\n        appearance={{ theme: 'reset' }}\n        onClick={handleCopy}\n        type=\"submit\"\n      >\n        <Image className={styles.copy} alt={MSG.copy} src=\"/img/copy.svg\" />\n      </Button>\n    </div>\n  );\n};\n\nCopy.displayName = displayName;\n\nexport default Copy;\n","/* @flow */\n\nimport type { WalletObjectType } from '@colony/purser-core';\n\nimport React, { useState } from 'react';\nimport { defineMessages, FormattedMessage } from 'react-intl';\n// import Blockies from 'react-blockies';\n\nimport type { User } from '~types';\n\nimport Button from '~core/Button';\nimport Copy from '~core/Copy';\nimport ErrorMessage from '~core/ErrorMessage';\nimport SpinnerLoader from '~core/SpinnerLoader';\n\nimport styles from './Address.module.css';\n\nconst MSG = defineMessages({\n  primaryAddress: {\n    id: 'pages.Dashboard.Account.Address.primaryAddress',\n    defaultMessage: `Primary Address: {primaryAddress}`,\n  },\n  primaryAddressWarning: {\n    id: 'pages.Dashboard.Account.Address.primaryAddressWarning',\n    defaultMessage: `The above address is not your primary address.\n    {updateAddress}.`,\n  },\n  updateAddress: {\n    id: 'pages.Dashboard.Account.Address.updateAddress',\n    defaultMessage: 'Click here to make it so',\n  },\n});\n\ntype Props = {|\n  setUser: (user: User) => void,\n  user: User,\n  wallet: WalletObjectType,\n|};\n\nconst displayName = 'pages.Dashboard.Account.Address';\n\nconst server = process.env.SERVER_URL || 'https://chora.io';\n\nconst Address = ({ setUser, user, wallet }: Props) => {\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const handleUpdateAddress = () => {\n    setError(null);\n    setLoading(true);\n    const options = {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ address: wallet.address }),\n    };\n    // eslint-disable-next-line no-undef\n    fetch(`${server}/api/user/address?sessionID=${user.session.id}`, options)\n      .then(res => res.json())\n      .then(data => {\n        if (data.error) {\n          setError(data.error);\n          setLoading(false);\n        } else {\n          setUser({ ...user, addresses: data.addresses });\n          setLoading(false);\n        }\n      })\n      .catch(fetchError => {\n        setError(fetchError.message);\n        setLoading(false);\n      });\n  };\n\n  return (\n    <div className={styles.main}>\n      <div className={styles.address}>\n        {/*\n        <Blockies\n          className={styles.blockies}\n          seed={wallet.address}\n          scale={2.5}\n        />\n        */}\n        {wallet.address}\n        <Copy copyTarget={wallet.address} />\n      </div>\n      {user.addresses[0] !== wallet.address && (\n        <div className={styles.primaryAddress}>\n          <div>\n            <FormattedMessage\n              values={{\n                updateAddress: (\n                  <Button\n                    appearance={{ theme: 'reset' }}\n                    onClick={handleUpdateAddress}\n                    style={{ color: '#289BDC' }}\n                    text={MSG.updateAddress}\n                  />\n                ),\n              }}\n              {...MSG.primaryAddressWarning}\n            />\n            {loading && (\n              <div className={styles.loader}>\n                <SpinnerLoader appearance={{ theme: 'primary' }} />\n              </div>\n            )}\n          </div>\n          <div>\n            <FormattedMessage\n              values={{ primaryAddress: user.addresses[0] }}\n              {...MSG.primaryAddress}\n            />\n          </div>\n        </div>\n      )}\n      {error && <ErrorMessage error={error} />}\n    </div>\n  );\n};\n\nAddress.displayName = displayName;\n\nexport default Address;\n","/* @flow */\n\nimport React, { useState } from 'react';\nimport { defineMessages, FormattedMessage } from 'react-intl';\n\nimport type { Provider, User } from '~types';\n\nimport Button from '~core/Button';\nimport ErrorMessage from '~core/ErrorMessage';\nimport SpinnerLoader from '~core/SpinnerLoader';\n\nimport styles from './DeleteAccount.module.css';\n\nconst MSG = defineMessages({\n  deleteAccount: {\n    id: 'pages.Dashboard.Account.deleteAccount',\n    defaultMessage: 'Delete Account',\n  },\n  deleteAccountConfirm: {\n    id: 'pages.Dashboard.Account.deleteAccountConfirm',\n    defaultMessage: 'Are you sure you want to delete your account?',\n  },\n  deleteAccountCancel: {\n    id: 'pages.Dashboard.Account.deleteAccountCancel',\n    defaultMessage: 'Cancel',\n  },\n  deleteAccountDelete: {\n    id: 'pages.Dashboard.Account.deleteAccountDelete',\n    defaultMessage: 'Delete',\n  },\n});\n\ntype Props = {|\n  disconnect: (provider: Provider) => void,\n  user: User,\n|};\n\nconst displayName = 'pages.Dashboard.Account.DeleteAccount';\n\nconst server = process.env.SERVER_URL || 'https://chora.io';\n\nconst DeleteAccount = ({ disconnect, user }: Props) => {\n  const [confirmDelete, setConfirmDelete] = useState(false);\n  const [error, setError] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const handleDeleteAccount = () => {\n    setError(null);\n    setLoading(true);\n    const options = {\n      method: 'DELETE',\n      headers: { 'Content-Type': 'application/json' },\n    };\n    // eslint-disable-next-line no-undef\n    fetch(`${server}/api/user?sessionID=${user.session.id}`, options)\n      .then(response => response.json())\n      .then(data => {\n        if (data.error) {\n          setError(data.error);\n          setLoading(false);\n        } else {\n          disconnect('github');\n          setLoading(false);\n        }\n      })\n      .catch(fetchError => {\n        setError(fetchError.message);\n        setLoading(false);\n      });\n  };\n  return (\n    <div className={styles.main}>\n      {confirmDelete ? (\n        <>\n          <span className={styles.confirmDelete}>\n            <FormattedMessage {...MSG.deleteAccountConfirm} />\n          </span>\n          {loading ? (\n            <div className={styles.loader}>\n              <SpinnerLoader appearance={{ theme: 'primary' }} />\n            </div>\n          ) : (\n            <>\n              <Button\n                appearance={{\n                  theme: 'reset',\n                  font: 'small',\n                  color: 'red',\n                  weight: 'medium',\n                }}\n                onClick={handleDeleteAccount}\n                text={MSG.deleteAccountDelete}\n                type=\"submit\"\n              />\n              <Button\n                appearance={{\n                  theme: 'reset',\n                  font: 'small',\n                  color: 'grey',\n                  weight: 'medium',\n                }}\n                onClick={() => setConfirmDelete(false)}\n                text={MSG.deleteAccountCancel}\n                type=\"submit\"\n              />\n            </>\n          )}\n        </>\n      ) : (\n        <Button\n          appearance={{\n            theme: 'reset',\n            font: 'small',\n            color: 'red',\n            weight: 'medium',\n          }}\n          onClick={() => setConfirmDelete(true)}\n          text={MSG.deleteAccount}\n          type=\"submit\"\n        />\n      )}\n      {error && <ErrorMessage error={error} />}\n    </div>\n  );\n};\n\nDeleteAccount.displayName = displayName;\n\nexport default DeleteAccount;\n","/* @flow */\n\nimport React, { useState } from 'react';\nimport { defineMessages } from 'react-intl';\n\nimport type { Provider, User } from '~types';\n\nimport Button from '~core/Button';\nimport ErrorMessage from '~core/ErrorMessage';\nimport Input from '~core/Input';\nimport SpinnerLoader from '~core/SpinnerLoader';\n\nimport styles from './Discourse.module.css';\n\nconst MSG = defineMessages({\n  connectedAccountsConnect: {\n    id: 'pages.Dashboard.Account.connectedAccountsConnect',\n    defaultMessage: 'Connect',\n  },\n  connectedAccountsDiscourseLabel: {\n    id: 'pages.Dashboard.Account.connectedAccountsDiscourseLabel',\n    defaultMessage: 'Discourse',\n  },\n  connectedAccountsRemove: {\n    id: 'pages.Dashboard.Account.connectedAccountsRemove',\n    defaultMessage: 'Remove',\n  },\n});\n\ntype Props = {|\n  authenticate: (provider: Provider) => void,\n  disconnect: (provider: Provider) => void,\n  serverError: ?string,\n  user: User,\n|};\n\nconst displayName = 'pages.Dashboard.Account.Discourse';\n\nconst server = process.env.SERVER_URL || 'https://chora.io';\n\nconst Discourse = ({ authenticate, disconnect, serverError, user }: Props) => {\n  const [error, setError] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const handleRemoveDiscourse = () => {\n    setError(null);\n    setLoading(true);\n    const options = {\n      method: 'DELETE',\n      headers: { 'Content-Type': 'application/json' },\n    };\n    // eslint-disable-next-line no-undef\n    fetch(`${server}/api/user/discourse?sessionID=${user.session.id}`, options)\n      .then(response => response.json())\n      .then(data => {\n        if (data.error) {\n          setError(data.error);\n          setLoading(false);\n        } else {\n          disconnect('discourse');\n          setLoading(false);\n        }\n      })\n      .catch(fetchError => {\n        setError(fetchError.message);\n        setLoading(false);\n      });\n  };\n  return (\n    <div className={styles.field}>\n      <Input\n        disabled\n        appearance={{\n          display: user.discourse ? undefined : 'none',\n          padding: 'huge',\n          size: 'large',\n        }}\n        id=\"discourse\"\n        label={MSG.connectedAccountsDiscourseLabel}\n        type=\"text\"\n        value={user.discourse ? `@${user.discourse.username}` : ''}\n      />\n      {user.discourse ? (\n        <>\n          {loading ? (\n            <div className={styles.loader}>\n              <SpinnerLoader appearance={{ theme: 'primary' }} />\n            </div>\n          ) : (\n            <Button\n              appearance={{\n                theme: 'reset',\n                font: 'small',\n                color: 'blue',\n                weight: 'medium',\n              }}\n              onClick={handleRemoveDiscourse}\n              text={MSG.connectedAccountsRemove}\n              type=\"submit\"\n            />\n          )}\n        </>\n      ) : (\n        <Button\n          appearance={{ theme: 'primary', padding: 'large', size: 'medium' }}\n          loading={loading}\n          onClick={() => authenticate('discourse')}\n          style={{ margin: '12px 0' }}\n          text={MSG.connectedAccountsConnect}\n          type=\"submit\"\n        />\n      )}\n      {error && <ErrorMessage error={error} />}\n      {serverError && <ErrorMessage error={serverError} />}\n    </div>\n  );\n};\n\nDiscourse.displayName = displayName;\n\nexport default Discourse;\n","/* @flow */\n\nimport React, { useState } from 'react';\nimport { defineMessages } from 'react-intl';\n\nimport Button from '~core/Button';\nimport ErrorMessage from '~core/ErrorMessage';\nimport Input from '~core/Input';\nimport SpinnerLoader from '~core/SpinnerLoader';\n\nimport type { User } from '~types';\n\nimport styles from './Email.module.css';\n\nconst MSG = defineMessages({\n  emailAdd: {\n    id: 'pages.Dashboard.Account.Email.emailAdd',\n    defaultMessage: 'Add',\n  },\n  emailCancel: {\n    id: 'pages.Dashboard.Account.Email.emailCancel',\n    defaultMessage: 'Cancel',\n  },\n  emailEdit: {\n    id: 'pages.Dashboard.Account.Email.emailEdit',\n    defaultMessage: 'Edit',\n  },\n  emailLabel: {\n    id: 'pages.Dashboard.Account.Email.emailLabel',\n    defaultMessage: 'Email',\n  },\n  emailSave: {\n    id: 'pages.Dashboard.Account.Email.emailSave',\n    defaultMessage: 'Save',\n  },\n});\n\ntype Props = {|\n  setUser: (user: User) => void,\n  user: User,\n|};\n\nconst displayName = 'pages.Dashboard.Account.Email';\n\nconst server = process.env.SERVER_URL || 'https://chora.io';\n\nconst Email = ({ setUser, user }: Props) => {\n  const initialEmail = user.email || '';\n  const [edit, setEdit] = useState(false);\n  const [email, setEmail] = useState(initialEmail);\n  const [error, setError] = useState(null);\n  const [input, setInput] = useState(!!user.email);\n  const [loading, setLoading] = useState(false);\n\n  const isValidEmail = value => {\n    const valid = /\\S+@\\S+\\.\\S+/;\n    return valid.test(value);\n  };\n\n  const handleAddEmail = () => {\n    setEdit(true);\n    setInput(true);\n  };\n\n  const handleCancelEmail = () => {\n    setEmail(initialEmail);\n    setEdit(false);\n    setError(null);\n    if (!user.email) {\n      setInput(false);\n    }\n  };\n\n  const handleChangeEmail = event => {\n    setError(null);\n    setEmail(event.currentTarget.value);\n  };\n\n  const handleSaveEmail = () => {\n    if (isValidEmail(email)) {\n      setLoading(true);\n      const options = {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email }),\n      };\n      // eslint-disable-next-line no-undef\n      fetch(`${server}/api/user/email?sessionID=${user.session.id}`, options)\n        .then(response => response.json())\n        .then(data => {\n          if (data.error) {\n            setError(data.error);\n            setLoading(false);\n          } else {\n            setUser({ ...user, email: data.email });\n            setEdit(false);\n            setLoading(false);\n          }\n        })\n        .catch(fetchError => {\n          setError(fetchError.message);\n          setLoading(false);\n        });\n    } else {\n      setError('Please provide a valid email address');\n    }\n  };\n\n  const handleKeyDown = event => {\n    if (event.key === 'Enter') {\n      handleSaveEmail();\n    }\n  };\n\n  return (\n    <div className={styles.field}>\n      <Input\n        disabled={!edit}\n        appearance={{\n          display: input ? undefined : 'none',\n          padding: 'huge',\n          size: 'large',\n        }}\n        id=\"email\"\n        error={error}\n        label={MSG.emailLabel}\n        onChange={handleChangeEmail}\n        onKeyDown={handleKeyDown}\n        type=\"text\"\n        value={email}\n      />\n      {input ? (\n        <>\n          {loading ? (\n            <div className={styles.loader}>\n              <SpinnerLoader appearance={{ theme: 'primary' }} />\n            </div>\n          ) : (\n            <>\n              <Button\n                appearance={{\n                  theme: 'reset',\n                  font: 'small',\n                  color: 'blue',\n                  weight: 'medium',\n                }}\n                onClick={edit ? () => handleSaveEmail() : () => setEdit(true)}\n                text={edit ? MSG.emailSave : MSG.emailEdit}\n                type=\"submit\"\n              />\n              {edit && (\n                <Button\n                  appearance={{\n                    theme: 'reset',\n                    font: 'small',\n                    color: 'grey',\n                    weight: 'medium',\n                  }}\n                  onClick={handleCancelEmail}\n                  text={MSG.emailCancel}\n                  type=\"submit\"\n                />\n              )}\n            </>\n          )}\n        </>\n      ) : (\n        <Button\n          appearance={{ theme: 'primary', padding: 'large', size: 'medium' }}\n          loading={loading}\n          onClick={handleAddEmail}\n          style={{ margin: '8px 0' }}\n          text={MSG.emailAdd}\n          type=\"submit\"\n        />\n      )}\n      {error && <ErrorMessage error={error} />}\n    </div>\n  );\n};\n\nEmail.displayName = displayName;\n\nexport default Email;\n","/* @flow */\n\nimport React, { useState } from 'react';\nimport { defineMessages } from 'react-intl';\n\nimport Button from '~core/Button';\nimport ErrorMessage from '~core/ErrorMessage';\nimport Input from '~core/Input';\nimport SpinnerLoader from '~core/SpinnerLoader';\n\nimport type { User } from '~types';\n\nimport styles from './Name.module.css';\n\nconst MSG = defineMessages({\n  nameCancel: {\n    id: 'pages.Dashboard.Account.Name.nameCancel',\n    defaultMessage: 'Cancel',\n  },\n  nameEdit: {\n    id: 'pages.Dashboard.Account.Name.nameEdit',\n    defaultMessage: 'Edit',\n  },\n  nameSave: {\n    id: 'pages.Dashboard.Account.Name.nameSave',\n    defaultMessage: 'Save',\n  },\n});\n\ntype Props = {|\n  setUser: (user: User) => void,\n  user: User,\n|};\n\nconst displayName = 'pages.Dashboard.Account.Name';\n\nconst server = process.env.SERVER_URL || 'https://chora.io';\n\nconst Name = ({ setUser, user }: Props) => {\n  const initialName = user.name || '';\n  const [edit, setEdit] = useState(false);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [name, setName] = useState(initialName);\n\n  const handleCancelName = () => {\n    setError(null);\n    setName(initialName);\n    setEdit(false);\n  };\n\n  const handleChangeName = event => {\n    setError(null);\n    setName(event.currentTarget.value);\n  };\n\n  const handleSaveName = () => {\n    if (name) {\n      setError(null);\n      setLoading(true);\n      const options = {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ name }),\n      };\n      // eslint-disable-next-line no-undef\n      fetch(`${server}/api/user/name?sessionID=${user.session.id}`, options)\n        .then(response => response.json())\n        .then(data => {\n          if (data.error) {\n            setError(data.error);\n            setLoading(false);\n          } else {\n            setUser({ ...user, name: data.name });\n            setEdit(false);\n            setLoading(false);\n          }\n        })\n        .catch(fetchError => {\n          setError(fetchError.message);\n          setLoading(false);\n        });\n    } else {\n      setError('Name cannot be blank');\n    }\n  };\n\n  const handleKeyDown = event => {\n    if (event.key === 'Enter') {\n      handleSaveName();\n    }\n  };\n\n  return (\n    <div>\n      <div className={styles.main}>\n        {edit ? (\n          <>\n            <Input\n              appearance={{ padding: 'huge', size: 'large' }}\n              id=\"name\"\n              onChange={handleChangeName}\n              onKeyDown={handleKeyDown}\n              style={{ marginRight: '20px', marginTop: '0' }}\n              type=\"text\"\n              value={name}\n            />\n            {loading ? (\n              <SpinnerLoader appearance={{ theme: 'primary' }} />\n            ) : (\n              <>\n                <Button\n                  appearance={{\n                    theme: 'reset',\n                    font: 'small',\n                    color: 'blue',\n                    weight: 'medium',\n                  }}\n                  onClick={handleSaveName}\n                  style={{ marginRight: '15px' }}\n                  text={MSG.nameSave}\n                  type=\"submit\"\n                />\n                <Button\n                  appearance={{\n                    theme: 'reset',\n                    font: 'small',\n                    color: 'grey',\n                    weight: 'medium',\n                  }}\n                  onClick={handleCancelName}\n                  text={MSG.nameCancel}\n                  type=\"submit\"\n                />\n              </>\n            )}\n          </>\n        ) : (\n          <Button\n            appearance={{ theme: 'reset' }}\n            className={styles.name}\n            onClick={() => setEdit(true)}\n          >\n            {user.name}\n          </Button>\n        )}\n      </div>\n      {error && <ErrorMessage error={error} />}\n    </div>\n  );\n};\n\nName.displayName = displayName;\n\nexport default Name;\n","/* @flow */\n\nimport type { ColonyClient } from '@colony/colony-js-client';\nimport type { WalletObjectType } from '@colony/purser-core';\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { defineMessages, FormattedMessage } from 'react-intl';\n\nimport type { Network } from '~types';\n\nimport { supportedNetwork } from '~layouts/DeveloperPortalLayout/helpers';\n\nimport ErrorMessage from '~core/ErrorMessage';\nimport FormattedToken from '~core/FormattedToken';\n\nimport {\n  getStore,\n  setStore,\n} from '~layouts/DeveloperPortalLayout/localStorage';\n\nimport styles from './Statistics.module.css';\n\nconst MSG = defineMessages({\n  statisticsSwitchNetwork: {\n    id: 'pages.Dashboard.Account.statisticsSwitchNetwork',\n    defaultMessage: 'Switch networks to see your token balance and reputation.',\n  },\n});\n\ntype Props = {|\n  colonyClient: ?ColonyClient,\n  network: Network,\n  wallet: WalletObjectType,\n|};\n\nconst displayStatistics = 'pages.Dashboard.Account.Statistics';\n\nconst Statistics = ({ colonyClient, network, wallet }: Props) => {\n  const [error, setError] = useState(null);\n  const [loaded, setLoaded] = useState<boolean>(false);\n  const [loadedLocal, setLoadedLocal] = useState<boolean>(false);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [statistics, setStatistics] = useState(null);\n\n  const getStatistics = useCallback(async () => {\n    if (colonyClient) {\n      setLoading(true);\n      try {\n        const {\n          amount: balance,\n        } = await colonyClient.tokenClient.getBalanceOf.call({\n          sourceAddress: wallet.address,\n        });\n        const { skillId } = await colonyClient.getDomain.call({\n          domainId: 1,\n        });\n        const { reputationAmount } = await colonyClient.getReputation({\n          skillId,\n          address: wallet.address,\n        });\n        setStatistics({\n          balance: balance.toString(),\n          reputation: reputationAmount || 0,\n        });\n        setLoaded(true);\n        setLoading(false);\n      } catch (clientError) {\n        setError(clientError.message);\n        setStatistics(null);\n        setLoading(false);\n      }\n    }\n  }, [colonyClient, wallet]);\n\n  useEffect(() => {\n    if (!loadedLocal) {\n      const localStatistics = getStore(`${wallet.address}-${network.id}`);\n      setStatistics(localStatistics);\n      setLoadedLocal(true);\n    }\n  }, [loadedLocal, network, wallet]);\n\n  useEffect(() => setStore(`${wallet.address}-${network.id}`, statistics), [\n    network,\n    statistics,\n    wallet,\n  ]);\n\n  useEffect(() => {\n    if (colonyClient && !error && !loaded && !loading) {\n      getStatistics();\n    }\n  }, [colonyClient, error, getStatistics, loaded, loading]);\n\n  if (!supportedNetwork(network)) {\n    return (\n      <div className={styles.statisticsSwitchNetwork}>\n        <FormattedMessage {...MSG.statisticsSwitchNetwork} />\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.statistics}>\n      <div className={styles.statistic}>\n        <FormattedToken\n          amount={statistics ? statistics.balance : 0}\n          appearance={{ theme: 'statistics' }}\n          loading={loading && !statistics}\n          symbol=\"CDEV\"\n        />\n      </div>\n      <div className={styles.statistic}>\n        <FormattedToken\n          amount={statistics ? statistics.reputation : 0}\n          appearance={{ theme: 'statistics' }}\n          loading={loading && !statistics}\n          symbol=\"Reputation\"\n        />\n      </div>\n      {error && <ErrorMessage error={error} />}\n    </div>\n  );\n};\n\nStatistics.displayStatistics = displayStatistics;\n\nexport default Statistics;\n","/* @flow */\n\nimport type { ColonyClient } from '@colony/colony-js-client';\nimport type { WalletObjectType } from '@colony/purser-core';\n\nimport React from 'react';\nimport { defineMessages, FormattedMessage } from 'react-intl';\n\nimport Button from '~core/Button';\nimport Image from '~core/Image';\nimport Input from '~core/Input';\n\nimport type { Network, Provider, User } from '~types';\n\nimport Address from './Address';\nimport DeleteAccount from './DeleteAccount';\nimport Discourse from './Discourse';\nimport Email from './Email';\nimport Name from './Name';\nimport Statistics from './Statistics';\n\nimport styles from './Account.module.css';\n\nconst MSG = defineMessages({\n  connectedAccountsTitle: {\n    id: 'pages.Dashboard.Account.connectedAccountsTitle',\n    defaultMessage: 'Connected Accounts',\n  },\n  connectedAccountsDescription: {\n    id: 'pages.Dashboard.Account.connectedAccountsDescription',\n    defaultMessage: `Connect your accounts so we can verify your identity and\n    reward you for your contributions.`,\n  },\n  connectedAccountsGitHubLabel: {\n    id: 'pages.Dashboard.Account.connectedAccountsGitHubLabel',\n    defaultMessage: 'GitHub',\n  },\n  logout: {\n    id: 'pages.Dashboard.Account.logout',\n    defaultMessage: 'Logout',\n  },\n});\n\ntype Props = {|\n  authenticate: (provider: Provider) => void,\n  colonyClient: ?ColonyClient,\n  disconnect: (provider: Provider) => void,\n  network: Network,\n  path: string,\n  serverError: ?string,\n  setUser: (user: User) => void,\n  user: User,\n  wallet: WalletObjectType,\n|};\n\nconst displayName = 'pages.Dashboard.Account';\n\nconst Account = ({\n  authenticate,\n  colonyClient,\n  disconnect,\n  network,\n  serverError,\n  setUser,\n  user,\n  wallet,\n}: Props) => {\n  return (\n    <div className={styles.main}>\n      <div className={styles.header}>\n        <Image\n          className={styles.photo}\n          alt={user.github.username}\n          src={user.github.photo}\n        />\n        <div>\n          <Name setUser={setUser} user={user} />\n          <Address setUser={setUser} user={user} wallet={wallet} />\n          <Statistics\n            colonyClient={colonyClient}\n            network={network}\n            wallet={wallet}\n          />\n        </div>\n      </div>\n      <div className={styles.content}>\n        <div className={styles.contentColumn}>\n          <h2 className={styles.contentTitle}>\n            <FormattedMessage {...MSG.connectedAccountsTitle} />\n          </h2>\n          <p>\n            <FormattedMessage {...MSG.connectedAccountsDescription} />\n          </p>\n        </div>\n        <div className={styles.contentColumn}>\n          <div className={styles.field}>\n            <Input\n              disabled\n              appearance={{\n                padding: 'huge',\n                size: 'large',\n              }}\n              id=\"github\"\n              label={MSG.connectedAccountsGitHubLabel}\n              type=\"text\"\n              value={`@${user.github.username}`}\n            />\n          </div>\n          <Discourse\n            authenticate={authenticate}\n            disconnect={disconnect}\n            serverError={serverError}\n            user={user}\n          />\n          <Email setUser={setUser} user={user} />\n        </div>\n      </div>\n      <div className={styles.content}>\n        <div className={styles.accountButtons}>\n          <Button\n            appearance={{\n              theme: 'reset',\n              font: 'small',\n              color: 'blue',\n              weight: 'medium',\n            }}\n            onClick={() => disconnect('github')}\n            text={MSG.logout}\n            type=\"submit\"\n          />\n          <DeleteAccount disconnect={disconnect} user={user} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nAccount.displayName = displayName;\n\nexport default Account;\n","/* @flow */\n\nimport type { ColonyClient } from '@colony/colony-js-client';\n\nimport React, { useState } from 'react';\nimport { defineMessages, FormattedMessage } from 'react-intl';\n\nimport type { Network } from '~types';\n\nimport Button from '~core/Button';\nimport ErrorMessage from '~core/ErrorMessage';\nimport Input from '~core/Input';\n\nimport styles from './AddAdmin.module.css';\n\nconst MSG = defineMessages({\n  buttonAddAdmin: {\n    id: 'pages.Dashboard.Admin.AddAdmin.buttonAddAdmin',\n    defaultMessage: 'Add Admin',\n  },\n  labelAddress: {\n    id: 'pages.Dashboard.Admin.AddAdmin.labelAddress',\n    defaultMessage: 'Ethereum Address',\n  },\n  labelUsername: {\n    id: 'pages.Dashboard.Admin.AddAdmin.labelUsername',\n    defaultMessage: 'GitHub Username',\n  },\n  success: {\n    id: 'pages.Dashboard.Admin.AddAdmin.success',\n    defaultMessage: 'Success! Admin added.',\n  },\n});\n\nconst displayName = 'pages.Contribute.AddAdmin';\n\ntype Props = {|\n  colonyClient: ?ColonyClient,\n  network: Network,\n|};\n\nconst server = process.env.SERVER_URL || 'https://chora.io';\n\nconst AddAdmin = ({ colonyClient, network }: Props) => {\n  const [address, setAddress] = useState('');\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(false);\n  const [username, setUsername] = useState('');\n\n  const handleAddAdmin = async () => {\n    if (colonyClient && address && username) {\n      await colonyClient.setRootRole.send(\n        {\n          address,\n          domainId: 1,\n          setTo: true,\n        },\n        {},\n      );\n      const options = {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ network: network.slug, username }),\n      };\n      // eslint-disable-next-line no-undef\n      fetch(`${server}/api/user/admin`, options)\n        .then(() => {\n          setSuccess(true);\n        })\n        .catch(fetchError => {\n          setError(fetchError.message);\n        });\n    }\n  };\n\n  const handleChangeAddress = event => {\n    if (success) setSuccess(false);\n    if (error) setError(null);\n    setAddress(event.currentTarget.value);\n  };\n\n  const handleChangeUsername = event => {\n    if (success) setSuccess(false);\n    if (error) setError(null);\n    setUsername(event.currentTarget.value);\n  };\n\n  return (\n    <div className={styles.main}>\n      <div className={styles.field}>\n        <Input\n          appearance={{\n            padding: 'huge',\n            size: 'stretch',\n          }}\n          id=\"address\"\n          label={MSG.labelAddress}\n          onChange={handleChangeAddress}\n          type=\"text\"\n          value={address}\n        />\n      </div>\n      <div className={styles.field}>\n        <Input\n          appearance={{\n            padding: 'huge',\n            size: 'stretch',\n          }}\n          id=\"username\"\n          label={MSG.labelUsername}\n          onChange={handleChangeUsername}\n          type=\"text\"\n          value={username}\n        />\n      </div>\n      <div className={styles.field}>\n        <Button\n          appearance={{\n            theme: 'primary',\n            padding: 'huge',\n            size: 'stretch',\n          }}\n          disabled={!address || !username}\n          onClick={handleAddAdmin}\n          text={MSG.buttonAddAdmin}\n          type=\"submit\"\n        />\n      </div>\n      {success && (\n        <div className={styles.success}>\n          <FormattedMessage {...MSG.success} />\n        </div>\n      )}\n      {error && <ErrorMessage error={error} />}\n    </div>\n  );\n};\n\nAddAdmin.displayName = displayName;\n\nexport default AddAdmin;\n","/* @flow */\n\nimport type { ColonyClient } from '@colony/colony-js-client';\n\nimport React, { useCallback, useState } from 'react';\nimport { defineMessages } from 'react-intl';\nimport { BN } from 'web3-utils';\n\nimport type { Network } from '~types';\n\nimport Button from '~core/Button';\nimport ErrorMessage from '~core/ErrorMessage';\nimport Input from '~core/Input';\nimport Link from '~core/Link';\n\nimport styles from './AddPayment.module.css';\n\nconst MSG = defineMessages({\n  buttonAddPayment: {\n    id: 'pages.Dashboard.Admin.AddPayment.buttonAddPayment',\n    defaultMessage: 'Add Payment',\n  },\n  contributionLink: {\n    id: 'pages.Dashboard.Admin.AddPayment.contributionLink',\n    defaultMessage: 'Success! Click here to view the payment.',\n  },\n  labelAmount: {\n    id: 'pages.Dashboard.Admin.AddPayment.labelAmount',\n    defaultMessage: 'Payout Amount',\n  },\n  labelIssue: {\n    id: 'pages.Dashboard.Admin.AddPayment.labelIssue',\n    defaultMessage: 'GitHub Issue URL (issue or pull request required)',\n  },\n  labelPullRequest: {\n    id: 'pages.Dashboard.Admin.AddPayment.labelPullRequest',\n    defaultMessage: 'GitHub Pull Request URL (issue or pull request required)',\n  },\n  labelRecipient: {\n    id: 'pages.Dashboard.Admin.AddPayment.labelRecipient',\n    defaultMessage: 'Recipient Ethereum Address',\n  },\n  labelSkillId: {\n    id: 'pages.Dashboard.Admin.AddPayment.labelSkillId',\n    defaultMessage: 'Skill ID',\n  },\n  labelUsername: {\n    id: 'pages.Dashboard.Admin.AddPayment.labelUsername',\n    defaultMessage: 'Recipient GitHub Username',\n  },\n});\n\nconst displayName = 'pages.Contribute.AddPayment';\n\ntype Props = {|\n  colonyClient: ?ColonyClient,\n  network: Network,\n|};\n\nconst server = process.env.SERVER_URL || 'https://chora.io';\n\nconst AddPayment = ({ colonyClient, network }: Props) => {\n  const [amount, setAmount] = useState(0);\n  const [contribution, setContribution] = useState(null);\n  const [error, setError] = useState(null);\n  const [issue, setIssue] = useState('');\n  const [pullRequest, setPullRequest] = useState('');\n  const [recipient, setRecipient] = useState('');\n  const [skillId, setSkillId] = useState(0);\n  const [username, setUsername] = useState('');\n\n  const handleAddPayment = async () => {\n    if (\n      colonyClient &&\n      amount &&\n      (issue || pullRequest) &&\n      recipient &&\n      skillId &&\n      username\n    ) {\n      const addPaymentResponse = await colonyClient.addPayment.send(\n        {\n          recipient,\n          token: colonyClient.tokenClient.contract.address,\n          amount: new BN(amount),\n          domainId: 1,\n          skillId: Number(skillId),\n        },\n        {},\n      );\n      // $FlowFixMe\n      const { paymentId } = addPaymentResponse.eventData;\n      const options = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          issue,\n          network: network.slug,\n          networkId: network.id,\n          payout: amount,\n          pullRequest,\n          type: 'payment',\n          typeId: paymentId,\n          username,\n        }),\n      };\n      // eslint-disable-next-line no-undef\n      fetch(`${server}/api/contribution`, options)\n        .then(res => res.json())\n        .then(data => {\n          setContribution(data.contribution);\n        })\n        .catch(fetchError => {\n          setError(fetchError.message);\n        });\n    }\n  };\n\n  const handleChangeAmount = useCallback(\n    event => {\n      if (contribution) setContribution(null);\n      if (error) setError(null);\n      setAmount(event.currentTarget.value);\n    },\n    [contribution, error],\n  );\n\n  const handleChangeIssue = useCallback(\n    event => {\n      if (contribution) setContribution(null);\n      if (error) setError(null);\n      setIssue(event.currentTarget.value);\n    },\n    [contribution, error],\n  );\n\n  const handleChangePullRequest = useCallback(\n    event => {\n      if (contribution) setContribution(null);\n      if (error) setError(null);\n      setPullRequest(event.currentTarget.value);\n    },\n    [contribution, error],\n  );\n\n  const handleChangeRecipient = useCallback(\n    event => {\n      if (contribution) setContribution(null);\n      if (error) setError(null);\n      setRecipient(event.currentTarget.value);\n    },\n    [contribution, error],\n  );\n\n  const handleChangeSkillId = useCallback(\n    event => {\n      if (contribution) setContribution(null);\n      if (error) setError(null);\n      setSkillId(event.currentTarget.value);\n    },\n    [contribution, error],\n  );\n\n  const handleChangeUsername = useCallback(\n    event => {\n      if (contribution) setContribution(null);\n      if (error) setError(null);\n      setUsername(event.currentTarget.value);\n    },\n    [contribution, error],\n  );\n\n  return (\n    <div className={styles.main}>\n      <div className={styles.field}>\n        <Input\n          appearance={{\n            padding: 'huge',\n            size: 'stretch',\n          }}\n          id=\"skillId\"\n          label={MSG.labelSkillId}\n          onChange={handleChangeSkillId}\n          type=\"number\"\n          value={skillId}\n        />\n      </div>\n      <div className={styles.field}>\n        <Input\n          appearance={{\n            padding: 'huge',\n            size: 'stretch',\n          }}\n          id=\"amount\"\n          label={MSG.labelAmount}\n          onChange={handleChangeAmount}\n          type=\"number\"\n          value={amount}\n        />\n      </div>\n      <div className={styles.field}>\n        <Input\n          appearance={{\n            padding: 'huge',\n            size: 'stretch',\n          }}\n          id=\"issue\"\n          label={MSG.labelIssue}\n          onChange={handleChangeIssue}\n          type=\"text\"\n          value={issue}\n        />\n      </div>\n      <div className={styles.field}>\n        <Input\n          appearance={{\n            padding: 'huge',\n            size: 'stretch',\n          }}\n          id=\"pullRequest\"\n          label={MSG.labelPullRequest}\n          onChange={handleChangePullRequest}\n          type=\"text\"\n          value={pullRequest}\n        />\n      </div>\n      <div className={styles.field}>\n        <Input\n          appearance={{\n            padding: 'huge',\n            size: 'stretch',\n          }}\n          id=\"username\"\n          label={MSG.labelUsername}\n          onChange={handleChangeUsername}\n          type=\"text\"\n          value={username}\n        />\n      </div>\n      <div className={styles.field}>\n        <Input\n          appearance={{\n            padding: 'huge',\n            size: 'stretch',\n          }}\n          id=\"recipient\"\n          label={MSG.labelRecipient}\n          onChange={handleChangeRecipient}\n          type=\"text\"\n          value={recipient}\n        />\n      </div>\n      <div className={styles.field}>\n        <Button\n          appearance={{\n            theme: 'primary',\n            padding: 'huge',\n            size: 'stretch',\n          }}\n          disabled={\n            !amount ||\n            (!pullRequest && !issue) ||\n            !recipient ||\n            !skillId ||\n            !username\n          }\n          onClick={handleAddPayment}\n          text={MSG.buttonAddPayment}\n          type=\"submit\"\n        />\n      </div>\n      {contribution && (\n        <div className={styles.success}>\n          <Link\n            href={`/contribute/${contribution.type}?id=${contribution.typeId}`}\n            text={MSG.contributionLink}\n          />\n        </div>\n      )}\n      {error && <ErrorMessage error={error} />}\n    </div>\n  );\n};\n\nAddPayment.displayName = displayName;\n\nexport default AddPayment;\n","/* @flow */\n\nimport type { ColonyClient } from '@colony/colony-js-client';\n\nimport React, { useCallback, useState } from 'react';\nimport { defineMessages } from 'react-intl';\nimport { BN } from 'web3-utils';\n\nimport type { Network } from '~types';\n\nimport ipfs from '~layouts/DeveloperPortalLayout/ipfs';\n\nimport Button from '~core/Button';\nimport ErrorMessage from '~core/ErrorMessage';\nimport Input from '~core/Input';\nimport Link from '~core/Link';\n\nimport styles from './AddTask.module.css';\n\nconst MSG = defineMessages({\n  buttonAddTask: {\n    id: 'pages.Dashboard.Admin.AddTask.buttonAddTask',\n    defaultMessage: 'Add Task',\n  },\n  contributionLink: {\n    id: 'pages.Dashboard.Admin.AddTask.contributionLink',\n    defaultMessage: 'Success! Click here to view the task.',\n  },\n  labelAmount: {\n    id: 'pages.Dashboard.Admin.AddTask.labelAmount',\n    defaultMessage: 'Payout Amount',\n  },\n  labelDueDate: {\n    id: 'pages.Dashboard.Admin.AddTask.labelDueDate',\n    defaultMessage: 'Due Date',\n  },\n  labelIssue: {\n    id: 'pages.Dashboard.Admin.AddTask.labelIssue',\n    defaultMessage: 'GitHub Issue URL',\n  },\n  labelSkillId: {\n    id: 'pages.Dashboard.Admin.AddTask.labelSkillId',\n    defaultMessage: 'Skill ID',\n  },\n});\n\nconst displayName = 'pages.Contribute.AddTask';\n\ntype Props = {|\n  colonyClient: ?ColonyClient,\n  network: Network,\n|};\n\nconst server = process.env.SERVER_URL || 'https://chora.io';\n\nconst AddTask = ({ colonyClient, network }: Props) => {\n  const [amount, setAmount] = useState(0);\n  const [contribution, setContribution] = useState(null);\n  const [dueDate, setDueDate] = useState('');\n  const [error, setError] = useState(null);\n  const [issue, setIssue] = useState('');\n  const [skillId, setSkillId] = useState(0);\n\n  const handleAddTask = async () => {\n    if (colonyClient && amount && dueDate && issue && skillId) {\n      await ipfs.init();\n      const specificationHash = await ipfs.saveHash(issue);\n      await ipfs.stop();\n      const addTaskResponse = await colonyClient.addTask.send(\n        {\n          specificationHash,\n          domainId: 1,\n          skillId: Number(skillId),\n          dueDate: new Date(dueDate),\n        },\n        {},\n      );\n      // $FlowFixMe\n      const { taskId } = addTaskResponse.eventData;\n      await colonyClient.setAllTaskPayouts.send(\n        {\n          taskId,\n          token: colonyClient.tokenClient.contract.address,\n          managerAmount: new BN(0),\n          evaluatorAmount: new BN(0),\n          workerAmount: new BN(amount),\n        },\n        {},\n      );\n      const options = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          issue,\n          networkId: network.id,\n          payout: amount,\n          type: 'task',\n          typeId: taskId,\n        }),\n      };\n      // eslint-disable-next-line no-undef\n      fetch(`${server}/api/contribution`, options)\n        .then(res => res.json())\n        .then(data => {\n          setContribution(data.contribution);\n        })\n        .catch(fetchError => {\n          setError(fetchError.message);\n        });\n    } else {\n      setError('All fields required');\n    }\n  };\n\n  const handleChangeAmount = useCallback(\n    event => {\n      if (contribution) setContribution(null);\n      if (error) setError(null);\n      setAmount(event.currentTarget.value);\n    },\n    [contribution, error],\n  );\n\n  const handleChangeDueDate = useCallback(\n    event => {\n      if (contribution) setContribution(null);\n      if (error) setError(null);\n      setDueDate(event.currentTarget.value);\n    },\n    [contribution, error],\n  );\n\n  const handleChangeIssue = useCallback(\n    event => {\n      if (contribution) setContribution(null);\n      if (error) setError(null);\n      setIssue(event.currentTarget.value);\n    },\n    [contribution, error],\n  );\n\n  const handleChangeSkillId = useCallback(\n    event => {\n      if (contribution) setContribution(null);\n      if (error) setError(null);\n      setSkillId(event.currentTarget.value);\n    },\n    [contribution, error],\n  );\n\n  return (\n    <div className={styles.main}>\n      <div className={styles.field}>\n        <Input\n          appearance={{\n            padding: 'huge',\n            size: 'stretch',\n          }}\n          id=\"skillId\"\n          label={MSG.labelSkillId}\n          onChange={handleChangeSkillId}\n          type=\"number\"\n          value={skillId}\n        />\n      </div>\n      <div className={styles.field}>\n        <Input\n          appearance={{\n            padding: 'huge',\n            size: 'stretch',\n          }}\n          id=\"amount\"\n          label={MSG.labelAmount}\n          onChange={handleChangeAmount}\n          type=\"number\"\n          value={amount}\n        />\n      </div>\n      <div className={styles.field}>\n        <Input\n          appearance={{\n            padding: 'huge',\n            size: 'stretch',\n          }}\n          id=\"dueDate\"\n          label={MSG.labelDueDate}\n          onChange={handleChangeDueDate}\n          type=\"date\"\n          value={dueDate}\n        />\n      </div>\n      <div className={styles.field}>\n        <Input\n          appearance={{\n            padding: 'huge',\n            size: 'stretch',\n          }}\n          id=\"issue\"\n          label={MSG.labelIssue}\n          onChange={handleChangeIssue}\n          type=\"text\"\n          value={issue}\n        />\n      </div>\n      <div className={styles.field}>\n        <Button\n          appearance={{\n            theme: 'primary',\n            padding: 'huge',\n            size: 'stretch',\n          }}\n          disabled={!amount || !dueDate || !issue || !skillId}\n          onClick={handleAddTask}\n          text={MSG.buttonAddTask}\n          type=\"submit\"\n        />\n      </div>\n      {contribution && (\n        <div className={styles.success}>\n          <Link\n            href={`/contribute/${contribution.type}?id=${contribution.typeId}`}\n            text={MSG.contributionLink}\n          />\n        </div>\n      )}\n      {error && <ErrorMessage error={error} />}\n    </div>\n  );\n};\n\nAddTask.displayName = displayName;\n\nexport default AddTask;\n","/* @flow */\n\nimport type { ColonyClient } from '@colony/colony-js-client';\n\nimport React, { useState } from 'react';\nimport { defineMessages } from 'react-intl';\n\nimport type { Network, User } from '~types';\n\nimport Button from '~core/Button';\nimport ErrorMessage from '~core/ErrorMessage';\n\nimport AddAdmin from './AddAdmin';\nimport AddPayment from './AddPayment';\nimport AddTask from './AddTask';\n\nimport styles from './Admin.module.css';\n\nconst MSG = defineMessages({\n  buttonAddAdmin: {\n    id: 'pages.Dashboard.Admin.buttonAddAdmin',\n    defaultMessage: 'Add Admin',\n  },\n  buttonAddPayment: {\n    id: 'pages.Dashboard.Admin.buttonAddPayment',\n    defaultMessage: 'Add Payment',\n  },\n  buttonAddTask: {\n    id: 'pages.Dashboard.Admin.buttonAddTask',\n    defaultMessage: 'Add Task',\n  },\n  unauthorized: {\n    id: 'pages.Dashboard.Admin.unauthorized',\n    defaultMessage: 'Unauthorized',\n  },\n});\n\nconst displayName = 'pages.Dashboard.Admin';\n\ntype Props = {|\n  colonyClient: ?ColonyClient,\n  network: Network,\n  /* eslint-disable-next-line react/no-unused-prop-types */\n  path: string,\n  user: User,\n|};\n\nconst Admin = ({ colonyClient, network, user }: Props) => {\n  const [visible, setVisible] = useState('AddAdmin');\n  if (!user || !user.admin || !user.admin[network.slug]) {\n    return <ErrorMessage error={MSG.unauthorized} />;\n  }\n  return (\n    <>\n      <div className={styles.main}>\n        <div className={styles.menu}>\n          <Button\n            appearance={{\n              theme: 'reset',\n              font: 'small',\n              color: visible === 'AddAdmin' ? 'blue' : 'grey',\n              weight: 'medium',\n            }}\n            onClick={() => setVisible('AddAdmin')}\n            text={MSG.buttonAddAdmin}\n            type=\"submit\"\n          />\n          <Button\n            appearance={{\n              theme: 'reset',\n              font: 'small',\n              color: visible === 'AddPayment' ? 'blue' : 'grey',\n              weight: 'medium',\n            }}\n            onClick={() => setVisible('AddPayment')}\n            text={MSG.buttonAddPayment}\n            type=\"submit\"\n          />\n          <Button\n            appearance={{\n              theme: 'reset',\n              font: 'small',\n              color: visible === 'AddTask' ? 'blue' : 'grey',\n              weight: 'medium',\n            }}\n            onClick={() => setVisible('AddTask')}\n            text={MSG.buttonAddTask}\n            type=\"submit\"\n          />\n        </div>\n        <div className={styles.content}>\n          {visible === 'AddAdmin' && (\n            <AddAdmin colonyClient={colonyClient} network={network} />\n          )}\n          {visible === 'AddPayment' && (\n            <AddPayment colonyClient={colonyClient} network={network} />\n          )}\n          {visible === 'AddTask' && (\n            <AddTask colonyClient={colonyClient} network={network} />\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n\nAdmin.displayName = displayName;\n\nexport default Admin;\n","/* @flow */\n\nimport type { ColonyNetworkClient } from '@colony/colony-js-client';\n\nimport React, { useState } from 'react';\nimport { defineMessages } from 'react-intl';\nimport { isAddress } from 'web3-utils';\n\nimport Button from '~core/Button';\nimport ErrorMessage from '~core/ErrorMessage';\nimport Input from '~core/Input';\n\nimport type { Network, User } from '~types';\n\nimport styles from './AddColony.module.css';\n\nconst MSG = defineMessages({\n  labelAddress: {\n    id: 'pages.Dashboard.Colonies.AddColony.labelAddress',\n    defaultMessage: 'Colony Address',\n  },\n  submitAddress: {\n    id: 'pages.Dashboard.Colonies.AddColony.submitAddress',\n    defaultMessage: 'Add Colony',\n  },\n});\n\ntype Props = {|\n  network: Network,\n  networkClient: ?ColonyNetworkClient,\n  setAddColony: (visible: boolean) => void,\n  setUser: (user: User) => void,\n  user: User,\n|};\n\nconst displayName = 'pages.Dashboard.Colonies.AddColony';\n\nconst server = process.env.SERVER_URL || 'https://chora.io';\n\nconst AddColony = ({\n  network,\n  networkClient,\n  setAddColony,\n  setUser,\n  user,\n}: Props) => {\n  const [address, setAddress] = useState('');\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const handleChangeAddress = event => {\n    setError(null);\n    setAddress(event.currentTarget.value);\n  };\n\n  const handleAddColony = async () => {\n    if (networkClient) {\n      if (isAddress(address)) {\n        setError(null);\n        setLoading(true);\n        const { isColony } = await networkClient.isColony.call({\n          colony: address,\n        });\n        if (!isColony) {\n          setError(`No colony on ${network.name} with the given address`);\n          setLoading(false);\n          return;\n        }\n        const options = {\n          method: 'PUT',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ address, network: network.slug }),\n        };\n        // eslint-disable-next-line no-undef\n        fetch(\n          `${server}/api/user/colonies?sessionID=${user.session.id}`,\n          options,\n        )\n          .then(response => response.json())\n          .then(data => {\n            if (data.error) {\n              setError(data.error);\n              setLoading(false);\n            } else {\n              setUser({ ...user, colonies: data.colonies });\n              setAddColony(false);\n              setLoading(false);\n            }\n          })\n          .catch(fetchError => {\n            setError(fetchError.message);\n            setLoading(false);\n          });\n      } else {\n        setError('The address you provided is not a valid address');\n      }\n    } else {\n      setError('Unable to initialize ColonyNetworkClient');\n    }\n  };\n\n  const handleKeyDown = event => {\n    if (event.key === 'Enter') {\n      handleAddColony();\n    }\n  };\n\n  return (\n    <div className={styles.field}>\n      <Input\n        appearance={{\n          padding: 'huge',\n          size: 'stretch',\n        }}\n        error={error}\n        id=\"address\"\n        label={MSG.labelAddress}\n        onChange={handleChangeAddress}\n        onKeyDown={handleKeyDown}\n        type=\"text\"\n        value={address}\n      />\n      <Button\n        appearance={{\n          padding: 'large',\n          theme: 'primary',\n          size: 'large',\n        }}\n        disabled={!address}\n        loading={loading}\n        onClick={handleAddColony}\n        text={MSG.submitAddress}\n        type=\"submit\"\n      />\n      {error && <ErrorMessage error={error} />}\n    </div>\n  );\n};\n\nAddColony.displayName = displayName;\n\nexport default AddColony;\n","/* @flow */\n\nimport type { ColonyNetworkClient } from '@colony/colony-js-client';\nimport type { WalletObjectType } from '@colony/purser-core';\n\nimport React, { useEffect, useState } from 'react';\nimport { defineMessages, FormattedMessage } from 'react-intl';\n\nimport type { Colony, Network, User } from '~types';\n\nimport {\n  getStore,\n  setStore,\n} from '~layouts/DeveloperPortalLayout/localStorage';\n\nimport Button from '~core/Button';\nimport Copy from '~core/Copy';\nimport ErrorMessage from '~core/ErrorMessage';\nimport Link from '~core/Link';\nimport SpinnerLoader from '~core/SpinnerLoader';\n\nimport { DOCS_COLONY_JS_REGISTERING_ENS_LABELS } from '~routes';\n\nimport styles from './ColonyItem.module.css';\n\nconst MSG = defineMessages({\n  colonyAddress: {\n    id: 'pages.Dashboard.Colonies.ColonyItem.colonyAddress',\n    defaultMessage: 'Colony Address',\n  },\n  colonyLabel: {\n    id: 'pages.Dashboard.Colonies.ColonyItem.colonyLabel',\n    defaultMessage: 'ENS Label',\n  },\n  colonyTokenAddress: {\n    id: 'pages.Dashboard.Colonies.ColonyItem.colonyTokenAddress',\n    defaultMessage: 'Colony Token Address',\n  },\n  linkColonyLabel: {\n    id: 'pages.Dashboard.Colonies.ColonyItem.linkColonyLabel',\n    defaultMessage: 'Register',\n  },\n  network: {\n    id: 'pages.Dashboard.Colonies.ColonyItem.network',\n    defaultMessage: 'Network',\n  },\n  removeColony: {\n    id: 'pages.Dashboard.Colonies.ColonyItem.removeColony',\n    defaultMessage: 'Remove',\n  },\n  removeColonyCancel: {\n    id: 'pages.Dashboard.Colonies.ColonyItem.removeColonyCancel',\n    defaultMessage: 'Cancel',\n  },\n  removeColonyConfirm: {\n    id: 'pages.Dashboard.Colonies.ColonyItem.removeColonyConfirm',\n    defaultMessage: 'Are you sure you want to remove this colony?',\n  },\n});\n\ntype Props = {|\n  colonyAddress: string,\n  network: Network,\n  networkClient: ?ColonyNetworkClient,\n  setUser: (user: User) => void,\n  user: User,\n  wallet: WalletObjectType,\n|};\n\nconst displayName = 'pages.Dashboard.Colonies.ColonyItem';\n\nconst server = process.env.SERVER_URL || 'https://chora.io';\n\nconst ColonyItem = ({\n  colonyAddress,\n  network,\n  networkClient,\n  setUser,\n  user,\n  wallet,\n}: Props) => {\n  const [actions, setActions] = useState<boolean>(false);\n  const [colony, setColony] = useState<?Colony>(null);\n  const [error, setError] = useState<?string>(null);\n  const [loadedLocal, setLoadedLocal] = useState<boolean>(false);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [removeColony, setRemoveColony] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (!loadedLocal) {\n      const localColony = getStore(colonyAddress);\n      setColony(localColony);\n      setLoadedLocal(true);\n    }\n  }, [colonyAddress, loadedLocal]);\n\n  useEffect(() => setStore(colonyAddress, colony), [colony, colonyAddress]);\n\n  useEffect(() => {\n    if (networkClient) {\n      (async () => {\n        const {\n          domain: colonyLabel,\n        } = await networkClient.lookupRegisteredENSDomain.call({\n          ensAddress: colonyAddress,\n        });\n        const colonyClient = await networkClient.getColonyClientByAddress(\n          colonyAddress,\n        );\n        const {\n          address: tokenAddress,\n        } = await colonyClient.getTokenAddress.call();\n        setColony({\n          colonyAddress,\n          colonyLabel,\n          tokenAddress,\n        });\n      })();\n    }\n  }, [colonyAddress, networkClient, wallet.address]);\n\n  const handleHideActions = async () => {\n    if (!removeColony) {\n      setActions(false);\n    }\n  };\n\n  const handleShowActions = async () => {\n    setActions(true);\n  };\n\n  const handleCancelRemove = async () => {\n    setError(null);\n    setRemoveColony(false);\n  };\n\n  const handleRemoveColony = async () => {\n    setError(null);\n    setLoading(true);\n    const options = {\n      method: 'DELETE',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ address: colonyAddress, network: network.slug }),\n    };\n    // eslint-disable-next-line no-undef\n    fetch(`${server}/api/user/colonies?sessionID=${user.session.id}`, options)\n      .then(response => response.json())\n      .then(data => {\n        if (data.error) {\n          setError(data.error);\n          setLoading(false);\n        } else {\n          setRemoveColony(false);\n          setLoading(false);\n          setUser({ ...user, colonies: data.colonies });\n        }\n      })\n      .catch(fetchError => {\n        setError(fetchError.message);\n        setLoading(false);\n      });\n  };\n\n  return (\n    <div\n      className={error ? styles.colonyError : styles.colony}\n      onMouseEnter={handleShowActions}\n      onMouseLeave={handleHideActions}\n    >\n      {colony ? (\n        <>\n          <div className={styles.colonyContent}>\n            <div>\n              <div className={styles.field}>\n                <div className={styles.label}>\n                  <FormattedMessage {...MSG.colonyAddress} />\n                </div>\n                <div className={styles.value}>\n                  {colony.colonyAddress}\n                  <Copy copyTarget={colony.colonyAddress} />\n                </div>\n              </div>\n              <div className={styles.field}>\n                <div className={styles.label}>\n                  <FormattedMessage {...MSG.colonyTokenAddress} />\n                </div>\n                <div className={styles.value}>\n                  {colony.tokenAddress}\n                  <Copy copyTarget={colony.tokenAddress} />\n                </div>\n              </div>\n            </div>\n            <div>\n              <div className={styles.field}>\n                <div className={styles.label}>\n                  <FormattedMessage {...MSG.colonyLabel} />\n                </div>\n                <div className={styles.value}>\n                  {colony.colonyLabel ? (\n                    colony.colonyLabel.split('.')[0]\n                  ) : (\n                    <Link\n                      arrow=\"right\"\n                      href={DOCS_COLONY_JS_REGISTERING_ENS_LABELS}\n                      text={MSG.linkColonyLabel}\n                    />\n                  )}\n                </div>\n              </div>\n              <div className={styles.field}>\n                <div className={styles.label}>\n                  <FormattedMessage {...MSG.network} />\n                </div>\n                <div className={styles.value}>{network.slug}</div>\n              </div>\n            </div>\n          </div>\n          {actions && (\n            <div className={styles.removeColony}>\n              {removeColony ? (\n                <>\n                  {loading ? (\n                    <SpinnerLoader appearance={{ theme: 'primary' }} />\n                  ) : (\n                    <>\n                      <span>\n                        <FormattedMessage {...MSG.removeColonyConfirm} />\n                      </span>\n                      <Button\n                        appearance={{ theme: 'reset' }}\n                        onClick={handleRemoveColony}\n                        text={MSG.removeColony}\n                        type=\"submit\"\n                      />\n                      <Button\n                        appearance={{ theme: 'reset' }}\n                        onClick={handleCancelRemove}\n                        text={MSG.removeColonyCancel}\n                        type=\"submit\"\n                      />\n                    </>\n                  )}\n                </>\n              ) : (\n                <Button\n                  appearance={{ theme: 'reset' }}\n                  onClick={() => setRemoveColony(true)}\n                  text={MSG.removeColony}\n                  type=\"submit\"\n                />\n              )}\n              {error && <ErrorMessage error={error} />}\n            </div>\n          )}\n        </>\n      ) : (\n        <div className={styles.loader}>\n          <SpinnerLoader appearance={{ theme: 'primary' }} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nColonyItem.displayName = displayName;\n\nexport default ColonyItem;\n","/* @flow */\n\nimport type { ColonyNetworkClient } from '@colony/colony-js-client';\nimport type { WalletObjectType } from '@colony/purser-core';\n\nimport React, { useState } from 'react';\nimport { defineMessages, FormattedMessage } from 'react-intl';\n\nimport type { Network, User } from '~types';\n\nimport { supportedNetwork } from '~layouts/DeveloperPortalLayout/helpers';\n\nimport Button from '~core/Button';\nimport Image from '~core/Image';\nimport Link from '~core/Link';\n\nimport {\n  DOCS_COLONY_JS_GET_STARTED,\n  DOCS_COLONY_JS_TASKS_AND_PAYMENTS,\n  DOCS_COLONY_JS_TOKENS_AND_FUNDING,\n} from '~routes';\n\nimport AddColony from './AddColony';\nimport ColonyItem from './ColonyItem';\n\nimport styles from './Colonies.module.css';\n\nconst MSG = defineMessages({\n  buttonAddColony: {\n    id: 'pages.Dashboard.Colonies.buttonAddColony',\n    defaultMessage: '+ Add Colony',\n  },\n  buttonCancel: {\n    id: 'pages.Dashboard.Colonies.buttonCancel',\n    defaultMessage: 'Cancel',\n  },\n  mainTitle: {\n    id: 'pages.Dashboard.Colonies.mainTitle',\n    defaultMessage: 'Colonies',\n  },\n  mainDescription: {\n    id: 'pages.Dashboard.Colonies.mainDescription',\n    defaultMessage: `Your personalized list of colonies on {network}. Add\n    colonies that you are developing, collaborating with, or colonies that you\n    would like to follow.`,\n  },\n  emptyTitle: {\n    id: 'pages.Dashboard.Colonies.emptyTitle',\n    defaultMessage: `Add Colony`,\n  },\n  emptyDescription: {\n    id: 'pages.Dashboard.Colonies.emptyDescription',\n    defaultMessage: `It looks like you haven't added any colonies yet! This is\n    your personalized list of colonies on {network}. Add colonies that you are\n    developing, collaborating with, or colonies that you would like to follow.`,\n  },\n  emptyCreateColony: {\n    id: 'pages.Dashboard.Colonies.emptyCreateColony',\n    defaultMessage: 'Create Colony',\n  },\n  emptyCreateColonyDescription: {\n    id: 'pages.Dashboard.Colonies.emptyCreateColonyDescription',\n    defaultMessage: `Create your first colony in {linkGetStarted}.`,\n  },\n  emptyAddColony: {\n    id: 'pages.Dashboard.Colonies.emptyAddColony',\n    defaultMessage: 'Add Colony Address',\n  },\n  emptyAddColonyDescription: {\n    id: 'pages.Dashboard.Colonies.emptyAddColonyDescription',\n    defaultMessage: `Add a colony address to your list of colonies.`,\n  },\n  learnMoreTitle: {\n    id: 'pages.Dashboard.Colonies.learnMoreTitle',\n    defaultMessage: 'Learn More',\n  },\n  linkColonyRoles: {\n    id: 'pages.Dashboard.Colonies.linkColonyRoles',\n    defaultMessage: 'Colony Roles',\n  },\n  linkDomainsAndSkills: {\n    id: 'pages.Dashboard.Colonies.linkDomainsAndSkills',\n    defaultMessage: 'Domains and Skills',\n  },\n  linkGetStarted: {\n    id: 'pages.Dashboard.Colonies.linkGetStarted',\n    defaultMessage: 'Get Started',\n  },\n  linkTasksAndPayments: {\n    id: 'pages.Dashboard.Colonies.linkTasksAndPayments',\n    defaultMessage: 'Tasks and Payments',\n  },\n  linkTokensAndFunding: {\n    id: 'pages.Dashboard.Colonies.linkTokensAndFunding',\n    defaultMessage: 'Tokens and Funding',\n  },\n  unsupportedNetworkTitle: {\n    id: 'pages.Dashboard.Colonies.unsupportedNetworkTitle',\n    defaultMessage: 'Switch Networks',\n  },\n  unsupportedNetworkMessage: {\n    id: 'pages.Dashboard.Colonies.unsupportedNetworkMessage',\n    defaultMessage: `You are on an unsupported network. Use MetaMask to switch\n    to \"Main Ethereum Network\" or \"Goerli Test Network\".`,\n  },\n});\n\ntype Props = {|\n  network: Network,\n  networkClient: ?ColonyNetworkClient,\n  path: string,\n  setUser: (user: User) => void,\n  user: User,\n  wallet: WalletObjectType,\n|};\n\nconst displayName = 'pages.Dashboard.Colonies';\n\nconst Colonies = ({ network, networkClient, setUser, user, wallet }: Props) => {\n  const [addColony, setAddColony] = useState(false);\n  const coloniesExist =\n    user.colonies &&\n    user.colonies[network.slug] &&\n    user.colonies[network.slug].length;\n  if (!supportedNetwork(network)) {\n    return (\n      <div className={styles.networkWrapper}>\n        <div className={styles.main}>\n          <div className={styles.networkContentWrapper}>\n            <div className={styles.networkContent}>\n              <Image\n                alt={MSG.unsupportedNetworkTitle}\n                className={styles.networkImage}\n                src=\"/img/switch_networks.svg\"\n              />\n              <h1 className={styles.title}>\n                <FormattedMessage {...MSG.unsupportedNetworkTitle} />\n              </h1>\n              <p className={styles.subTitle}>\n                <FormattedMessage {...MSG.unsupportedNetworkMessage} />\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  if (!coloniesExist) {\n    return (\n      <div className={styles.wrapper}>\n        <div className={styles.main}>\n          <h1 className={styles.title}>\n            <FormattedMessage {...MSG.emptyTitle} />\n          </h1>\n          <p className={styles.subTitle}>\n            <FormattedMessage\n              values={{ network: network.name }}\n              {...MSG.emptyDescription}\n            />\n          </p>\n          <div className={styles.content}>\n            <div className={styles.emptyItem}>\n              <h4 className={styles.emptyItemTitle}>\n                <FormattedMessage {...MSG.emptyCreateColony} />\n              </h4>\n              <p>\n                <FormattedMessage\n                  values={{\n                    linkGetStarted: (\n                      <Link\n                        href={DOCS_COLONY_JS_GET_STARTED}\n                        text={MSG.linkGetStarted}\n                      />\n                    ),\n                  }}\n                  {...MSG.emptyCreateColonyDescription}\n                />\n              </p>\n            </div>\n            <div className={styles.emptyItem}>\n              <h4 className={styles.emptyItemTitle}>\n                <FormattedMessage {...MSG.emptyAddColony} />\n              </h4>\n              <p>\n                <FormattedMessage\n                  values={{ network: network.name }}\n                  {...MSG.emptyAddColonyDescription}\n                />\n              </p>\n            </div>\n            <AddColony\n              network={network}\n              networkClient={networkClient}\n              setUser={setUser}\n              setAddColony={setAddColony}\n              user={user}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n  return (\n    <div className={styles.wrapper}>\n      <div className={styles.main}>\n        <h1 className={styles.title}>\n          <FormattedMessage {...MSG.mainTitle} />\n        </h1>\n        <p className={styles.subTitle}>\n          <FormattedMessage\n            values={{ network: network.name }}\n            {...MSG.mainDescription}\n          />\n        </p>\n        <div className={styles.content}>\n          <div className={styles.addColonyButton}>\n            {addColony ? (\n              <Button\n                appearance={{\n                  theme: 'reset',\n                  color: 'grey',\n                }}\n                onClick={() => setAddColony(false)}\n                text={MSG.buttonCancel}\n                type=\"submit\"\n              />\n            ) : (\n              <Button\n                appearance={{\n                  theme: 'reset',\n                  color: 'blue',\n                }}\n                onClick={() => setAddColony(true)}\n                text={MSG.buttonAddColony}\n                type=\"submit\"\n              />\n            )}\n          </div>\n          {addColony && (\n            <AddColony\n              network={network}\n              networkClient={networkClient}\n              setUser={setUser}\n              setAddColony={setAddColony}\n              user={user}\n            />\n          )}\n          {user.colonies &&\n            user.colonies[network.slug] &&\n            user.colonies[network.slug].map(colonyAddress => (\n              <ColonyItem\n                key={colonyAddress}\n                colonyAddress={colonyAddress}\n                network={network}\n                networkClient={networkClient}\n                setUser={setUser}\n                user={user}\n                wallet={wallet}\n              />\n            ))}\n        </div>\n      </div>\n      <div className={styles.learnMore}>\n        <h4>\n          <FormattedMessage {...MSG.learnMoreTitle} />\n        </h4>\n        <Link\n          arrow=\"right\"\n          href={DOCS_COLONY_JS_GET_STARTED}\n          text={MSG.linkGetStarted}\n        />\n        <Link\n          arrow=\"right\"\n          href={DOCS_COLONY_JS_TOKENS_AND_FUNDING}\n          text={MSG.linkTokensAndFunding}\n        />\n        <Link\n          arrow=\"right\"\n          href={DOCS_COLONY_JS_TASKS_AND_PAYMENTS}\n          text={MSG.linkTasksAndPayments}\n        />\n      </div>\n    </div>\n  );\n};\n\nColonies.displayName = displayName;\n\nexport default Colonies;\n","/* @flow */\n\nimport type { WalletObjectType } from '@colony/purser-core';\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { defineMessages, FormattedMessage } from 'react-intl';\n\nimport type { Network, User } from '~types';\n\nimport Button from '~core/Button';\nimport ErrorMessage from '~core/ErrorMessage';\nimport Image from '~core/Image';\nimport Link from '~core/Link';\nimport SpinnerLoader from '~core/SpinnerLoader';\n\nimport IssueTableRow from '~parts/IssueTableRow';\n\nimport {\n  getStore,\n  setStore,\n} from '~layouts/DeveloperPortalLayout/localStorage';\n\nimport { PAGE_DEVELOPER_PORTAL_CONTRIBUTE } from '~routes';\n\nimport styles from './Contributions.module.css';\n\nconst MSG = defineMessages({\n  buttonRequestReward: {\n    id: 'pages.Dashboard.Contributions.buttonRequestReward',\n    defaultMessage: '+ Request Reward',\n  },\n  buttonCancel: {\n    id: 'pages.Dashboard.Contributions.buttonCancel',\n    defaultMessage: 'Cancel',\n  },\n  description: {\n    id: 'pages.Dashboard.Contributions.description',\n    defaultMessage: 'A list of your contributions to {joinColonyLink}.',\n  },\n  issuesHeaderDate: {\n    id: 'pages.Contribute.Landing.issuesHeaderDate',\n    defaultMessage: 'Date',\n  },\n  issuesHeaderLink: {\n    id: 'pages.Contribute.Landing.issuesHeaderLink',\n    defaultMessage: 'Link',\n  },\n  issuesHeaderReward: {\n    id: 'pages.Contribute.Landing.issuesHeaderReward',\n    defaultMessage: 'Reward',\n  },\n  issuesHeaderTitle: {\n    id: 'pages.Contribute.Landing.issuesHeaderTitle',\n    defaultMessage: 'Title',\n  },\n  issuesSubtext: {\n    id: 'pages.Contribute.Landing.issuesSubtext',\n    defaultMessage: '* Switch networks to check for other rewards.',\n  },\n  noContributionsLink: {\n    id: 'pages.Dashboard.Contributions.noContributionsLink',\n    defaultMessage: 'start earning tokens and reputation',\n  },\n  noContributionsMessage: {\n    id: 'pages.Dashboard.Contributions.noContributionsMessage',\n    defaultMessage: `It looks like you don't have any past contributions. Make\n    your first contribution and {noContributionsLink}.`,\n  },\n  noContributionsTitle: {\n    id: 'pages.Dashboard.Contributions.noContributionsTitle',\n    defaultMessage: 'Contribute and Earn',\n  },\n  showMore: {\n    id: 'pages.Dashboard.Contributions.showMore',\n    defaultMessage: 'More',\n  },\n  title: {\n    id: 'pages.Dashboard.Contributions.title',\n    defaultMessage: 'Contributions',\n  },\n});\n\ntype Props = {|\n  network: Network,\n  path: string,\n  user: User,\n  wallet: WalletObjectType,\n|};\n\nconst displayName = 'pages.Dashboard.Contributions';\n\nconst Contributions = ({ network, user }: Props) => {\n  const [count, setCount] = useState(10);\n  const [error, setError] = useState(null);\n  const [issues, setIssues] = useState(null);\n  const [loadedLocal, setLoadedLocal] = useState(false);\n  const [loadedRemote, setLoadedRemote] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [loadingMore, setLoadingMore] = useState(false);\n\n  const getIssues = useCallback(() => {\n    setError(null);\n    setLoading(true);\n    const options = {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${process.env.DOCS_GITHUB_TOKEN ||\n          '7c20709be27b1b6fc196e90fbd3878d6d8ff597f'}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        query: `query {\n          search(\n            query: \"org:JoinColony author:${user.github.username}\",\n            type: ISSUE,\n            last: ${count}\n          ) {\n            edges {\n              node {\n                ... on Issue {\n                  url\n                  title\n                  createdAt\n                }\n                ... on PullRequest {\n                  url\n                  title\n                  createdAt\n                }\n              }\n            }\n          }\n        }`,\n      }),\n    };\n    // eslint-disable-next-line no-undef\n    fetch('https://api.github.com/graphql', options)\n      .then(res => res.json())\n      .then(({ data }) => {\n        setIssues(data.search.edges);\n        setLoadedRemote(true);\n        setLoading(false);\n        setLoadingMore(false);\n      })\n      .catch(fetchError => {\n        setError(fetchError.message);\n      });\n  }, [count, user]);\n\n  const handleClickMore = () => {\n    setCount(count + 10);\n    setLoadingMore(true);\n    setLoadedRemote(false);\n  };\n\n  useEffect(() => {\n    if (!loadedLocal) {\n      const localUserIssues = getStore('userIssues');\n      setIssues(localUserIssues);\n      setLoadedLocal(true);\n    }\n  }, [issues, loadedLocal]);\n\n  useEffect(\n    () => setStore('userIssues', issues ? issues.slice(0, 10) : issues),\n    [issues],\n  );\n\n  useEffect(() => {\n    if (!loadedRemote && !loading) {\n      getIssues();\n    }\n  }, [getIssues, loadedRemote, loading]);\n\n  if (!issues && !loading) {\n    return (\n      <div className={styles.noContributions}>\n        <div className={styles.noContributionsWrapper}>\n          <div>\n            <Image\n              alt={MSG.noContributionsTitle}\n              className={styles.noContributionsImage}\n              src=\"/img/no_contributions.svg\"\n            />\n            <h1 className={styles.title}>\n              <FormattedMessage {...MSG.noContributionsTitle} />\n            </h1>\n            <p className={styles.subTitle}>\n              <FormattedMessage\n                values={{\n                  noContributionsLink: (\n                    <Link\n                      href={PAGE_DEVELOPER_PORTAL_CONTRIBUTE}\n                      text={MSG.noContributionsLink}\n                    />\n                  ),\n                }}\n                {...MSG.noContributionsMessage}\n              />\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <div className={styles.main}>\n        <h1 className={styles.title}>\n          <FormattedMessage {...MSG.title} />\n        </h1>\n        <p className={styles.subTitle}>\n          <FormattedMessage\n            values={{\n              joinColonyLink: (\n                <Link href=\"https://github.com/joincolony\" text=\"JoinColony\" />\n              ),\n            }}\n            {...MSG.description}\n          />\n        </p>\n        <div className={styles.content}>\n          <table className={styles.issues}>\n            <thead>\n              <tr>\n                <td>\n                  <FormattedMessage {...MSG.issuesHeaderDate} />\n                </td>\n                <td>\n                  <FormattedMessage {...MSG.issuesHeaderTitle} />\n                </td>\n                <td>\n                  <FormattedMessage {...MSG.issuesHeaderLink} />\n                </td>\n                <td>\n                  <FormattedMessage {...MSG.issuesHeaderReward} />\n                  {network && ' *'}\n                </td>\n              </tr>\n            </thead>\n            <tbody>\n              {issues &&\n                issues.map(issue => (\n                  <IssueTableRow\n                    key={issue.node.url}\n                    issue={issue}\n                    loadedRemote={loadedRemote}\n                    network={network}\n                  />\n                ))}\n            </tbody>\n          </table>\n          {network && (\n            <div className={styles.issuesSubtext}>\n              <FormattedMessage {...MSG.issuesSubtext} />\n            </div>\n          )}\n          <div className={styles.showMore}>\n            {loadingMore && <SpinnerLoader appearance={{ theme: 'primary' }} />}\n            <Button\n              appearance={{\n                theme: 'reset',\n                font: 'small',\n                color: 'blue',\n                weight: 'medium',\n              }}\n              disabled={loadingMore}\n              onClick={handleClickMore}\n              text={MSG.showMore}\n              type=\"submit\"\n            />\n          </div>\n        </div>\n        {error && <ErrorMessage error={error} />}\n      </div>\n    </>\n  );\n};\n\nContributions.displayName = displayName;\n\nexport default Contributions;\n","/* @flow */\n\nimport type {\n  ColonyClient,\n  ColonyNetworkClient,\n} from '@colony/colony-js-client';\nimport type { WalletObjectType } from '@colony/purser-core';\nimport type { IntlShape } from 'react-intl';\n\nimport React from 'react';\nimport { Router } from '@reach/router';\nimport { defineMessages } from 'react-intl';\nimport { Helmet } from 'react-helmet';\n\nimport SEO from '~parts/SEO';\n\nimport {\n  PAGE_DEVELOPER_PORTAL_DASHBOARD,\n  PAGE_DEVELOPER_PORTAL_DASHBOARD_ACCOUNT,\n  PAGE_DEVELOPER_PORTAL_DASHBOARD_ADMIN,\n  PAGE_DEVELOPER_PORTAL_DASHBOARD_COLONIES,\n  PAGE_DEVELOPER_PORTAL_DASHBOARD_CONTRIBUTIONS,\n} from '~routes';\n\nimport type { Network, Provider, User } from '~types';\n\nimport SpinnerLoader from '~core/SpinnerLoader';\n\nimport Login from './Login';\nimport Sidebar from './Sidebar';\n\nimport Account from './Account';\nimport Admin from './Admin';\nimport Colonies from './Colonies';\nimport Contributions from './Contributions';\n\nimport styles from './Dashboard.module.css';\n\nconst MSG = defineMessages({\n  pageDescription: {\n    id: 'pages.Dashboard.pageDescription',\n    defaultMessage: `A dashboard for developers building with Colony. Manage\n    your developer account, add and remove colonies from your watchlist, and\n    earn reputation and tokens for contributing to our open source projects.`,\n  },\n  pageTitle: {\n    id: 'pages.Dashboard.pageTitle',\n    defaultMessage: 'Developer Dashboard',\n  },\n});\n\ntype Props = {|\n  authenticate: (provider: Provider) => void,\n  colonyClient: ?ColonyClient,\n  disconnect: (provider: Provider) => void,\n  intl: IntlShape,\n  network: ?Network,\n  networkClient: ?ColonyNetworkClient,\n  page: string,\n  serverError?: string,\n  setUser: (user: ?User) => void,\n  user: ?User,\n  wallet: ?WalletObjectType,\n|};\n\nconst displayName = 'pages.Dashboard';\n\nconst Dashboard = ({\n  authenticate,\n  colonyClient,\n  disconnect,\n  intl: { formatMessage },\n  network,\n  networkClient,\n  page,\n  serverError,\n  setUser,\n  user,\n  wallet,\n}: Props) => {\n  const title = formatMessage(MSG.pageTitle);\n  if (typeof window !== 'undefined' && page === 'close') {\n    window.close();\n  }\n  if (!wallet && !user) {\n    return <div style={{ height: '100vh' }} />;\n  }\n  if (wallet && !user) {\n    return (\n      <Login\n        authenticate={authenticate}\n        serverError={serverError}\n        wallet={wallet}\n      />\n    );\n  }\n  return (\n    <>\n      <SEO description={MSG.pageDescription} title={title} />\n      {/*\n        Helmet title must be a prop to work with react hooks.\n        See https://github.com/nfl/react-helmet/issues/437\n      */}\n      <Helmet title={title} />\n      <main className={styles.main}>\n        {user && (\n          <>\n            <div className={styles.sidebar}>\n              <Sidebar\n                active={page || 'account'}\n                network={network}\n                user={user}\n              />\n            </div>\n            {network && wallet ? (\n              <div className={styles.content}>\n                <Router primary={false}>\n                  <Admin\n                    path={PAGE_DEVELOPER_PORTAL_DASHBOARD_ADMIN}\n                    colonyClient={colonyClient}\n                    network={network}\n                    user={user}\n                  />\n                  <Account\n                    path={\n                      page\n                        ? PAGE_DEVELOPER_PORTAL_DASHBOARD_ACCOUNT\n                        : PAGE_DEVELOPER_PORTAL_DASHBOARD\n                    }\n                    authenticate={authenticate}\n                    colonyClient={colonyClient}\n                    disconnect={disconnect}\n                    network={network}\n                    serverError={serverError}\n                    setUser={setUser}\n                    user={user}\n                    wallet={wallet}\n                  />\n                  <Colonies\n                    path={PAGE_DEVELOPER_PORTAL_DASHBOARD_COLONIES}\n                    network={network}\n                    networkClient={networkClient}\n                    setUser={setUser}\n                    user={user}\n                    wallet={wallet}\n                  />\n                  <Contributions\n                    path={PAGE_DEVELOPER_PORTAL_DASHBOARD_CONTRIBUTIONS}\n                    network={network}\n                    user={user}\n                    wallet={wallet}\n                  />\n                </Router>\n              </div>\n            ) : (\n              <div className={styles.loading}>\n                <SpinnerLoader\n                  appearance={{ theme: 'primary', size: 'huge' }}\n                />\n              </div>\n            )}\n          </>\n        )}\n      </main>\n    </>\n  );\n};\n\nDashboard.displayName = displayName;\n\nexport default Dashboard;\n","/* @flow */\n\nimport { compose, nest } from 'recompose';\nimport { injectIntl } from 'react-intl';\n\nimport DeveloperPortalLayout from '~layouts/DeveloperPortalLayout';\n\nimport Dashboard from './Dashboard.jsx';\n\nconst enhance = compose(injectIntl);\n\nexport default nest<{}>(DeveloperPortalLayout, enhance(Dashboard));\n","/* @flow */\n\nexport { default } from './Dashboard';\n"],"sourceRoot":""}