{"version":3,"sources":["webpack:///./src/pages/dashboard/account.js","webpack:///./src/modules/core/components/ErrorMessage/ErrorMessage.jsx","webpack:///./src/modules/core/components/ErrorMessage/index.js","webpack:///./src/modules/core/components/Input/Input.jsx","webpack:///./src/modules/core/components/Input/index.js","webpack:///./src/modules/core/components/FormattedToken/FormattedToken.jsx","webpack:///./src/modules/core/components/FormattedToken/index.js","webpack:///./src/modules/parts/components/SEO/SEO.jsx","webpack:///./src/modules/parts/components/SEO/SEO.js","webpack:///./src/hoc/files/index.js","webpack:///./src/modules/parts/components/SEO/index.js","webpack:///./src/modules/layouts/components/DeveloperPortalLayout/ipfs.js","webpack:///./src/modules/parts/components/IssueTableRow/IssueTableRow.jsx","webpack:///./src/modules/parts/components/IssueTableRow/index.js","webpack:///./node_modules/copy-to-clipboard/index.js","webpack:///./node_modules/toggle-selection/index.js","webpack:///./src/modules/pages/components/Dashboard/Login/Login.jsx","webpack:///./src/modules/pages/components/Dashboard/Sidebar/Sidebar.jsx","webpack:///./src/modules/core/components/Copy/Copy.jsx","webpack:///./src/modules/pages/components/Dashboard/Account/Address/Address.jsx","webpack:///./src/modules/pages/components/Dashboard/Account/DeleteAccount/DeleteAccount.jsx","webpack:///./src/modules/pages/components/Dashboard/Account/Discourse/Discourse.jsx","webpack:///./src/modules/pages/components/Dashboard/Account/Email/Email.jsx","webpack:///./src/modules/pages/components/Dashboard/Account/Name/Name.jsx","webpack:///./src/modules/pages/components/Dashboard/Account/Statistics/Statistics.jsx","webpack:///./src/modules/pages/components/Dashboard/Account/Account.jsx","webpack:///./src/modules/pages/components/Dashboard/Admin/AddAdmin/AddAdmin.jsx","webpack:///./src/modules/pages/components/Dashboard/Admin/AddPayment/AddPayment.jsx","webpack:///./src/modules/pages/components/Dashboard/Admin/AddTask/AddTask.jsx","webpack:///./src/modules/pages/components/Dashboard/Admin/Admin.jsx","webpack:///./src/modules/pages/components/Dashboard/Colonies/AddColony/AddColony.jsx","webpack:///./src/modules/pages/components/Dashboard/Colonies/ColonyItem/ColonyItem.jsx","webpack:///./src/modules/pages/components/Dashboard/Colonies/Colonies.jsx","webpack:///./src/modules/pages/components/Dashboard/Contributions/Contributions.jsx","webpack:///./src/modules/pages/components/Dashboard/Dashboard.jsx","webpack:///./src/modules/pages/components/Dashboard/Dashboard.js","webpack:///./src/modules/pages/components/Dashboard/index.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","_pages_Dashboard__WEBPACK_IMPORTED_MODULE_1__","Account","createElement","Dashboard","page","MSG","defineMessages","defaultError","id","defaultMessage","ErrorMessage","_ref","appearance","className","error","rest","objectWithoutPropertiesLoose_default","classNames","getMainClasses","styles","react_default","a","Object","assign","errorDot","Error","toString","index_es","displayName","injectIntl","d","components_ErrorMessage_ErrorMessage","Input","formatMessage","intl","label","labelValues","_ref$type","type","labelText","htmlFor","style","borderColor","components_Input_Input","amount","symbol","FormattedToken","decimals","loading","maximumFractionDigits","minimumFractionDigits","formattedAmount","Math","pow","tokenFormat","SpinnerLoader","theme","values","value","components_FormattedToken_FormattedToken","siteName","SEO","baseUrl","descriptionContent","description","descriptionValues","getAbsoluteImagePath","isDocPage","location","siteLogo","titleContent","title","titleValues","_ref$images","images","absolutePath","withPrefix","pathname","imagePaths","map","indexOf","push","ogType","schemaOrgJSONLD","@context","@type","url","name","itemListElement","position","item","@id","image","author","headline","Helmet_default","content","imagePath","key","JSON","stringify","itemProp","property","enhance","compose","BaseComponent","fromRenderProps","FileContext","Consumer","files","withLocation","defaultProps","withProps","withHandlers","project","startsWith","_ref2","parts_components_SEO_SEO","node","IPFS","require","Buffer","waitForIPFS","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","start","abrupt","Promise","resolve","reject","on","err","stop","this","apply","arguments","exports","init","_callee2","_context2","saveHash","_ref3","_callee3","data","result","_context3","from","add","sent","hash","_x","getHash","_ref4","_callee4","buf","_context4","cat","parse","t0","_x2","none","IssueTableRow","issue","loadedRemote","network","_useState","useState","contribution","setContribution","_useState2","setError","_useState3","loadedLocal","setLoadedLocal","_useState4","setLoading","getContribution","useCallback","asyncToGenerator_default","regenerator_default","options","method","headers","Content-Type","fetch","server","then","res","json","catch","fetchError","useEffect","localContribution","getStore","setStore","createdAt","length","substring","concat","Link","href","text","split","typeId","payout","components_IssueTableRow_IssueTableRow","deselectCurrent","module","debug","message","reselectPrevious","range","selection","success","document","createRange","getSelection","textContent","all","top","clip","whiteSpace","webkitUserSelect","MozUserSelect","msUserSelect","userSelect","addEventListener","e","stopPropagation","format","preventDefault","clipboardData","clearData","setData","body","appendChild","selectNodeContents","addRange","execCommand","console","warn","window","copyKey","test","navigator","userAgent","replace","prompt","removeRange","removeAllRanges","removeChild","rangeCount","active","activeElement","ranges","i","getRangeAt","tagName","toUpperCase","blur","forEach","focus","connectGitHubMessage","connectGitHubInputLabel","connectGitHubButton","connectGitHubGitHubMessage","Login","authenticate","serverError","wallet","main","field","disabled","padding","size","address","Button","color","onClick","accountLink","adminLink","coloniesLink","contributionsLink","Sidebar","user","linkActive","link","admin","slug","copy","copied","Copy","copyTarget","setCopied","copiedTimeout","useRef","handleCopy","current","setTimeout","clearTimeout","Image","alt","src","primaryAddress","primaryAddressWarning","updateAddress","Address","setUser","components_Copy_Copy","addresses","session","loader","deleteAccount","deleteAccountConfirm","deleteAccountCancel","deleteAccountDelete","DeleteAccount","disconnect","confirmDelete","setConfirmDelete","Fragment","font","weight","response","connectedAccountsConnect","connectedAccountsDiscourseLabel","connectedAccountsRemove","Discourse","display","discourse","undefined","username","margin","emailAdd","emailCancel","emailEdit","emailLabel","emailSave","Email","initialEmail","email","edit","setEdit","setEmail","input","setInput","_useState5","handleSaveEmail","onChange","event","currentTarget","onKeyDown","nameCancel","nameEdit","nameSave","Name","initialName","setName","handleSaveName","marginRight","marginTop","statisticsSwitchNetwork","Statistics","colonyClient","loaded","setLoaded","statistics","setStatistics","getStatistics","balance","skillId","_ref5","reputationAmount","tokenClient","getBalanceOf","call","sourceAddress","getDomain","domainId","getReputation","reputation","localStatistics","supportedNetwork","statistic","displayStatistics","connectedAccountsTitle","connectedAccountsDescription","connectedAccountsGitHubLabel","logout","header","photo","github","Account_Name_Name","Account_Address_Address","Account_Statistics_Statistics","contentColumn","contentTitle","Account_Discourse_Discourse","Account_Email_Email","accountButtons","Account_DeleteAccount_DeleteAccount","buttonAddAdmin","labelAddress","labelUsername","AddAdmin","setAddress","setSuccess","setUsername","handleAddAdmin","setRootRole","send","setTo","buttonAddPayment","contributionLink","labelAmount","labelIssue","labelPullRequest","labelRecipient","labelSkillId","AddPayment","setAmount","setIssue","pullRequest","setPullRequest","_useState6","recipient","setRecipient","_useState7","setSkillId","_useState8","handleAddPayment","addPaymentResponse","paymentId","addPayment","token","contract","BN","Number","eventData","networkId","handleChangeAmount","handleChangeIssue","handleChangePullRequest","handleChangeRecipient","handleChangeSkillId","handleChangeUsername","buttonAddTask","labelDueDate","AddTask","dueDate","setDueDate","handleAddTask","specificationHash","addTaskResponse","taskId","ipfs","addTask","Date","setAllTaskPayouts","managerAmount","evaluatorAmount","workerAmount","handleChangeDueDate","unauthorized","Admin","visible","setVisible","menu","Admin_AddAdmin_AddAdmin","Admin_AddPayment_AddPayment","Admin_AddTask_AddTask","submitAddress","AddColony","networkClient","setAddColony","handleAddColony","isAddress","isColony","colony","colonies","colonyAddress","colonyLabel","colonyTokenAddress","linkColonyLabel","removeColony","removeColonyCancel","removeColonyConfirm","ColonyItem","actions","setActions","setColony","setRemoveColony","localColony","tokenAddress","lookupRegisteredENSDomain","ensAddress","domain","getColonyClientByAddress","getTokenAddress","handleHideActions","handleShowActions","_ref6","handleCancelRemove","_ref7","handleRemoveColony","_ref8","_callee5","_context5","colonyError","onMouseEnter","onMouseLeave","colonyContent","arrow","DOCS_COLONY_JS_REGISTERING_ENS_LABELS","buttonAddColony","buttonCancel","mainTitle","mainDescription","emptyTitle","emptyDescription","emptyCreateColony","emptyCreateColonyDescription","emptyAddColony","emptyAddColonyDescription","learnMoreTitle","linkColonyRoles","linkDomainsAndSkills","linkGetStarted","linkTasksAndPayments","linkTokensAndFunding","unsupportedNetworkTitle","unsupportedNetworkMessage","Colonies","addColony","coloniesExist","wrapper","subTitle","addColonyButton","Colonies_AddColony_AddColony","Colonies_ColonyItem_ColonyItem","learnMore","DOCS_COLONY_JS_GET_STARTED","DOCS_COLONY_JS_TOKENS_AND_FUNDING","DOCS_COLONY_JS_TASKS_AND_PAYMENTS","emptyItem","emptyItemTitle","networkWrapper","networkContentWrapper","networkContent","networkImage","buttonRequestReward","issuesHeaderDate","issuesHeaderLink","issuesHeaderReward","issuesHeaderTitle","issuesSubtext","noContributionsLink","noContributionsMessage","noContributionsTitle","showMore","Contributions","count","setCount","issues","setIssues","setLoadedRemote","loadingMore","setLoadingMore","getIssues","Authorization","query","search","edges","localUserIssues","slice","joinColonyLink","noContributions","noContributionsWrapper","noContributionsImage","PAGE_DEVELOPER_PORTAL_CONTRIBUTE","pageDescription","pageTitle","close","Dashboard_Login_Login","Helmet","sidebar","Dashboard_Sidebar_Sidebar","es","primary","Dashboard_Colonies_Colonies","path","PAGE_DEVELOPER_PORTAL_DASHBOARD_COLONIES","PAGE_DEVELOPER_PORTAL_DASHBOARD","Dashboard_Contributions_Contributions","PAGE_DEVELOPER_PORTAL_DASHBOARD_CONTRIBUTIONS","Dashboard_Account_Account","PAGE_DEVELOPER_PORTAL_DASHBOARD_ACCOUNT","Dashboard_Admin_Admin","PAGE_DEVELOPER_PORTAL_DASHBOARD_ADMIN","height","nest","DeveloperPortalLayout","pages_components_Dashboard_Dashboard"],"mappings":"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","file":"component---src-pages-dashboard-account-js-4c552e5a38f994295dd6.js","sourcesContent":["/* @flow */\n\nimport { createElement } from 'react';\n\nimport Dashboard from '~pages/Dashboard';\n\nconst Account = () => createElement(Dashboard, { page: 'account' });\n\nexport default Account;\n","/* @flow */\n\nimport type { IntlShape, MessageDescriptor } from 'react-intl';\n\nimport React from 'react';\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\n\nimport { getMainClasses } from '~utils/css';\n\nimport styles from './ErrorMessage.module.css';\n\nconst MSG = defineMessages({\n  defaultError: {\n    id: 'core.ErrorMessage.defaultError',\n    defaultMessage: 'An error occured',\n  },\n});\n\ntype Appearance = {|\n  color?: 'pink',\n|};\n\ntype Props = {|\n  /** Appearance object */\n  appearance?: Appearance,\n  /** Setting this will add className styles to the `appearance` object */\n  className?: string,\n  /** Error message */\n  error: Error | MessageDescriptor | string,\n  /** Injected by `injectIntl` */\n  intl: IntlShape,\n|};\n\nconst displayName = 'ErrorMessage';\n\nconst ErrorMessage = ({ appearance, className, error, ...rest }: Props) => {\n  const classNames = className\n    ? `${getMainClasses(appearance, styles)} ${className}`\n    : getMainClasses(appearance, styles);\n  const printMessage = () => {\n    if (error instanceof Error) {\n      return error.toString();\n    }\n    if (typeof error === 'object') {\n      return <FormattedMessage {...error} />;\n    }\n    if (typeof error === 'string') {\n      return error;\n    }\n    return <FormattedMessage {...MSG.defaultError} />;\n  };\n  return (\n    <div className={classNames} {...rest}>\n      <div className={styles.errorDot} />\n      <div>{printMessage()}</div>\n    </div>\n  );\n};\n\nErrorMessage.displayName = displayName;\n\nexport default injectIntl(ErrorMessage);\n","/* @flow */\n\nexport { default } from './ErrorMessage.jsx';\n","/* @flow */\n\nimport type { IntlShape, MessageDescriptor } from 'react-intl';\n\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\n\nimport { getMainClasses } from '~utils/css';\n\nimport styles from './Input.module.css';\n\ntype Appearance = {|\n  display?: 'none',\n  label?: 'light',\n  padding?: 'small' | 'large' | 'huge',\n  size?: 'large' | 'stretch',\n|};\n\ntype Props = {\n  /** Appearance object */\n  appearance?: Appearance,\n  /** Setting this will add className styles to the `appearance` object */\n  className?: string,\n  /** Outline in red if error */\n  error?: ?string,\n  /** Injected by `injectIntl` */\n  intl: IntlShape,\n  /** ID required to connect label and input */\n  id: string,\n  /** A string or a `messageDescriptor` that make up the input's label */\n  label?: MessageDescriptor | string,\n  /** Values for loading label (react-intl interpolation) */\n  labelValues?: Object,\n  /** Input html type attribute */\n  type?: 'date' | 'number' | 'text',\n};\n\nconst displayName = 'Input';\n\nconst Input = ({\n  appearance,\n  className,\n  error,\n  id,\n  intl: { formatMessage },\n  label,\n  labelValues,\n  type = 'text',\n  ...rest\n}: Props) => {\n  const classNames = className\n    ? `${getMainClasses(appearance, styles)} ${className}`\n    : getMainClasses(appearance, styles);\n  const labelText =\n    typeof label === 'string'\n      ? label\n      : label && formatMessage(label, labelValues);\n  return (\n    <label htmlFor={id} className={classNames}>\n      <span>{labelText}</span>\n      <input\n        id={id}\n        style={error ? { borderColor: '#F5416E' } : null}\n        type={type}\n        {...rest}\n      />\n    </label>\n  );\n};\n\nInput.displayName = displayName;\n\nexport default injectIntl(Input);\n","/* @flow */\n\nexport { default } from './Input.jsx';\n","/* @flow */\n\nimport type { IntlShape } from 'react-intl';\n\nimport React from 'react';\nimport {\n  defineMessages,\n  FormattedMessage,\n  FormattedNumber,\n  injectIntl,\n} from 'react-intl';\n\nimport { getMainClasses } from '~utils/css';\n\nimport SpinnerLoader from '~core/SpinnerLoader';\n\nimport styles from './FormattedToken.module.css';\n\nconst MSG = defineMessages({\n  amount: {\n    id: 'parts.FormattedToken.amount',\n    defaultMessage: '{amount}',\n  },\n  symbol: {\n    id: 'parts.FormattedToken.symbol',\n    defaultMessage: ' {symbol}',\n  },\n});\n\ntype Appearance = {|\n  theme?: 'statistics',\n|};\n\ntype Props = {|\n  /** Appearance object */\n  appearance?: Appearance,\n  /** Token amount */\n  amount: number,\n  /** Setting this will add className styles to the `appearance` object */\n  className?: string,\n  /** Token amount */\n  decimals?: number,\n  /** Injected by `injectIntl` */\n  intl: IntlShape,\n  /** Replace amount with loading indicator when loading */\n  loading?: boolean,\n  /** Maximum number of fraction digits */\n  maximumFractionDigits?: number,\n  /** Minimum number of fraction digits */\n  minimumFractionDigits?: number,\n  /** Token symbol */\n  symbol: string,\n|};\n\nconst displayName = 'FormattedToken';\n\nconst FormattedToken = ({\n  amount,\n  appearance,\n  className,\n  decimals,\n  loading,\n  maximumFractionDigits,\n  minimumFractionDigits,\n  symbol,\n}: Props) => {\n  const classNames = className\n    ? `${getMainClasses(appearance, styles)} ${className}`\n    : getMainClasses(appearance, styles);\n  const formattedAmount = amount / 10 ** (decimals || 18);\n  const tokenFormat = {\n    id: symbol,\n    maximumFractionDigits: maximumFractionDigits || 4,\n    minimumFractionDigits: minimumFractionDigits || 0,\n  };\n  return (\n    <div className={classNames}>\n      {loading ? (\n        <SpinnerLoader appearance={{ theme: 'primary' }} />\n      ) : (\n        <FormattedMessage\n          {...MSG.amount}\n          values={{\n            amount: (\n              <FormattedNumber {...tokenFormat} value={formattedAmount} />\n            ),\n          }}\n        />\n      )}\n      <FormattedMessage {...MSG.symbol} values={{ symbol }} />\n    </div>\n  );\n};\n\nFormattedToken.displayName = displayName;\n\nexport default injectIntl(FormattedToken);\n","/* @flow */\n\nexport { default } from './FormattedToken.jsx';\n","/* @flow */\n\nimport React from 'react';\nimport { defineMessages } from 'react-intl';\nimport Helmet from 'react-helmet';\nimport { withPrefix } from 'gatsby';\n\nimport type { OutProps as Props } from './types';\n\nconst MSG = defineMessages({\n  siteName: {\n    id: 'parts.SEO.siteName',\n    defaultMessage: 'Colony Open Source Docs',\n  },\n});\n\nconst displayName = 'parts.SEO';\n\nconst SEO = ({\n  baseUrl,\n  description: descriptionContent,\n  descriptionValues,\n  getAbsoluteImagePath,\n  intl: { formatMessage },\n  isDocPage,\n  location,\n  siteLogo,\n  title: titleContent,\n  titleValues,\n  images = [siteLogo],\n}: Props) => {\n  const absolutePath = location && `${baseUrl}${withPrefix(location.pathname)}`;\n  const imagePaths = images.map(getAbsoluteImagePath);\n  if (imagePaths.indexOf(siteLogo) < 0) imagePaths.push(siteLogo);\n  const ogType = location && location.pathname === '/' ? 'website' : 'article';\n  const siteName = formatMessage(MSG.siteName);\n  const title =\n    typeof titleContent === 'string'\n      ? titleContent\n      : formatMessage(titleContent, titleValues);\n  const description =\n    typeof descriptionContent === 'string'\n      ? descriptionContent\n      : formatMessage(descriptionContent, descriptionValues);\n\n  const schemaOrgJSONLD = [\n    {\n      '@context': 'http://schema.org',\n      '@type': 'WebSite',\n      url: baseUrl,\n      name: siteName,\n    },\n  ];\n\n  if (isDocPage) {\n    schemaOrgJSONLD.push(\n      {\n        '@context': 'http://schema.org',\n        '@type': 'BreadcrumbList',\n        itemListElement: [\n          {\n            '@type': 'ListItem',\n            position: 1,\n            item: {\n              '@id': absolutePath,\n              name: title,\n              image: imagePaths[0],\n            },\n          },\n        ],\n      },\n      {\n        '@context': 'http://schema.org',\n        '@type': 'BlogPosting',\n        author: 'Colony',\n        url: absolutePath,\n        name: title,\n        headline: title,\n        image: {\n          '@type': 'ImageObject',\n          url: imagePaths[0],\n        },\n        description,\n      },\n    );\n  }\n\n  return (\n    <Helmet>\n      {/* General tags */}\n      <meta name=\"description\" content={description} />\n      {imagePaths.map(imagePath => (\n        <meta name=\"image\" content={imagePath} key={imagePath} />\n      ))}\n\n      {/* Schema.org tags */}\n      <script type=\"application/ld+json\">\n        {JSON.stringify(schemaOrgJSONLD)}\n      </script>\n\n      {/* Google+ tags */}\n      <meta itemProp=\"name\" content={title} />\n      <meta itemProp=\"description\" content={description} />\n      {imagePaths.map(imagePath => (\n        <meta itemProp=\"image\" content={imagePath} key={imagePath} />\n      ))}\n\n      {/* OpenGraph tags */}\n      <meta property=\"og:url\" content={absolutePath} />\n      <meta property=\"og:type\" content={ogType} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={description} />\n      <meta property=\"og:site_name\" content={siteName} />\n      {imagePaths.map(imagePath => (\n        <meta property=\"og:image\" content={imagePath} key={imagePath} />\n      ))}\n\n      {/* Twitter Card tags */}\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:site\" content=\"@joincolony\" />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={description} />\n      {imagePaths.map(imagePath => (\n        <meta name=\"twitter:image\" content={imagePath} key={imagePath} />\n      ))}\n    </Helmet>\n  );\n};\n\nSEO.displayName = displayName;\n\nexport default SEO;\n","/* @flow */\n\nimport type { HOC } from 'recompose';\n\nimport { injectIntl } from 'react-intl';\nimport { compose, defaultProps, withHandlers, withProps } from 'recompose';\n\nimport { withFileContext } from '~hoc/files';\nimport { withLocation } from '~hoc/location';\n\nimport type { InProps } from './types';\n\nimport SEO from './SEO.jsx';\n\nconst enhance: HOC<*, InProps> = compose(\n  injectIntl,\n  withFileContext(),\n  withLocation(),\n  defaultProps({\n    isDocPage: false,\n  }),\n  withProps(() => ({\n    baseUrl: 'https://docs.colony.io',\n  })),\n  withHandlers({\n    getAbsoluteImagePath: ({ baseUrl, files, project }) => (\n      imagePath: string,\n    ) => {\n      return imagePath.startsWith('http')\n        ? imagePath\n        : `${baseUrl}${\n            files && files[`${project}/${imagePath}`]\n              ? files[`${project}/${imagePath}`]\n              : imagePath\n          }`;\n    },\n  }),\n  withProps(({ getAbsoluteImagePath }) => ({\n    siteLogo: getAbsoluteImagePath('/img/colonyDocs_combomark.svg'),\n  })),\n);\n\nexport default enhance(SEO);\n","/* @flow */\n\nimport type { ComponentType } from 'react';\n\nimport { fromRenderProps } from 'recompose';\n\nimport FileContext from '~context/FileContext';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const withFileContext = () => (BaseComponent: ComponentType<Object>) =>\n  // $FlowFixMe\n  fromRenderProps(FileContext.Consumer, files => ({ files }))(BaseComponent);\n","/* @flow */\n\nexport { default } from './SEO';\n","/* @flow */\n\nconst IPFS = require('ipfs');\n\nconst { Buffer } = IPFS;\n\nlet node;\n\nconst waitForIPFS = async () => {\n  node = new IPFS({ start: false });\n  return new Promise((resolve, reject) => {\n    node.on('ready', () => resolve(true));\n    node.on('error', err => reject(err));\n  });\n};\n\nexports.init = async () => {\n  await waitForIPFS();\n  return node.start();\n};\n\nexports.saveHash = async (item: *) => {\n  const data = Buffer.from(JSON.stringify(item));\n  const result = await node.add(data);\n  return result[0].hash;\n};\n\nexports.getHash = async (hash: string) => {\n  const buf = await node.cat(`/ipfs/${hash}`);\n  let item;\n  try {\n    item = JSON.parse(buf.toString());\n  } catch (err) {\n    throw new Error(`Could not get hash ${hash}`);\n  }\n  return item;\n};\n\nexports.stop = () => node.stop();\n","/* @flow */\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { defineMessages, FormattedDate, FormattedMessage } from 'react-intl';\n\nimport type { Issue, Network } from '~types';\n\nimport FormattedToken from '~core/FormattedToken';\nimport Link from '~core/Link';\nimport SpinnerLoader from '~core/SpinnerLoader';\n\nimport {\n  getStore,\n  setStore,\n} from '~layouts/DeveloperPortalLayout/localStorage';\n\nimport styles from './IssueTableRow.module.css';\n\nconst MSG = defineMessages({\n  error: {\n    id: 'pages.Contribute.Issue.error',\n    defaultMessage: 'Error',\n  },\n  none: {\n    id: 'pages.Contribute.Issue.none',\n    defaultMessage: 'None',\n  },\n});\n\ntype Props = {|\n  issue: Issue,\n  loadedRemote?: boolean,\n  network: Network,\n|};\n\nconst displayName = 'pages.Contribute.Issue';\n\nconst server = process.env.SERVER_URL || 'http://localhost:8080';\n\nconst IssueTableRow = ({ issue, loadedRemote, network }: Props) => {\n  const [contribution, setContribution] = useState(null);\n  const [error, setError] = useState(null);\n  const [loadedLocal, setLoadedLocal] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  const formatIssueLink = url => {\n    const repository = url.split('/')[4];\n    const issueNumber = url.split('/')[6];\n    return `${repository}#${issueNumber}`;\n  };\n\n  const getContribution = useCallback(async () => {\n    const options = {\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' },\n    };\n    // eslint-disable-next-line no-undef\n    fetch(\n      `${server}/api/contribution?networkId=${network ? network.id : 1}&issue=${\n        issue.node.url\n      }`,\n      options,\n    )\n      .then(res => res.json())\n      .then(data => {\n        setContribution(data.contribution || { none: true });\n        setLoading(false);\n      })\n      .catch(fetchError => {\n        setError(fetchError);\n        setLoading(false);\n      });\n  }, [issue, network]);\n\n  useEffect(() => {\n    if (!loadedLocal) {\n      const localContribution = getStore(issue.node.url);\n      setContribution(localContribution);\n      setLoadedLocal(true);\n    }\n  }, [issue, loadedLocal]);\n\n  useEffect(() => {\n    setStore(issue.node.url, contribution);\n  }, [contribution, issue]);\n\n  useEffect(() => {\n    if (loadedRemote) {\n      getContribution();\n    }\n  }, [getContribution, loadedRemote]);\n\n  return (\n    <tr>\n      <td>\n        <FormattedDate value={issue.node.createdAt} />\n      </td>\n      <td>\n        {issue.node.title.length > 50\n          ? issue.node.title.substring(0, 50).concat('...')\n          : issue.node.title}\n      </td>\n      <td>\n        <Link href={issue.node.url} text={formatIssueLink(issue.node.url)} />\n      </td>\n      <td>\n        {contribution && contribution.none && (\n          <FormattedMessage {...MSG.none} />\n        )}\n        {contribution && !contribution.none && (\n          <Link\n            href={`/contribute/${contribution.type}?id=${contribution.typeId}`}\n          >\n            <FormattedToken amount={contribution.payout} symbol=\"CDEV\" />\n          </Link>\n        )}\n        {!contribution && loading && (\n          <SpinnerLoader appearance={{ theme: 'primary' }} />\n        )}\n        {!contribution && error && (\n          <span className={styles.error}>\n            <FormattedMessage {...MSG.error} />\n          </span>\n        )}\n      </td>\n    </tr>\n  );\n};\n\nIssueTableRow.displayName = displayName;\n\nexport default IssueTableRow;\n","/* @flow */\n\nexport { default } from './IssueTableRow.jsx';\n","\"use strict\";\n\nvar deselectCurrent = require(\"toggle-selection\");\n\nvar defaultMessage = \"Copy to clipboard: #{key}, Enter\";\n\nfunction format(message) {\n  var copyKey = (/mac os x/i.test(navigator.userAgent) ? \"⌘\" : \"Ctrl\") + \"+C\";\n  return message.replace(/#{\\s*key\\s*}/g, copyKey);\n}\n\nfunction copy(text, options) {\n  var debug,\n    message,\n    reselectPrevious,\n    range,\n    selection,\n    mark,\n    success = false;\n  if (!options) {\n    options = {};\n  }\n  debug = options.debug || false;\n  try {\n    reselectPrevious = deselectCurrent();\n\n    range = document.createRange();\n    selection = document.getSelection();\n\n    mark = document.createElement(\"span\");\n    mark.textContent = text;\n    // reset user styles for span element\n    mark.style.all = \"unset\";\n    // prevents scrolling to the end of the page\n    mark.style.position = \"fixed\";\n    mark.style.top = 0;\n    mark.style.clip = \"rect(0, 0, 0, 0)\";\n    // used to preserve spaces and line breaks\n    mark.style.whiteSpace = \"pre\";\n    // do not inherit user-select (it may be `none`)\n    mark.style.webkitUserSelect = \"text\";\n    mark.style.MozUserSelect = \"text\";\n    mark.style.msUserSelect = \"text\";\n    mark.style.userSelect = \"text\";\n    mark.addEventListener(\"copy\", function(e) {\n      e.stopPropagation();\n      if (options.format) {\n        e.preventDefault();\n        e.clipboardData.clearData();\n        e.clipboardData.setData(options.format, text);\n      }\n    });\n\n    document.body.appendChild(mark);\n\n    range.selectNodeContents(mark);\n    selection.addRange(range);\n\n    var successful = document.execCommand(\"copy\");\n    if (!successful) {\n      throw new Error(\"copy command was unsuccessful\");\n    }\n    success = true;\n  } catch (err) {\n    debug && console.error(\"unable to copy using execCommand: \", err);\n    debug && console.warn(\"trying IE specific stuff\");\n    try {\n      window.clipboardData.setData(options.format || \"text\", text);\n      success = true;\n    } catch (err) {\n      debug && console.error(\"unable to copy using clipboardData: \", err);\n      debug && console.error(\"falling back to prompt\");\n      message = format(\"message\" in options ? options.message : defaultMessage);\n      window.prompt(message, text);\n    }\n  } finally {\n    if (selection) {\n      if (typeof selection.removeRange == \"function\") {\n        selection.removeRange(range);\n      } else {\n        selection.removeAllRanges();\n      }\n    }\n\n    if (mark) {\n      document.body.removeChild(mark);\n    }\n    reselectPrevious();\n  }\n\n  return success;\n}\n\nmodule.exports = copy;\n","\nmodule.exports = function () {\n  var selection = document.getSelection();\n  if (!selection.rangeCount) {\n    return function () {};\n  }\n  var active = document.activeElement;\n\n  var ranges = [];\n  for (var i = 0; i < selection.rangeCount; i++) {\n    ranges.push(selection.getRangeAt(i));\n  }\n\n  switch (active.tagName.toUpperCase()) { // .toUpperCase handles XHTML\n    case 'INPUT':\n    case 'TEXTAREA':\n      active.blur();\n      break;\n\n    default:\n      active = null;\n      break;\n  }\n\n  selection.removeAllRanges();\n  return function () {\n    selection.type === 'Caret' &&\n    selection.removeAllRanges();\n\n    if (!selection.rangeCount) {\n      ranges.forEach(function(range) {\n        selection.addRange(range);\n      });\n    }\n\n    active &&\n    active.focus();\n  };\n};\n","/* @flow */\n\nimport type { WalletObjectType } from '@colony/purser-core';\n\nimport React from 'react';\nimport { defineMessages, FormattedMessage } from 'react-intl';\n\nimport Button from '~core/Button';\nimport ErrorMessage from '~core/ErrorMessage';\nimport Input from '~core/Input';\n\nimport type { Provider } from '~types';\n\nimport styles from './Login.module.css';\n\nconst MSG = defineMessages({\n  connectGitHubMessage: {\n    id: 'pages.Dashboard.connectGitHubMessage',\n    defaultMessage: \"MetaMask connected. Let's connect your GitHub account.\",\n  },\n  connectGitHubInputLabel: {\n    id: 'pages.Dashboard.connectGitHubInputLabel',\n    defaultMessage: `Wallet Address`,\n  },\n  connectGitHubButton: {\n    id: 'pages.Dashboard.connectGitHubButton',\n    defaultMessage: `Connect GitHub`,\n  },\n  connectGitHubGitHubMessage: {\n    id: 'pages.Dashboard.connectGitHubGitHubMessage',\n    defaultMessage: `We'll use your GitHub account to reward you for\n    contributions.`,\n  },\n});\n\ntype Props = {|\n  authenticate: (provider: Provider) => void,\n  serverError?: string,\n  wallet: WalletObjectType,\n|};\n\nconst displayName = 'pages.Dashboard.Login';\n\nconst Login = ({ authenticate, serverError, wallet }: Props) => (\n  <div className={styles.main}>\n    <div className={styles.content}>\n      <p className={styles.text}>\n        <FormattedMessage {...MSG.connectGitHubMessage} />\n      </p>\n      <div className={styles.field}>\n        <Input\n          disabled\n          appearance={{\n            padding: 'huge',\n            size: 'stretch',\n          }}\n          id=\"address\"\n          label={MSG.connectGitHubInputLabel}\n          type=\"text\"\n          value={wallet.address}\n        />\n      </div>\n      <div className={styles.field}>\n        <Button\n          appearance={{\n            theme: 'primary',\n            color: 'white',\n            padding: 'huge',\n            size: 'stretch',\n          }}\n          onClick={() => authenticate('github')}\n          text={MSG.connectGitHubButton}\n        />\n      </div>\n      {serverError && (\n        <ErrorMessage appearance={{ color: 'pink' }} error={serverError} />\n      )}\n    </div>\n  </div>\n);\n\nLogin.displayName = displayName;\n\nexport default Login;\n","/* @flow */\n\nimport React from 'react';\n\nimport { defineMessages } from 'react-intl';\n\nimport type { Network, User } from '~types';\n\nimport Link from '~core/Link';\n\nimport styles from './Sidebar.module.css';\n\nconst MSG = defineMessages({\n  accountLink: {\n    id: 'pages.Dashboard.Sidebar.accountLink',\n    defaultMessage: 'Account',\n  },\n  adminLink: {\n    id: 'pages.Dashboard.Sidebar.adminLink',\n    defaultMessage: 'Admin',\n  },\n  coloniesLink: {\n    id: 'pages.Dashboard.Sidebar.coloniesLink',\n    defaultMessage: 'Colonies',\n  },\n  contributionsLink: {\n    id: 'pages.Dashboard.Sidebar.contributionsLink',\n    defaultMessage: 'Contributions',\n  },\n});\n\ntype Props = {|\n  active: string,\n  network: ?Network,\n  user: ?User,\n|};\n\nconst displayName = 'pages.Dashboard.Sidebar';\n\nconst Sidebar = ({ active, network, user }: Props) => (\n  <div className={styles.main}>\n    <div>\n      <Link\n        className={active === 'colonies' ? styles.linkActive : styles.link}\n        href=\"/dashboard/colonies\"\n        text={MSG.coloniesLink}\n      />\n      <Link\n        className={active === 'contributions' ? styles.linkActive : styles.link}\n        href=\"/dashboard/contributions\"\n        text={MSG.contributionsLink}\n      />\n      <Link\n        className={active === 'account' ? styles.linkActive : styles.link}\n        href=\"/dashboard/account\"\n        text={MSG.accountLink}\n      />\n      {user && network && user.admin && user.admin[network.slug] && (\n        <Link\n          className={active === 'admin' ? styles.linkActive : styles.link}\n          href=\"/dashboard/admin\"\n          text={MSG.adminLink}\n        />\n      )}\n    </div>\n  </div>\n);\n\nSidebar.displayName = displayName;\n\nexport default Sidebar;\n","/* @flow */\n\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { defineMessages, FormattedMessage } from 'react-intl';\nimport copy from 'copy-to-clipboard';\n\nimport Button from '~core/Button';\nimport Image from '~core/Image';\n\nimport styles from './Copy.module.css';\n\nconst MSG = defineMessages({\n  copy: {\n    id: 'pages.Dashboard.Account.Address.copy',\n    defaultMessage: 'Copy',\n  },\n  copied: {\n    id: 'pages.Dashboard.Account.Address.copied',\n    defaultMessage: 'Copied',\n  },\n});\n\ntype Props = {|\n  /** The text that will be copied */\n  copyTarget: string,\n|};\n\nconst displayName = 'Copy';\n\nconst Copy = ({ copyTarget }: Props) => {\n  const [copied, setCopied] = useState(false);\n  const copiedTimeout = useRef(null);\n\n  const handleCopy = useCallback(() => {\n    copy(copyTarget);\n    setCopied(true);\n    copiedTimeout.current = setTimeout(() => {\n      setCopied(false);\n    }, 2000);\n  }, [copyTarget]);\n\n  useEffect(() => {\n    return () => {\n      if (copied) clearTimeout(copiedTimeout.current);\n    };\n  }, [copied]);\n\n  if (copied) {\n    return (\n      <div className={styles.main}>\n        <Button appearance={{ theme: 'reset' }} disabled type=\"submit\">\n          <Image className={styles.copy} alt={MSG.copy} src=\"/img/copied.svg\" />\n        </Button>\n        <FormattedMessage {...MSG.copied} />\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.main}>\n      <Button\n        appearance={{ theme: 'reset' }}\n        onClick={handleCopy}\n        type=\"submit\"\n      >\n        <Image className={styles.copy} alt={MSG.copy} src=\"/img/copy.svg\" />\n      </Button>\n    </div>\n  );\n};\n\nCopy.displayName = displayName;\n\nexport default Copy;\n","/* @flow */\n\nimport type { WalletObjectType } from '@colony/purser-core';\n\nimport React, { useState } from 'react';\nimport { defineMessages, FormattedMessage } from 'react-intl';\n// import Blockies from 'react-blockies';\n\nimport type { User } from '~types';\n\nimport Button from '~core/Button';\nimport Copy from '~core/Copy';\nimport ErrorMessage from '~core/ErrorMessage';\nimport SpinnerLoader from '~core/SpinnerLoader';\n\nimport styles from './Address.module.css';\n\nconst MSG = defineMessages({\n  primaryAddress: {\n    id: 'pages.Dashboard.Account.Address.primaryAddress',\n    defaultMessage: `Primary Address: {primaryAddress}`,\n  },\n  primaryAddressWarning: {\n    id: 'pages.Dashboard.Account.Address.primaryAddressWarning',\n    defaultMessage: `The above address is not your primary address.\n    {updateAddress}.`,\n  },\n  updateAddress: {\n    id: 'pages.Dashboard.Account.Address.updateAddress',\n    defaultMessage: 'Click here to make it so',\n  },\n});\n\ntype Props = {|\n  setUser: (user: User) => void,\n  user: User,\n  wallet: WalletObjectType,\n|};\n\nconst displayName = 'pages.Dashboard.Account.Address';\n\nconst server = process.env.SERVER_URL || 'http://localhost:8080';\n\nconst Address = ({ setUser, user, wallet }: Props) => {\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const handleUpdateAddress = () => {\n    setError(null);\n    setLoading(true);\n    const options = {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ address: wallet.address }),\n    };\n    // eslint-disable-next-line no-undef\n    fetch(`${server}/api/user/address?sessionID=${user.session.id}`, options)\n      .then(res => res.json())\n      .then(data => {\n        if (data.error) {\n          setError(data.error);\n          setLoading(false);\n        } else {\n          setUser({ ...user, addresses: data.addresses });\n          setLoading(false);\n        }\n      })\n      .catch(fetchError => {\n        setError(fetchError.message);\n        setLoading(false);\n      });\n  };\n\n  return (\n    <div className={styles.main}>\n      <div className={styles.address}>\n        {/*\n        <Blockies\n          className={styles.blockies}\n          seed={wallet.address}\n          scale={2.5}\n        />\n        */}\n        {wallet.address}\n        <Copy copyTarget={wallet.address} />\n      </div>\n      {user.addresses[0] !== wallet.address && (\n        <div className={styles.primaryAddress}>\n          <div>\n            <FormattedMessage\n              values={{\n                updateAddress: (\n                  <Button\n                    appearance={{ theme: 'reset' }}\n                    onClick={handleUpdateAddress}\n                    style={{ color: '#289BDC' }}\n                    text={MSG.updateAddress}\n                  />\n                ),\n              }}\n              {...MSG.primaryAddressWarning}\n            />\n            {loading && (\n              <div className={styles.loader}>\n                <SpinnerLoader appearance={{ theme: 'primary' }} />\n              </div>\n            )}\n          </div>\n          <div>\n            <FormattedMessage\n              values={{ primaryAddress: user.addresses[0] }}\n              {...MSG.primaryAddress}\n            />\n          </div>\n        </div>\n      )}\n      {error && <ErrorMessage error={error} />}\n    </div>\n  );\n};\n\nAddress.displayName = displayName;\n\nexport default Address;\n","/* @flow */\n\nimport React, { useState } from 'react';\nimport { defineMessages, FormattedMessage } from 'react-intl';\n\nimport type { Provider, User } from '~types';\n\nimport Button from '~core/Button';\nimport ErrorMessage from '~core/ErrorMessage';\nimport SpinnerLoader from '~core/SpinnerLoader';\n\nimport styles from './DeleteAccount.module.css';\n\nconst MSG = defineMessages({\n  deleteAccount: {\n    id: 'pages.Dashboard.Account.deleteAccount',\n    defaultMessage: 'Delete Account',\n  },\n  deleteAccountConfirm: {\n    id: 'pages.Dashboard.Account.deleteAccountConfirm',\n    defaultMessage: 'Are you sure you want to delete your account?',\n  },\n  deleteAccountCancel: {\n    id: 'pages.Dashboard.Account.deleteAccountCancel',\n    defaultMessage: 'Cancel',\n  },\n  deleteAccountDelete: {\n    id: 'pages.Dashboard.Account.deleteAccountDelete',\n    defaultMessage: 'Delete',\n  },\n});\n\ntype Props = {|\n  disconnect: (provider: Provider) => void,\n  user: User,\n|};\n\nconst displayName = 'pages.Dashboard.Account.DeleteAccount';\n\nconst server = process.env.SERVER_URL || 'http://localhost:8080';\n\nconst DeleteAccount = ({ disconnect, user }: Props) => {\n  const [confirmDelete, setConfirmDelete] = useState(false);\n  const [error, setError] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const handleDeleteAccount = () => {\n    setError(null);\n    setLoading(true);\n    const options = {\n      method: 'DELETE',\n      headers: { 'Content-Type': 'application/json' },\n    };\n    // eslint-disable-next-line no-undef\n    fetch(`${server}/api/user?sessionID=${user.session.id}`, options)\n      .then(response => response.json())\n      .then(data => {\n        if (data.error) {\n          setError(data.error);\n          setLoading(false);\n        } else {\n          disconnect('github');\n          setLoading(false);\n        }\n      })\n      .catch(fetchError => {\n        setError(fetchError.message);\n        setLoading(false);\n      });\n  };\n  return (\n    <div className={styles.main}>\n      {confirmDelete ? (\n        <>\n          <span className={styles.confirmDelete}>\n            <FormattedMessage {...MSG.deleteAccountConfirm} />\n          </span>\n          {loading ? (\n            <div className={styles.loader}>\n              <SpinnerLoader appearance={{ theme: 'primary' }} />\n            </div>\n          ) : (\n            <>\n              <Button\n                appearance={{\n                  theme: 'reset',\n                  font: 'small',\n                  color: 'red',\n                  weight: 'medium',\n                }}\n                onClick={handleDeleteAccount}\n                text={MSG.deleteAccountDelete}\n                type=\"submit\"\n              />\n              <Button\n                appearance={{\n                  theme: 'reset',\n                  font: 'small',\n                  color: 'grey',\n                  weight: 'medium',\n                }}\n                onClick={() => setConfirmDelete(false)}\n                text={MSG.deleteAccountCancel}\n                type=\"submit\"\n              />\n            </>\n          )}\n        </>\n      ) : (\n        <Button\n          appearance={{\n            theme: 'reset',\n            font: 'small',\n            color: 'red',\n            weight: 'medium',\n          }}\n          onClick={() => setConfirmDelete(true)}\n          text={MSG.deleteAccount}\n          type=\"submit\"\n        />\n      )}\n      {error && <ErrorMessage error={error} />}\n    </div>\n  );\n};\n\nDeleteAccount.displayName = displayName;\n\nexport default DeleteAccount;\n","/* @flow */\n\nimport React, { useState } from 'react';\nimport { defineMessages } from 'react-intl';\n\nimport type { Provider, User } from '~types';\n\nimport Button from '~core/Button';\nimport ErrorMessage from '~core/ErrorMessage';\nimport Input from '~core/Input';\nimport SpinnerLoader from '~core/SpinnerLoader';\n\nimport styles from './Discourse.module.css';\n\nconst MSG = defineMessages({\n  connectedAccountsConnect: {\n    id: 'pages.Dashboard.Account.connectedAccountsConnect',\n    defaultMessage: 'Connect',\n  },\n  connectedAccountsDiscourseLabel: {\n    id: 'pages.Dashboard.Account.connectedAccountsDiscourseLabel',\n    defaultMessage: 'Discourse',\n  },\n  connectedAccountsRemove: {\n    id: 'pages.Dashboard.Account.connectedAccountsRemove',\n    defaultMessage: 'Remove',\n  },\n});\n\ntype Props = {|\n  authenticate: (provider: Provider) => void,\n  disconnect: (provider: Provider) => void,\n  serverError: ?string,\n  user: User,\n|};\n\nconst displayName = 'pages.Dashboard.Account.Discourse';\n\nconst server = process.env.SERVER_URL || 'http://localhost:8080';\n\nconst Discourse = ({ authenticate, disconnect, serverError, user }: Props) => {\n  const [error, setError] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const handleRemoveDiscourse = () => {\n    setError(null);\n    setLoading(true);\n    const options = {\n      method: 'DELETE',\n      headers: { 'Content-Type': 'application/json' },\n    };\n    // eslint-disable-next-line no-undef\n    fetch(`${server}/api/user/discourse?sessionID=${user.session.id}`, options)\n      .then(response => response.json())\n      .then(data => {\n        if (data.error) {\n          setError(data.error);\n          setLoading(false);\n        } else {\n          disconnect('discourse');\n          setLoading(false);\n        }\n      })\n      .catch(fetchError => {\n        setError(fetchError.message);\n        setLoading(false);\n      });\n  };\n  return (\n    <div className={styles.field}>\n      <Input\n        disabled\n        appearance={{\n          display: user.discourse ? undefined : 'none',\n          padding: 'huge',\n          size: 'large',\n        }}\n        id=\"discourse\"\n        label={MSG.connectedAccountsDiscourseLabel}\n        type=\"text\"\n        value={user.discourse ? `@${user.discourse.username}` : ''}\n      />\n      {user.discourse ? (\n        <>\n          {loading ? (\n            <div className={styles.loader}>\n              <SpinnerLoader appearance={{ theme: 'primary' }} />\n            </div>\n          ) : (\n            <Button\n              appearance={{\n                theme: 'reset',\n                font: 'small',\n                color: 'blue',\n                weight: 'medium',\n              }}\n              onClick={handleRemoveDiscourse}\n              text={MSG.connectedAccountsRemove}\n              type=\"submit\"\n            />\n          )}\n        </>\n      ) : (\n        <Button\n          appearance={{ theme: 'primary', padding: 'large', size: 'medium' }}\n          loading={loading}\n          onClick={() => authenticate('discourse')}\n          style={{ margin: '12px 0' }}\n          text={MSG.connectedAccountsConnect}\n          type=\"submit\"\n        />\n      )}\n      {error && <ErrorMessage error={error} />}\n      {serverError && <ErrorMessage error={serverError} />}\n    </div>\n  );\n};\n\nDiscourse.displayName = displayName;\n\nexport default Discourse;\n","/* @flow */\n\nimport React, { useState } from 'react';\nimport { defineMessages } from 'react-intl';\n\nimport Button from '~core/Button';\nimport ErrorMessage from '~core/ErrorMessage';\nimport Input from '~core/Input';\nimport SpinnerLoader from '~core/SpinnerLoader';\n\nimport type { User } from '~types';\n\nimport styles from './Email.module.css';\n\nconst MSG = defineMessages({\n  emailAdd: {\n    id: 'pages.Dashboard.Account.Email.emailAdd',\n    defaultMessage: 'Add',\n  },\n  emailCancel: {\n    id: 'pages.Dashboard.Account.Email.emailCancel',\n    defaultMessage: 'Cancel',\n  },\n  emailEdit: {\n    id: 'pages.Dashboard.Account.Email.emailEdit',\n    defaultMessage: 'Edit',\n  },\n  emailLabel: {\n    id: 'pages.Dashboard.Account.Email.emailLabel',\n    defaultMessage: 'Email',\n  },\n  emailSave: {\n    id: 'pages.Dashboard.Account.Email.emailSave',\n    defaultMessage: 'Save',\n  },\n});\n\ntype Props = {|\n  setUser: (user: User) => void,\n  user: User,\n|};\n\nconst displayName = 'pages.Dashboard.Account.Email';\n\nconst server = process.env.SERVER_URL || 'http://localhost:8080';\n\nconst Email = ({ setUser, user }: Props) => {\n  const initialEmail = user.email || '';\n  const [edit, setEdit] = useState(false);\n  const [email, setEmail] = useState(initialEmail);\n  const [error, setError] = useState(null);\n  const [input, setInput] = useState(!!user.email);\n  const [loading, setLoading] = useState(false);\n\n  const isValidEmail = value => {\n    const valid = /\\S+@\\S+\\.\\S+/;\n    return valid.test(value);\n  };\n\n  const handleAddEmail = () => {\n    setEdit(true);\n    setInput(true);\n  };\n\n  const handleCancelEmail = () => {\n    setEmail(initialEmail);\n    setEdit(false);\n    setError(null);\n    if (!user.email) {\n      setInput(false);\n    }\n  };\n\n  const handleChangeEmail = event => {\n    setError(null);\n    setEmail(event.currentTarget.value);\n  };\n\n  const handleSaveEmail = () => {\n    if (isValidEmail(email)) {\n      setLoading(true);\n      const options = {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email }),\n      };\n      // eslint-disable-next-line no-undef\n      fetch(`${server}/api/user/email?sessionID=${user.session.id}`, options)\n        .then(response => response.json())\n        .then(data => {\n          if (data.error) {\n            setError(data.error);\n            setLoading(false);\n          } else {\n            setUser({ ...user, email: data.email });\n            setEdit(false);\n            setLoading(false);\n          }\n        })\n        .catch(fetchError => {\n          setError(fetchError.message);\n          setLoading(false);\n        });\n    } else {\n      setError('Please provide a valid email address');\n    }\n  };\n\n  const handleKeyDown = event => {\n    if (event.key === 'Enter') {\n      handleSaveEmail();\n    }\n  };\n\n  return (\n    <div className={styles.field}>\n      <Input\n        disabled={!edit}\n        appearance={{\n          display: input ? undefined : 'none',\n          padding: 'huge',\n          size: 'large',\n        }}\n        id=\"email\"\n        error={error}\n        label={MSG.emailLabel}\n        onChange={handleChangeEmail}\n        onKeyDown={handleKeyDown}\n        type=\"text\"\n        value={email}\n      />\n      {input ? (\n        <>\n          {loading ? (\n            <div className={styles.loader}>\n              <SpinnerLoader appearance={{ theme: 'primary' }} />\n            </div>\n          ) : (\n            <>\n              <Button\n                appearance={{\n                  theme: 'reset',\n                  font: 'small',\n                  color: 'blue',\n                  weight: 'medium',\n                }}\n                onClick={edit ? () => handleSaveEmail() : () => setEdit(true)}\n                text={edit ? MSG.emailSave : MSG.emailEdit}\n                type=\"submit\"\n              />\n              {edit && (\n                <Button\n                  appearance={{\n                    theme: 'reset',\n                    font: 'small',\n                    color: 'grey',\n                    weight: 'medium',\n                  }}\n                  onClick={handleCancelEmail}\n                  text={MSG.emailCancel}\n                  type=\"submit\"\n                />\n              )}\n            </>\n          )}\n        </>\n      ) : (\n        <Button\n          appearance={{ theme: 'primary', padding: 'large', size: 'medium' }}\n          loading={loading}\n          onClick={handleAddEmail}\n          style={{ margin: '8px 0' }}\n          text={MSG.emailAdd}\n          type=\"submit\"\n        />\n      )}\n      {error && <ErrorMessage error={error} />}\n    </div>\n  );\n};\n\nEmail.displayName = displayName;\n\nexport default Email;\n","/* @flow */\n\nimport React, { useState } from 'react';\nimport { defineMessages } from 'react-intl';\n\nimport Button from '~core/Button';\nimport ErrorMessage from '~core/ErrorMessage';\nimport Input from '~core/Input';\nimport SpinnerLoader from '~core/SpinnerLoader';\n\nimport type { User } from '~types';\n\nimport styles from './Name.module.css';\n\nconst MSG = defineMessages({\n  nameCancel: {\n    id: 'pages.Dashboard.Account.Name.nameCancel',\n    defaultMessage: 'Cancel',\n  },\n  nameEdit: {\n    id: 'pages.Dashboard.Account.Name.nameEdit',\n    defaultMessage: 'Edit',\n  },\n  nameSave: {\n    id: 'pages.Dashboard.Account.Name.nameSave',\n    defaultMessage: 'Save',\n  },\n});\n\ntype Props = {|\n  setUser: (user: User) => void,\n  user: User,\n|};\n\nconst displayName = 'pages.Dashboard.Account.Name';\n\nconst server = process.env.SERVER_URL || 'http://localhost:8080';\n\nconst Name = ({ setUser, user }: Props) => {\n  const initialName = user.name || '';\n  const [edit, setEdit] = useState(false);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [name, setName] = useState(initialName);\n\n  const handleCancelName = () => {\n    setError(null);\n    setName(initialName);\n    setEdit(false);\n  };\n\n  const handleChangeName = event => {\n    setError(null);\n    setName(event.currentTarget.value);\n  };\n\n  const handleSaveName = () => {\n    if (name) {\n      setError(null);\n      setLoading(true);\n      const options = {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ name }),\n      };\n      // eslint-disable-next-line no-undef\n      fetch(`${server}/api/user/name?sessionID=${user.session.id}`, options)\n        .then(response => response.json())\n        .then(data => {\n          if (data.error) {\n            setError(data.error);\n            setLoading(false);\n          } else {\n            setUser({ ...user, name: data.name });\n            setEdit(false);\n            setLoading(false);\n          }\n        })\n        .catch(fetchError => {\n          setError(fetchError.message);\n          setLoading(false);\n        });\n    } else {\n      setError('Name cannot be blank');\n    }\n  };\n\n  const handleKeyDown = event => {\n    if (event.key === 'Enter') {\n      handleSaveName();\n    }\n  };\n\n  return (\n    <div>\n      <div className={styles.main}>\n        {edit ? (\n          <>\n            <Input\n              appearance={{ padding: 'huge', size: 'large' }}\n              id=\"name\"\n              onChange={handleChangeName}\n              onKeyDown={handleKeyDown}\n              style={{ marginRight: '20px', marginTop: '0' }}\n              type=\"text\"\n              value={name}\n            />\n            {loading ? (\n              <SpinnerLoader appearance={{ theme: 'primary' }} />\n            ) : (\n              <>\n                <Button\n                  appearance={{\n                    theme: 'reset',\n                    font: 'small',\n                    color: 'blue',\n                    weight: 'medium',\n                  }}\n                  onClick={handleSaveName}\n                  style={{ marginRight: '15px' }}\n                  text={MSG.nameSave}\n                  type=\"submit\"\n                />\n                <Button\n                  appearance={{\n                    theme: 'reset',\n                    font: 'small',\n                    color: 'grey',\n                    weight: 'medium',\n                  }}\n                  onClick={handleCancelName}\n                  text={MSG.nameCancel}\n                  type=\"submit\"\n                />\n              </>\n            )}\n          </>\n        ) : (\n          <Button\n            appearance={{ theme: 'reset' }}\n            className={styles.name}\n            onClick={() => setEdit(true)}\n          >\n            {user.name}\n          </Button>\n        )}\n      </div>\n      {error && <ErrorMessage error={error} />}\n    </div>\n  );\n};\n\nName.displayName = displayName;\n\nexport default Name;\n","/* @flow */\n\nimport type { ColonyClient } from '@colony/colony-js-client';\nimport type { WalletObjectType } from '@colony/purser-core';\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { defineMessages, FormattedMessage } from 'react-intl';\n\nimport type { Network } from '~types';\n\nimport { supportedNetwork } from '~layouts/DeveloperPortalLayout/helpers';\n\nimport ErrorMessage from '~core/ErrorMessage';\nimport FormattedToken from '~core/FormattedToken';\n\nimport {\n  getStore,\n  setStore,\n} from '~layouts/DeveloperPortalLayout/localStorage';\n\nimport styles from './Statistics.module.css';\n\nconst MSG = defineMessages({\n  statisticsSwitchNetwork: {\n    id: 'pages.Dashboard.Account.statisticsSwitchNetwork',\n    defaultMessage: 'Switch networks to see your token balance and reputation.',\n  },\n});\n\ntype Props = {|\n  colonyClient: ?ColonyClient,\n  network: Network,\n  wallet: WalletObjectType,\n|};\n\nconst displayStatistics = 'pages.Dashboard.Account.Statistics';\n\nconst Statistics = ({ colonyClient, network, wallet }: Props) => {\n  const [error, setError] = useState(null);\n  const [loaded, setLoaded] = useState<boolean>(false);\n  const [loadedLocal, setLoadedLocal] = useState<boolean>(false);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [statistics, setStatistics] = useState(null);\n\n  const getStatistics = useCallback(async () => {\n    if (colonyClient) {\n      setLoading(true);\n      try {\n        const {\n          amount: balance,\n        } = await colonyClient.tokenClient.getBalanceOf.call({\n          sourceAddress: wallet.address,\n        });\n        const { skillId } = await colonyClient.getDomain.call({\n          domainId: 1,\n        });\n        const { reputationAmount } = await colonyClient.getReputation({\n          skillId,\n          address: wallet.address,\n        });\n        setStatistics({\n          balance: balance.toString(),\n          reputation: reputationAmount || 0,\n        });\n        setLoaded(true);\n        setLoading(false);\n      } catch (clientError) {\n        setError(clientError.message);\n        setStatistics(null);\n        setLoading(false);\n      }\n    }\n  }, [colonyClient, wallet]);\n\n  useEffect(() => {\n    if (!loadedLocal) {\n      const localStatistics = getStore(`${wallet.address}-${network.id}`);\n      setStatistics(localStatistics);\n      setLoadedLocal(true);\n    }\n  }, [loadedLocal, network, wallet]);\n\n  useEffect(() => setStore(`${wallet.address}-${network.id}`, statistics), [\n    network,\n    statistics,\n    wallet,\n  ]);\n\n  useEffect(() => {\n    if (colonyClient && !error && !loaded && !loading) {\n      getStatistics();\n    }\n  }, [colonyClient, error, getStatistics, loaded, loading]);\n\n  if (!supportedNetwork(network)) {\n    return (\n      <div className={styles.statisticsSwitchNetwork}>\n        <FormattedMessage {...MSG.statisticsSwitchNetwork} />\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.statistics}>\n      <div className={styles.statistic}>\n        <FormattedToken\n          amount={statistics ? statistics.balance : 0}\n          appearance={{ theme: 'statistics' }}\n          loading={loading && !statistics}\n          symbol=\"CDEV\"\n        />\n      </div>\n      <div className={styles.statistic}>\n        <FormattedToken\n          amount={statistics ? statistics.reputation : 0}\n          appearance={{ theme: 'statistics' }}\n          loading={loading && !statistics}\n          symbol=\"Reputation\"\n        />\n      </div>\n      {error && <ErrorMessage error={error} />}\n    </div>\n  );\n};\n\nStatistics.displayStatistics = displayStatistics;\n\nexport default Statistics;\n","/* @flow */\n\nimport type { ColonyClient } from '@colony/colony-js-client';\nimport type { WalletObjectType } from '@colony/purser-core';\n\nimport React from 'react';\nimport { defineMessages, FormattedMessage } from 'react-intl';\n\nimport Button from '~core/Button';\nimport Image from '~core/Image';\nimport Input from '~core/Input';\n\nimport type { Network, Provider, User } from '~types';\n\nimport Address from './Address';\nimport DeleteAccount from './DeleteAccount';\nimport Discourse from './Discourse';\nimport Email from './Email';\nimport Name from './Name';\nimport Statistics from './Statistics';\n\nimport styles from './Account.module.css';\n\nconst MSG = defineMessages({\n  connectedAccountsTitle: {\n    id: 'pages.Dashboard.Account.connectedAccountsTitle',\n    defaultMessage: 'Connected Accounts',\n  },\n  connectedAccountsDescription: {\n    id: 'pages.Dashboard.Account.connectedAccountsDescription',\n    defaultMessage: `Connect your accounts so we can verify your identity and\n    reward you for your contributions.`,\n  },\n  connectedAccountsGitHubLabel: {\n    id: 'pages.Dashboard.Account.connectedAccountsGitHubLabel',\n    defaultMessage: 'GitHub',\n  },\n  logout: {\n    id: 'pages.Dashboard.Account.logout',\n    defaultMessage: 'Logout',\n  },\n});\n\ntype Props = {|\n  authenticate: (provider: Provider) => void,\n  colonyClient: ?ColonyClient,\n  disconnect: (provider: Provider) => void,\n  network: Network,\n  path: string,\n  serverError: ?string,\n  setUser: (user: User) => void,\n  user: User,\n  wallet: WalletObjectType,\n|};\n\nconst displayName = 'pages.Dashboard.Account';\n\nconst Account = ({\n  authenticate,\n  colonyClient,\n  disconnect,\n  network,\n  serverError,\n  setUser,\n  user,\n  wallet,\n}: Props) => {\n  return (\n    <div className={styles.main}>\n      <div className={styles.header}>\n        <Image\n          className={styles.photo}\n          alt={user.github.username}\n          src={user.github.photo}\n        />\n        <div>\n          <Name setUser={setUser} user={user} />\n          <Address setUser={setUser} user={user} wallet={wallet} />\n          <Statistics\n            colonyClient={colonyClient}\n            network={network}\n            wallet={wallet}\n          />\n        </div>\n      </div>\n      <div className={styles.content}>\n        <div className={styles.contentColumn}>\n          <h2 className={styles.contentTitle}>\n            <FormattedMessage {...MSG.connectedAccountsTitle} />\n          </h2>\n          <p>\n            <FormattedMessage {...MSG.connectedAccountsDescription} />\n          </p>\n        </div>\n        <div className={styles.contentColumn}>\n          <div className={styles.field}>\n            <Input\n              disabled\n              appearance={{\n                padding: 'huge',\n                size: 'large',\n              }}\n              id=\"github\"\n              label={MSG.connectedAccountsGitHubLabel}\n              type=\"text\"\n              value={`@${user.github.username}`}\n            />\n          </div>\n          <Discourse\n            authenticate={authenticate}\n            disconnect={disconnect}\n            serverError={serverError}\n            user={user}\n          />\n          <Email setUser={setUser} user={user} />\n        </div>\n      </div>\n      <div className={styles.content}>\n        <div className={styles.accountButtons}>\n          <Button\n            appearance={{\n              theme: 'reset',\n              font: 'small',\n              color: 'blue',\n              weight: 'medium',\n            }}\n            onClick={() => disconnect('github')}\n            text={MSG.logout}\n            type=\"submit\"\n          />\n          <DeleteAccount disconnect={disconnect} user={user} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nAccount.displayName = displayName;\n\nexport default Account;\n","/* @flow */\n\nimport type { ColonyClient } from '@colony/colony-js-client';\n\nimport React, { useState } from 'react';\nimport { defineMessages, FormattedMessage } from 'react-intl';\n\nimport type { Network } from '~types';\n\nimport Button from '~core/Button';\nimport ErrorMessage from '~core/ErrorMessage';\nimport Input from '~core/Input';\n\nimport styles from './AddAdmin.module.css';\n\nconst MSG = defineMessages({\n  buttonAddAdmin: {\n    id: 'pages.Dashboard.Admin.AddAdmin.buttonAddAdmin',\n    defaultMessage: 'Add Admin',\n  },\n  labelAddress: {\n    id: 'pages.Dashboard.Admin.AddAdmin.labelAddress',\n    defaultMessage: 'Ethereum Address',\n  },\n  labelUsername: {\n    id: 'pages.Dashboard.Admin.AddAdmin.labelUsername',\n    defaultMessage: 'GitHub Username',\n  },\n  success: {\n    id: 'pages.Dashboard.Admin.AddAdmin.success',\n    defaultMessage: 'Success! Admin added.',\n  },\n});\n\nconst displayName = 'pages.Contribute.AddAdmin';\n\ntype Props = {|\n  colonyClient: ?ColonyClient,\n  network: Network,\n|};\n\nconst server = process.env.SERVER_URL || 'http://localhost:8080';\n\nconst AddAdmin = ({ colonyClient, network }: Props) => {\n  const [address, setAddress] = useState('');\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(false);\n  const [username, setUsername] = useState('');\n\n  const handleAddAdmin = async () => {\n    if (colonyClient && address && username) {\n      await colonyClient.setRootRole.send(\n        {\n          address,\n          domainId: 1,\n          setTo: true,\n        },\n        {},\n      );\n      const options = {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ network: network.slug, username }),\n      };\n      // eslint-disable-next-line no-undef\n      fetch(`${server}/api/user/admin`, options)\n        .then(() => {\n          setSuccess(true);\n        })\n        .catch(fetchError => {\n          setError(fetchError.message);\n        });\n    }\n  };\n\n  const handleChangeAddress = event => {\n    if (success) setSuccess(false);\n    if (error) setError(null);\n    setAddress(event.currentTarget.value);\n  };\n\n  const handleChangeUsername = event => {\n    if (success) setSuccess(false);\n    if (error) setError(null);\n    setUsername(event.currentTarget.value);\n  };\n\n  return (\n    <div className={styles.main}>\n      <div className={styles.field}>\n        <Input\n          appearance={{\n            padding: 'huge',\n            size: 'stretch',\n          }}\n          id=\"address\"\n          label={MSG.labelAddress}\n          onChange={handleChangeAddress}\n          type=\"text\"\n          value={address}\n        />\n      </div>\n      <div className={styles.field}>\n        <Input\n          appearance={{\n            padding: 'huge',\n            size: 'stretch',\n          }}\n          id=\"username\"\n          label={MSG.labelUsername}\n          onChange={handleChangeUsername}\n          type=\"text\"\n          value={username}\n        />\n      </div>\n      <div className={styles.field}>\n        <Button\n          appearance={{\n            theme: 'primary',\n            padding: 'huge',\n            size: 'stretch',\n          }}\n          disabled={!address || !username}\n          onClick={handleAddAdmin}\n          text={MSG.buttonAddAdmin}\n          type=\"submit\"\n        />\n      </div>\n      {success && (\n        <div className={styles.success}>\n          <FormattedMessage {...MSG.success} />\n        </div>\n      )}\n      {error && <ErrorMessage error={error} />}\n    </div>\n  );\n};\n\nAddAdmin.displayName = displayName;\n\nexport default AddAdmin;\n","/* @flow */\n\nimport type { ColonyClient } from '@colony/colony-js-client';\n\nimport React, { useCallback, useState } from 'react';\nimport { defineMessages } from 'react-intl';\nimport { BN } from 'web3-utils';\n\nimport type { Network } from '~types';\n\nimport Button from '~core/Button';\nimport ErrorMessage from '~core/ErrorMessage';\nimport Input from '~core/Input';\nimport Link from '~core/Link';\n\nimport styles from './AddPayment.module.css';\n\nconst MSG = defineMessages({\n  buttonAddPayment: {\n    id: 'pages.Dashboard.Admin.AddPayment.buttonAddPayment',\n    defaultMessage: 'Add Payment',\n  },\n  contributionLink: {\n    id: 'pages.Dashboard.Admin.AddPayment.contributionLink',\n    defaultMessage: 'Success! Click here to view the payment.',\n  },\n  labelAmount: {\n    id: 'pages.Dashboard.Admin.AddPayment.labelAmount',\n    defaultMessage: 'Payout Amount',\n  },\n  labelIssue: {\n    id: 'pages.Dashboard.Admin.AddPayment.labelIssue',\n    defaultMessage: 'GitHub Issue URL (issue or pull request required)',\n  },\n  labelPullRequest: {\n    id: 'pages.Dashboard.Admin.AddPayment.labelPullRequest',\n    defaultMessage: 'GitHub Pull Request URL (issue or pull request required)',\n  },\n  labelRecipient: {\n    id: 'pages.Dashboard.Admin.AddPayment.labelRecipient',\n    defaultMessage: 'Recipient Ethereum Address',\n  },\n  labelSkillId: {\n    id: 'pages.Dashboard.Admin.AddPayment.labelSkillId',\n    defaultMessage: 'Skill ID',\n  },\n  labelUsername: {\n    id: 'pages.Dashboard.Admin.AddPayment.labelUsername',\n    defaultMessage: 'Recipient GitHub Username',\n  },\n});\n\nconst displayName = 'pages.Contribute.AddPayment';\n\ntype Props = {|\n  colonyClient: ?ColonyClient,\n  network: Network,\n|};\n\nconst server = process.env.SERVER_URL || 'http://localhost:8080';\n\nconst AddPayment = ({ colonyClient, network }: Props) => {\n  const [amount, setAmount] = useState(0);\n  const [contribution, setContribution] = useState(null);\n  const [error, setError] = useState(null);\n  const [issue, setIssue] = useState('');\n  const [pullRequest, setPullRequest] = useState('');\n  const [recipient, setRecipient] = useState('');\n  const [skillId, setSkillId] = useState(0);\n  const [username, setUsername] = useState('');\n\n  const handleAddPayment = async () => {\n    if (\n      colonyClient &&\n      amount &&\n      (issue || pullRequest) &&\n      recipient &&\n      skillId &&\n      username\n    ) {\n      const addPaymentResponse = await colonyClient.addPayment.send(\n        {\n          recipient,\n          token: colonyClient.tokenClient.contract.address,\n          amount: new BN(amount),\n          domainId: 1,\n          skillId: Number(skillId),\n        },\n        {},\n      );\n      // $FlowFixMe\n      const { paymentId } = addPaymentResponse.eventData;\n      const options = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          issue,\n          network: network.slug,\n          networkId: network.id,\n          payout: amount,\n          pullRequest,\n          type: 'payment',\n          typeId: paymentId,\n          username,\n        }),\n      };\n      // eslint-disable-next-line no-undef\n      fetch(`${server}/api/contribution`, options)\n        .then(res => res.json())\n        .then(data => {\n          setContribution(data.contribution);\n        })\n        .catch(fetchError => {\n          setError(fetchError.message);\n        });\n    }\n  };\n\n  const handleChangeAmount = useCallback(\n    event => {\n      if (contribution) setContribution(null);\n      if (error) setError(null);\n      setAmount(event.currentTarget.value);\n    },\n    [contribution, error],\n  );\n\n  const handleChangeIssue = useCallback(\n    event => {\n      if (contribution) setContribution(null);\n      if (error) setError(null);\n      setIssue(event.currentTarget.value);\n    },\n    [contribution, error],\n  );\n\n  const handleChangePullRequest = useCallback(\n    event => {\n      if (contribution) setContribution(null);\n      if (error) setError(null);\n      setPullRequest(event.currentTarget.value);\n    },\n    [contribution, error],\n  );\n\n  const handleChangeRecipient = useCallback(\n    event => {\n      if (contribution) setContribution(null);\n      if (error) setError(null);\n      setRecipient(event.currentTarget.value);\n    },\n    [contribution, error],\n  );\n\n  const handleChangeSkillId = useCallback(\n    event => {\n      if (contribution) setContribution(null);\n      if (error) setError(null);\n      setSkillId(event.currentTarget.value);\n    },\n    [contribution, error],\n  );\n\n  const handleChangeUsername = useCallback(\n    event => {\n      if (contribution) setContribution(null);\n      if (error) setError(null);\n      setUsername(event.currentTarget.value);\n    },\n    [contribution, error],\n  );\n\n  return (\n    <div className={styles.main}>\n      <div className={styles.field}>\n        <Input\n          appearance={{\n            padding: 'huge',\n            size: 'stretch',\n          }}\n          id=\"skillId\"\n          label={MSG.labelSkillId}\n          onChange={handleChangeSkillId}\n          type=\"number\"\n          value={skillId}\n        />\n      </div>\n      <div className={styles.field}>\n        <Input\n          appearance={{\n            padding: 'huge',\n            size: 'stretch',\n          }}\n          id=\"amount\"\n          label={MSG.labelAmount}\n          onChange={handleChangeAmount}\n          type=\"number\"\n          value={amount}\n        />\n      </div>\n      <div className={styles.field}>\n        <Input\n          appearance={{\n            padding: 'huge',\n            size: 'stretch',\n          }}\n          id=\"issue\"\n          label={MSG.labelIssue}\n          onChange={handleChangeIssue}\n          type=\"text\"\n          value={issue}\n        />\n      </div>\n      <div className={styles.field}>\n        <Input\n          appearance={{\n            padding: 'huge',\n            size: 'stretch',\n          }}\n          id=\"pullRequest\"\n          label={MSG.labelPullRequest}\n          onChange={handleChangePullRequest}\n          type=\"text\"\n          value={pullRequest}\n        />\n      </div>\n      <div className={styles.field}>\n        <Input\n          appearance={{\n            padding: 'huge',\n            size: 'stretch',\n          }}\n          id=\"username\"\n          label={MSG.labelUsername}\n          onChange={handleChangeUsername}\n          type=\"text\"\n          value={username}\n        />\n      </div>\n      <div className={styles.field}>\n        <Input\n          appearance={{\n            padding: 'huge',\n            size: 'stretch',\n          }}\n          id=\"recipient\"\n          label={MSG.labelRecipient}\n          onChange={handleChangeRecipient}\n          type=\"text\"\n          value={recipient}\n        />\n      </div>\n      <div className={styles.field}>\n        <Button\n          appearance={{\n            theme: 'primary',\n            padding: 'huge',\n            size: 'stretch',\n          }}\n          disabled={\n            !amount ||\n            (!pullRequest && !issue) ||\n            !recipient ||\n            !skillId ||\n            !username\n          }\n          onClick={handleAddPayment}\n          text={MSG.buttonAddPayment}\n          type=\"submit\"\n        />\n      </div>\n      {contribution && (\n        <div className={styles.success}>\n          <Link\n            href={`/contribute/${contribution.type}?id=${contribution.typeId}`}\n            text={MSG.contributionLink}\n          />\n        </div>\n      )}\n      {error && <ErrorMessage error={error} />}\n    </div>\n  );\n};\n\nAddPayment.displayName = displayName;\n\nexport default AddPayment;\n","/* @flow */\n\nimport type { ColonyClient } from '@colony/colony-js-client';\n\nimport React, { useCallback, useState } from 'react';\nimport { defineMessages } from 'react-intl';\nimport { BN } from 'web3-utils';\n\nimport type { Network } from '~types';\n\nimport ipfs from '~layouts/DeveloperPortalLayout/ipfs';\n\nimport Button from '~core/Button';\nimport ErrorMessage from '~core/ErrorMessage';\nimport Input from '~core/Input';\nimport Link from '~core/Link';\n\nimport styles from './AddTask.module.css';\n\nconst MSG = defineMessages({\n  buttonAddTask: {\n    id: 'pages.Dashboard.Admin.AddTask.buttonAddTask',\n    defaultMessage: 'Add Task',\n  },\n  contributionLink: {\n    id: 'pages.Dashboard.Admin.AddTask.contributionLink',\n    defaultMessage: 'Success! Click here to view the task.',\n  },\n  labelAmount: {\n    id: 'pages.Dashboard.Admin.AddTask.labelAmount',\n    defaultMessage: 'Payout Amount',\n  },\n  labelDueDate: {\n    id: 'pages.Dashboard.Admin.AddTask.labelDueDate',\n    defaultMessage: 'Due Date',\n  },\n  labelIssue: {\n    id: 'pages.Dashboard.Admin.AddTask.labelIssue',\n    defaultMessage: 'GitHub Issue URL',\n  },\n  labelSkillId: {\n    id: 'pages.Dashboard.Admin.AddTask.labelSkillId',\n    defaultMessage: 'Skill ID',\n  },\n});\n\nconst displayName = 'pages.Contribute.AddTask';\n\ntype Props = {|\n  colonyClient: ?ColonyClient,\n  network: Network,\n|};\n\nconst server = process.env.SERVER_URL || 'http://localhost:8080';\n\nconst AddTask = ({ colonyClient, network }: Props) => {\n  const [amount, setAmount] = useState(0);\n  const [contribution, setContribution] = useState(null);\n  const [dueDate, setDueDate] = useState('');\n  const [error, setError] = useState(null);\n  const [issue, setIssue] = useState('');\n  const [skillId, setSkillId] = useState(0);\n\n  const handleAddTask = async () => {\n    if (colonyClient && amount && dueDate && issue && skillId) {\n      await ipfs.init();\n      const specificationHash = await ipfs.saveHash(issue);\n      await ipfs.stop();\n      const addTaskResponse = await colonyClient.addTask.send(\n        {\n          specificationHash,\n          domainId: 1,\n          skillId: Number(skillId),\n          dueDate: new Date(dueDate),\n        },\n        {},\n      );\n      // $FlowFixMe\n      const { taskId } = addTaskResponse.eventData;\n      await colonyClient.setAllTaskPayouts.send(\n        {\n          taskId,\n          token: colonyClient.tokenClient.contract.address,\n          managerAmount: new BN(0),\n          evaluatorAmount: new BN(0),\n          workerAmount: new BN(amount),\n        },\n        {},\n      );\n      const options = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          issue,\n          networkId: network.id,\n          payout: amount,\n          type: 'task',\n          typeId: taskId,\n        }),\n      };\n      // eslint-disable-next-line no-undef\n      fetch(`${server}/api/contribution`, options)\n        .then(res => res.json())\n        .then(data => {\n          setContribution(data.contribution);\n        })\n        .catch(fetchError => {\n          setError(fetchError.message);\n        });\n    } else {\n      setError('All fields required');\n    }\n  };\n\n  const handleChangeAmount = useCallback(\n    event => {\n      if (contribution) setContribution(null);\n      if (error) setError(null);\n      setAmount(event.currentTarget.value);\n    },\n    [contribution, error],\n  );\n\n  const handleChangeDueDate = useCallback(\n    event => {\n      if (contribution) setContribution(null);\n      if (error) setError(null);\n      setDueDate(event.currentTarget.value);\n    },\n    [contribution, error],\n  );\n\n  const handleChangeIssue = useCallback(\n    event => {\n      if (contribution) setContribution(null);\n      if (error) setError(null);\n      setIssue(event.currentTarget.value);\n    },\n    [contribution, error],\n  );\n\n  const handleChangeSkillId = useCallback(\n    event => {\n      if (contribution) setContribution(null);\n      if (error) setError(null);\n      setSkillId(event.currentTarget.value);\n    },\n    [contribution, error],\n  );\n\n  return (\n    <div className={styles.main}>\n      <div className={styles.field}>\n        <Input\n          appearance={{\n            padding: 'huge',\n            size: 'stretch',\n          }}\n          id=\"skillId\"\n          label={MSG.labelSkillId}\n          onChange={handleChangeSkillId}\n          type=\"number\"\n          value={skillId}\n        />\n      </div>\n      <div className={styles.field}>\n        <Input\n          appearance={{\n            padding: 'huge',\n            size: 'stretch',\n          }}\n          id=\"amount\"\n          label={MSG.labelAmount}\n          onChange={handleChangeAmount}\n          type=\"number\"\n          value={amount}\n        />\n      </div>\n      <div className={styles.field}>\n        <Input\n          appearance={{\n            padding: 'huge',\n            size: 'stretch',\n          }}\n          id=\"dueDate\"\n          label={MSG.labelDueDate}\n          onChange={handleChangeDueDate}\n          type=\"date\"\n          value={dueDate}\n        />\n      </div>\n      <div className={styles.field}>\n        <Input\n          appearance={{\n            padding: 'huge',\n            size: 'stretch',\n          }}\n          id=\"issue\"\n          label={MSG.labelIssue}\n          onChange={handleChangeIssue}\n          type=\"text\"\n          value={issue}\n        />\n      </div>\n      <div className={styles.field}>\n        <Button\n          appearance={{\n            theme: 'primary',\n            padding: 'huge',\n            size: 'stretch',\n          }}\n          disabled={!amount || !dueDate || !issue || !skillId}\n          onClick={handleAddTask}\n          text={MSG.buttonAddTask}\n          type=\"submit\"\n        />\n      </div>\n      {contribution && (\n        <div className={styles.success}>\n          <Link\n            href={`/contribute/${contribution.type}?id=${contribution.typeId}`}\n            text={MSG.contributionLink}\n          />\n        </div>\n      )}\n      {error && <ErrorMessage error={error} />}\n    </div>\n  );\n};\n\nAddTask.displayName = displayName;\n\nexport default AddTask;\n","/* @flow */\n\nimport type { ColonyClient } from '@colony/colony-js-client';\n\nimport React, { useState } from 'react';\nimport { defineMessages } from 'react-intl';\n\nimport type { Network, User } from '~types';\n\nimport Button from '~core/Button';\nimport ErrorMessage from '~core/ErrorMessage';\n\nimport AddAdmin from './AddAdmin';\nimport AddPayment from './AddPayment';\nimport AddTask from './AddTask';\n\nimport styles from './Admin.module.css';\n\nconst MSG = defineMessages({\n  buttonAddAdmin: {\n    id: 'pages.Dashboard.Admin.buttonAddAdmin',\n    defaultMessage: 'Add Admin',\n  },\n  buttonAddPayment: {\n    id: 'pages.Dashboard.Admin.buttonAddPayment',\n    defaultMessage: 'Add Payment',\n  },\n  buttonAddTask: {\n    id: 'pages.Dashboard.Admin.buttonAddTask',\n    defaultMessage: 'Add Task',\n  },\n  unauthorized: {\n    id: 'pages.Dashboard.Admin.unauthorized',\n    defaultMessage: 'Unauthorized',\n  },\n});\n\nconst displayName = 'pages.Dashboard.Admin';\n\ntype Props = {|\n  colonyClient: ?ColonyClient,\n  network: Network,\n  /* eslint-disable-next-line react/no-unused-prop-types */\n  path: string,\n  user: User,\n|};\n\nconst Admin = ({ colonyClient, network, user }: Props) => {\n  const [visible, setVisible] = useState('AddAdmin');\n  if (!user || !user.admin || !user.admin[network.slug]) {\n    return <ErrorMessage error={MSG.unauthorized} />;\n  }\n  return (\n    <>\n      <div className={styles.main}>\n        <div className={styles.menu}>\n          <Button\n            appearance={{\n              theme: 'reset',\n              font: 'small',\n              color: visible === 'AddAdmin' ? 'blue' : 'grey',\n              weight: 'medium',\n            }}\n            onClick={() => setVisible('AddAdmin')}\n            text={MSG.buttonAddAdmin}\n            type=\"submit\"\n          />\n          <Button\n            appearance={{\n              theme: 'reset',\n              font: 'small',\n              color: visible === 'AddPayment' ? 'blue' : 'grey',\n              weight: 'medium',\n            }}\n            onClick={() => setVisible('AddPayment')}\n            text={MSG.buttonAddPayment}\n            type=\"submit\"\n          />\n          <Button\n            appearance={{\n              theme: 'reset',\n              font: 'small',\n              color: visible === 'AddTask' ? 'blue' : 'grey',\n              weight: 'medium',\n            }}\n            onClick={() => setVisible('AddTask')}\n            text={MSG.buttonAddTask}\n            type=\"submit\"\n          />\n        </div>\n        <div className={styles.content}>\n          {visible === 'AddAdmin' && (\n            <AddAdmin colonyClient={colonyClient} network={network} />\n          )}\n          {visible === 'AddPayment' && (\n            <AddPayment colonyClient={colonyClient} network={network} />\n          )}\n          {visible === 'AddTask' && (\n            <AddTask colonyClient={colonyClient} network={network} />\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n\nAdmin.displayName = displayName;\n\nexport default Admin;\n","/* @flow */\n\nimport type { ColonyNetworkClient } from '@colony/colony-js-client';\n\nimport React, { useState } from 'react';\nimport { defineMessages } from 'react-intl';\nimport { isAddress } from 'web3-utils';\n\nimport Button from '~core/Button';\nimport ErrorMessage from '~core/ErrorMessage';\nimport Input from '~core/Input';\n\nimport type { Network, User } from '~types';\n\nimport styles from './AddColony.module.css';\n\nconst MSG = defineMessages({\n  labelAddress: {\n    id: 'pages.Dashboard.Colonies.AddColony.labelAddress',\n    defaultMessage: 'Enter a colony address ({network})',\n  },\n  submitAddress: {\n    id: 'pages.Dashboard.Colonies.AddColony.submitAddress',\n    defaultMessage: 'Add Colony',\n  },\n});\n\ntype Props = {|\n  network: Network,\n  networkClient: ?ColonyNetworkClient,\n  setAddColony: (visible: boolean) => void,\n  setUser: (user: User) => void,\n  user: User,\n|};\n\nconst displayName = 'pages.Dashboard.Colonies.AddColony';\n\nconst server = process.env.SERVER_URL || 'http://localhost:8080';\n\nconst AddColony = ({\n  network,\n  networkClient,\n  setAddColony,\n  setUser,\n  user,\n}: Props) => {\n  const [address, setAddress] = useState('');\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const handleChangeAddress = event => {\n    setError(null);\n    setAddress(event.currentTarget.value);\n  };\n\n  const handleAddColony = async () => {\n    if (networkClient) {\n      if (isAddress(address)) {\n        setError(null);\n        setLoading(true);\n        const { isColony } = await networkClient.isColony.call({\n          colony: address,\n        });\n        if (!isColony) {\n          setError(`No colony on ${network.name} with the given address`);\n          setLoading(false);\n          return;\n        }\n        const options = {\n          method: 'PUT',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ address, network: network.slug }),\n        };\n        // eslint-disable-next-line no-undef\n        fetch(\n          `${server}/api/user/colonies?sessionID=${user.session.id}`,\n          options,\n        )\n          .then(response => response.json())\n          .then(data => {\n            if (data.error) {\n              setError(data.error);\n              setLoading(false);\n            } else {\n              setUser({ ...user, colonies: data.colonies });\n              setAddColony(false);\n              setLoading(false);\n            }\n          })\n          .catch(fetchError => {\n            setError(fetchError.message);\n            setLoading(false);\n          });\n      } else {\n        setError('The address you provided is not a valid address');\n      }\n    } else {\n      setError('Unable to initialize ColonyNetworkClient');\n    }\n  };\n\n  const handleKeyDown = event => {\n    if (event.key === 'Enter') {\n      handleAddColony();\n    }\n  };\n\n  return (\n    <div className={styles.field}>\n      <Input\n        appearance={{\n          label: 'light',\n          padding: 'huge',\n          size: 'stretch',\n        }}\n        error={error}\n        id=\"address\"\n        label={MSG.labelAddress}\n        labelValues={{ network: network.name }}\n        onChange={handleChangeAddress}\n        onKeyDown={handleKeyDown}\n        type=\"text\"\n        value={address}\n      />\n      <Button\n        appearance={{\n          padding: 'large',\n          theme: 'primary',\n          size: 'large',\n        }}\n        disabled={!address}\n        loading={loading}\n        onClick={handleAddColony}\n        text={MSG.submitAddress}\n        type=\"submit\"\n      />\n      {error && <ErrorMessage error={error} />}\n    </div>\n  );\n};\n\nAddColony.displayName = displayName;\n\nexport default AddColony;\n","/* @flow */\n\nimport type { ColonyNetworkClient } from '@colony/colony-js-client';\nimport type { WalletObjectType } from '@colony/purser-core';\n\nimport React, { useEffect, useState } from 'react';\nimport { defineMessages, FormattedMessage } from 'react-intl';\n\nimport type { Colony, Network, User } from '~types';\n\nimport {\n  getStore,\n  setStore,\n} from '~layouts/DeveloperPortalLayout/localStorage';\n\nimport Button from '~core/Button';\nimport Copy from '~core/Copy';\nimport ErrorMessage from '~core/ErrorMessage';\nimport Link from '~core/Link';\nimport SpinnerLoader from '~core/SpinnerLoader';\n\nimport { DOCS_COLONY_JS_REGISTERING_ENS_LABELS } from '~routes';\n\nimport styles from './ColonyItem.module.css';\n\nconst MSG = defineMessages({\n  colonyAddress: {\n    id: 'pages.Dashboard.Colonies.ColonyItem.colonyAddress',\n    defaultMessage: 'Colony Address',\n  },\n  colonyLabel: {\n    id: 'pages.Dashboard.Colonies.ColonyItem.colonyLabel',\n    defaultMessage: 'ENS Label',\n  },\n  colonyTokenAddress: {\n    id: 'pages.Dashboard.Colonies.ColonyItem.colonyTokenAddress',\n    defaultMessage: 'Colony Token Address',\n  },\n  linkColonyLabel: {\n    id: 'pages.Dashboard.Colonies.ColonyItem.linkColonyLabel',\n    defaultMessage: 'Register',\n  },\n  network: {\n    id: 'pages.Dashboard.Colonies.ColonyItem.network',\n    defaultMessage: 'Network',\n  },\n  removeColony: {\n    id: 'pages.Dashboard.Colonies.ColonyItem.removeColony',\n    defaultMessage: 'Remove',\n  },\n  removeColonyCancel: {\n    id: 'pages.Dashboard.Colonies.ColonyItem.removeColonyCancel',\n    defaultMessage: 'Cancel',\n  },\n  removeColonyConfirm: {\n    id: 'pages.Dashboard.Colonies.ColonyItem.removeColonyConfirm',\n    defaultMessage: 'Are you sure you want to remove this colony?',\n  },\n});\n\ntype Props = {|\n  colonyAddress: string,\n  network: Network,\n  networkClient: ?ColonyNetworkClient,\n  setUser: (user: User) => void,\n  user: User,\n  wallet: WalletObjectType,\n|};\n\nconst displayName = 'pages.Dashboard.Colonies.ColonyItem';\n\nconst server = process.env.SERVER_URL || 'http://localhost:8080';\n\nconst ColonyItem = ({\n  colonyAddress,\n  network,\n  networkClient,\n  setUser,\n  user,\n  wallet,\n}: Props) => {\n  const [actions, setActions] = useState<boolean>(false);\n  const [colony, setColony] = useState<?Colony>(null);\n  const [error, setError] = useState<?string>(null);\n  const [loadedLocal, setLoadedLocal] = useState<boolean>(false);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [removeColony, setRemoveColony] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (!loadedLocal) {\n      const localColony = getStore(colonyAddress);\n      setColony(localColony);\n      setLoadedLocal(true);\n    }\n  }, [colonyAddress, loadedLocal]);\n\n  useEffect(() => setStore(colonyAddress, colony), [colony, colonyAddress]);\n\n  useEffect(() => {\n    if (networkClient) {\n      (async () => {\n        const {\n          domain: colonyLabel,\n        } = await networkClient.lookupRegisteredENSDomain.call({\n          ensAddress: colonyAddress,\n        });\n        const colonyClient = await networkClient.getColonyClientByAddress(\n          colonyAddress,\n        );\n        const {\n          address: tokenAddress,\n        } = await colonyClient.getTokenAddress.call();\n        setColony({\n          colonyAddress,\n          colonyLabel,\n          tokenAddress,\n        });\n      })();\n    }\n  }, [colonyAddress, networkClient, wallet.address]);\n\n  const handleHideActions = async () => {\n    if (!removeColony) {\n      setActions(false);\n    }\n  };\n\n  const handleShowActions = async () => {\n    setActions(true);\n  };\n\n  const handleCancelRemove = async () => {\n    setError(null);\n    setRemoveColony(false);\n  };\n\n  const handleRemoveColony = async () => {\n    setError(null);\n    setLoading(true);\n    const options = {\n      method: 'DELETE',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ address: colonyAddress, network: network.slug }),\n    };\n    // eslint-disable-next-line no-undef\n    fetch(`${server}/api/user/colonies?sessionID=${user.session.id}`, options)\n      .then(response => response.json())\n      .then(data => {\n        if (data.error) {\n          setError(data.error);\n          setLoading(false);\n        } else {\n          setRemoveColony(false);\n          setLoading(false);\n          setUser({ ...user, colonies: data.colonies });\n        }\n      })\n      .catch(fetchError => {\n        setError(fetchError.message);\n        setLoading(false);\n      });\n  };\n\n  return (\n    <div\n      className={error ? styles.colonyError : styles.colony}\n      onMouseEnter={handleShowActions}\n      onMouseLeave={handleHideActions}\n    >\n      {colony ? (\n        <>\n          <div className={styles.colonyContent}>\n            <div>\n              <div className={styles.field}>\n                <div className={styles.label}>\n                  <FormattedMessage {...MSG.colonyAddress} />\n                </div>\n                <div className={styles.value}>\n                  {colony.colonyAddress}\n                  <Copy copyTarget={colony.colonyAddress} />\n                </div>\n              </div>\n              <div className={styles.field}>\n                <div className={styles.label}>\n                  <FormattedMessage {...MSG.colonyTokenAddress} />\n                </div>\n                <div className={styles.value}>\n                  {colony.tokenAddress}\n                  <Copy copyTarget={colony.tokenAddress} />\n                </div>\n              </div>\n            </div>\n            <div>\n              <div className={styles.field}>\n                <div className={styles.label}>\n                  <FormattedMessage {...MSG.colonyLabel} />\n                </div>\n                <div className={styles.value}>\n                  {colony.colonyLabel ? (\n                    colony.colonyLabel.split('.')[0]\n                  ) : (\n                    <Link\n                      arrow=\"right\"\n                      href={DOCS_COLONY_JS_REGISTERING_ENS_LABELS}\n                      text={MSG.linkColonyLabel}\n                    />\n                  )}\n                </div>\n              </div>\n              <div className={styles.field}>\n                <div className={styles.label}>\n                  <FormattedMessage {...MSG.network} />\n                </div>\n                <div className={styles.value}>{network.slug}</div>\n              </div>\n            </div>\n          </div>\n          {actions && (\n            <div className={styles.removeColony}>\n              {removeColony ? (\n                <>\n                  {loading ? (\n                    <SpinnerLoader appearance={{ theme: 'primary' }} />\n                  ) : (\n                    <>\n                      <span>\n                        <FormattedMessage {...MSG.removeColonyConfirm} />\n                      </span>\n                      <Button\n                        appearance={{ theme: 'reset' }}\n                        onClick={handleRemoveColony}\n                        text={MSG.removeColony}\n                        type=\"submit\"\n                      />\n                      <Button\n                        appearance={{ theme: 'reset' }}\n                        onClick={handleCancelRemove}\n                        text={MSG.removeColonyCancel}\n                        type=\"submit\"\n                      />\n                    </>\n                  )}\n                </>\n              ) : (\n                <Button\n                  appearance={{ theme: 'reset' }}\n                  onClick={() => setRemoveColony(true)}\n                  text={MSG.removeColony}\n                  type=\"submit\"\n                />\n              )}\n              {error && <ErrorMessage error={error} />}\n            </div>\n          )}\n        </>\n      ) : (\n        <div className={styles.loader}>\n          <SpinnerLoader appearance={{ theme: 'primary' }} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nColonyItem.displayName = displayName;\n\nexport default ColonyItem;\n","/* @flow */\n\nimport type { ColonyNetworkClient } from '@colony/colony-js-client';\nimport type { WalletObjectType } from '@colony/purser-core';\n\nimport React, { useState } from 'react';\nimport { defineMessages, FormattedMessage } from 'react-intl';\n\nimport type { Network, User } from '~types';\n\nimport { supportedNetwork } from '~layouts/DeveloperPortalLayout/helpers';\n\nimport Button from '~core/Button';\nimport Image from '~core/Image';\nimport Link from '~core/Link';\n\nimport {\n  DOCS_COLONY_JS_GET_STARTED,\n  DOCS_COLONY_JS_TASKS_AND_PAYMENTS,\n  DOCS_COLONY_JS_TOKENS_AND_FUNDING,\n} from '~routes';\n\nimport AddColony from './AddColony';\nimport ColonyItem from './ColonyItem';\n\nimport styles from './Colonies.module.css';\n\nconst MSG = defineMessages({\n  buttonAddColony: {\n    id: 'pages.Dashboard.Colonies.buttonAddColony',\n    defaultMessage: '+ Add Colony',\n  },\n  buttonCancel: {\n    id: 'pages.Dashboard.Colonies.buttonCancel',\n    defaultMessage: 'Cancel',\n  },\n  mainTitle: {\n    id: 'pages.Dashboard.Colonies.mainTitle',\n    defaultMessage: 'Colonies',\n  },\n  mainDescription: {\n    id: 'pages.Dashboard.Colonies.mainDescription',\n    defaultMessage: `Your personalized list of colonies on {network}. Add\n    colonies that you are developing, collaborating with, or colonies that you\n    would like to follow.`,\n  },\n  emptyTitle: {\n    id: 'pages.Dashboard.Colonies.emptyTitle',\n    defaultMessage: `Add Colony`,\n  },\n  emptyDescription: {\n    id: 'pages.Dashboard.Colonies.emptyDescription',\n    defaultMessage: `It looks like you haven't added any colonies yet! This is\n    your personalized list of colonies on {network}. Add colonies that you are\n    developing, collaborating with, or colonies that you would like to follow.`,\n  },\n  emptyCreateColony: {\n    id: 'pages.Dashboard.Colonies.emptyCreateColony',\n    defaultMessage: 'Create Colony',\n  },\n  emptyCreateColonyDescription: {\n    id: 'pages.Dashboard.Colonies.emptyCreateColonyDescription',\n    defaultMessage: `Create your first colony in {linkGetStarted}.`,\n  },\n  emptyAddColony: {\n    id: 'pages.Dashboard.Colonies.emptyAddColony',\n    defaultMessage: 'Add Colony Address',\n  },\n  emptyAddColonyDescription: {\n    id: 'pages.Dashboard.Colonies.emptyAddColonyDescription',\n    defaultMessage: `Add a colony address to your list of colonies.`,\n  },\n  learnMoreTitle: {\n    id: 'pages.Dashboard.Colonies.learnMoreTitle',\n    defaultMessage: 'Learn More',\n  },\n  linkColonyRoles: {\n    id: 'pages.Dashboard.Colonies.linkColonyRoles',\n    defaultMessage: 'Colony Roles',\n  },\n  linkDomainsAndSkills: {\n    id: 'pages.Dashboard.Colonies.linkDomainsAndSkills',\n    defaultMessage: 'Domains and Skills',\n  },\n  linkGetStarted: {\n    id: 'pages.Dashboard.Colonies.linkGetStarted',\n    defaultMessage: 'Get Started',\n  },\n  linkTasksAndPayments: {\n    id: 'pages.Dashboard.Colonies.linkTasksAndPayments',\n    defaultMessage: 'Tasks and Payments',\n  },\n  linkTokensAndFunding: {\n    id: 'pages.Dashboard.Colonies.linkTokensAndFunding',\n    defaultMessage: 'Tokens and Funding',\n  },\n  unsupportedNetworkTitle: {\n    id: 'pages.Dashboard.Colonies.unsupportedNetworkTitle',\n    defaultMessage: 'Switch Networks',\n  },\n  unsupportedNetworkMessage: {\n    id: 'pages.Dashboard.Colonies.unsupportedNetworkMessage',\n    defaultMessage: `You are on an unsupported network. Use MetaMask to switch\n    to \"Main Ethereum Network\" or \"Goerli Test Network\".`,\n  },\n});\n\ntype Props = {|\n  network: Network,\n  networkClient: ?ColonyNetworkClient,\n  path: string,\n  setUser: (user: User) => void,\n  user: User,\n  wallet: WalletObjectType,\n|};\n\nconst displayName = 'pages.Dashboard.Colonies';\n\nconst Colonies = ({ network, networkClient, setUser, user, wallet }: Props) => {\n  const [addColony, setAddColony] = useState(false);\n  const coloniesExist =\n    user.colonies &&\n    user.colonies[network.slug] &&\n    user.colonies[network.slug].length;\n  if (!supportedNetwork(network)) {\n    return (\n      <div className={styles.networkWrapper}>\n        <div className={styles.main}>\n          <div className={styles.networkContentWrapper}>\n            <div className={styles.networkContent}>\n              <Image\n                alt={MSG.unsupportedNetworkTitle}\n                className={styles.networkImage}\n                src=\"/img/switch_networks.svg\"\n              />\n              <h1 className={styles.title}>\n                <FormattedMessage {...MSG.unsupportedNetworkTitle} />\n              </h1>\n              <p className={styles.subTitle}>\n                <FormattedMessage {...MSG.unsupportedNetworkMessage} />\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  if (!coloniesExist) {\n    return (\n      <div className={styles.wrapper}>\n        <div className={styles.main}>\n          <h1 className={styles.title}>\n            <FormattedMessage {...MSG.emptyTitle} />\n          </h1>\n          <p className={styles.subTitle}>\n            <FormattedMessage\n              values={{ network: network.name }}\n              {...MSG.emptyDescription}\n            />\n          </p>\n          <div className={styles.content}>\n            <div className={styles.emptyItem}>\n              <h4 className={styles.emptyItemTitle}>\n                <FormattedMessage {...MSG.emptyCreateColony} />\n              </h4>\n              <p>\n                <FormattedMessage\n                  values={{\n                    linkGetStarted: (\n                      <Link\n                        href={DOCS_COLONY_JS_GET_STARTED}\n                        text={MSG.linkGetStarted}\n                      />\n                    ),\n                  }}\n                  {...MSG.emptyCreateColonyDescription}\n                />\n              </p>\n            </div>\n            <div className={styles.emptyItem}>\n              <h4 className={styles.emptyItemTitle}>\n                <FormattedMessage {...MSG.emptyAddColony} />\n              </h4>\n              <p>\n                <FormattedMessage\n                  values={{ network: network.name }}\n                  {...MSG.emptyAddColonyDescription}\n                />\n              </p>\n            </div>\n            <AddColony\n              network={network}\n              networkClient={networkClient}\n              setUser={setUser}\n              setAddColony={setAddColony}\n              user={user}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n  return (\n    <div className={styles.wrapper}>\n      <div className={styles.main}>\n        <h1 className={styles.title}>\n          <FormattedMessage {...MSG.mainTitle} />\n        </h1>\n        <p className={styles.subTitle}>\n          <FormattedMessage\n            values={{ network: network.name }}\n            {...MSG.mainDescription}\n          />\n        </p>\n        <div className={styles.content}>\n          <div className={styles.addColonyButton}>\n            {addColony ? (\n              <Button\n                appearance={{\n                  theme: 'reset',\n                  color: 'grey',\n                }}\n                onClick={() => setAddColony(false)}\n                text={MSG.buttonCancel}\n                type=\"submit\"\n              />\n            ) : (\n              <Button\n                appearance={{\n                  theme: 'reset',\n                  color: 'blue',\n                }}\n                onClick={() => setAddColony(true)}\n                text={MSG.buttonAddColony}\n                type=\"submit\"\n              />\n            )}\n          </div>\n          {addColony && (\n            <AddColony\n              network={network}\n              networkClient={networkClient}\n              setUser={setUser}\n              setAddColony={setAddColony}\n              user={user}\n            />\n          )}\n          {user.colonies &&\n            user.colonies[network.slug] &&\n            user.colonies[network.slug].map(colonyAddress => (\n              <ColonyItem\n                key={colonyAddress}\n                colonyAddress={colonyAddress}\n                network={network}\n                networkClient={networkClient}\n                setUser={setUser}\n                user={user}\n                wallet={wallet}\n              />\n            ))}\n        </div>\n      </div>\n      <div className={styles.learnMore}>\n        <h4>\n          <FormattedMessage {...MSG.learnMoreTitle} />\n        </h4>\n        <Link\n          arrow=\"right\"\n          href={DOCS_COLONY_JS_GET_STARTED}\n          text={MSG.linkGetStarted}\n        />\n        <Link\n          arrow=\"right\"\n          href={DOCS_COLONY_JS_TOKENS_AND_FUNDING}\n          text={MSG.linkTokensAndFunding}\n        />\n        <Link\n          arrow=\"right\"\n          href={DOCS_COLONY_JS_TASKS_AND_PAYMENTS}\n          text={MSG.linkTasksAndPayments}\n        />\n      </div>\n    </div>\n  );\n};\n\nColonies.displayName = displayName;\n\nexport default Colonies;\n","/* @flow */\n\nimport type { WalletObjectType } from '@colony/purser-core';\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { defineMessages, FormattedMessage } from 'react-intl';\n\nimport type { Network, User } from '~types';\n\nimport Button from '~core/Button';\nimport ErrorMessage from '~core/ErrorMessage';\nimport Image from '~core/Image';\nimport Link from '~core/Link';\nimport SpinnerLoader from '~core/SpinnerLoader';\n\nimport IssueTableRow from '~parts/IssueTableRow';\n\nimport {\n  getStore,\n  setStore,\n} from '~layouts/DeveloperPortalLayout/localStorage';\n\nimport { PAGE_DEVELOPER_PORTAL_CONTRIBUTE } from '~routes';\n\nimport styles from './Contributions.module.css';\n\nconst MSG = defineMessages({\n  buttonRequestReward: {\n    id: 'pages.Dashboard.Contributions.buttonRequestReward',\n    defaultMessage: '+ Request Reward',\n  },\n  buttonCancel: {\n    id: 'pages.Dashboard.Contributions.buttonCancel',\n    defaultMessage: 'Cancel',\n  },\n  description: {\n    id: 'pages.Dashboard.Contributions.description',\n    defaultMessage: 'A list of your contributions to {joinColonyLink}.',\n  },\n  issuesHeaderDate: {\n    id: 'pages.Contribute.Landing.issuesHeaderDate',\n    defaultMessage: 'Date',\n  },\n  issuesHeaderLink: {\n    id: 'pages.Contribute.Landing.issuesHeaderLink',\n    defaultMessage: 'Link',\n  },\n  issuesHeaderReward: {\n    id: 'pages.Contribute.Landing.issuesHeaderReward',\n    defaultMessage: 'Reward',\n  },\n  issuesHeaderTitle: {\n    id: 'pages.Contribute.Landing.issuesHeaderTitle',\n    defaultMessage: 'Title',\n  },\n  issuesSubtext: {\n    id: 'pages.Contribute.Landing.issuesSubtext',\n    defaultMessage: '* Switch networks to check for other rewards.',\n  },\n  noContributionsLink: {\n    id: 'pages.Dashboard.Contributions.noContributionsLink',\n    defaultMessage: 'start earning tokens and reputation',\n  },\n  noContributionsMessage: {\n    id: 'pages.Dashboard.Contributions.noContributionsMessage',\n    defaultMessage: `It looks like you don't have any past contributions. Make\n    your first contribution and {noContributionsLink}.`,\n  },\n  noContributionsTitle: {\n    id: 'pages.Dashboard.Contributions.noContributionsTitle',\n    defaultMessage: 'Contribute and Earn',\n  },\n  showMore: {\n    id: 'pages.Dashboard.Contributions.showMore',\n    defaultMessage: 'More',\n  },\n  title: {\n    id: 'pages.Dashboard.Contributions.title',\n    defaultMessage: 'Contributions',\n  },\n});\n\ntype Props = {|\n  network: Network,\n  path: string,\n  user: User,\n  wallet: WalletObjectType,\n|};\n\nconst displayName = 'pages.Dashboard.Contributions';\n\nconst Contributions = ({ network, user }: Props) => {\n  const [count, setCount] = useState(10);\n  const [error, setError] = useState(null);\n  const [issues, setIssues] = useState(null);\n  const [loadedLocal, setLoadedLocal] = useState(false);\n  const [loadedRemote, setLoadedRemote] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [loadingMore, setLoadingMore] = useState(false);\n\n  const getIssues = useCallback(() => {\n    setError(null);\n    setLoading(true);\n    const options = {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${process.env.DOCS_GITHUB_TOKEN || ''}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        query: `query {\n          search(\n            query: \"org:JoinColony author:${user.github.username}\",\n            type: ISSUE,\n            last: ${count}\n          ) {\n            edges {\n              node {\n                ... on Issue {\n                  url\n                  title\n                  createdAt\n                }\n                ... on PullRequest {\n                  url\n                  title\n                  createdAt\n                }\n              }\n            }\n          }\n        }`,\n      }),\n    };\n    // eslint-disable-next-line no-undef\n    fetch('https://api.github.com/graphql', options)\n      .then(res => res.json())\n      .then(({ data }) => {\n        setIssues(data.search.edges);\n        setLoadedRemote(true);\n        setLoading(false);\n        setLoadingMore(false);\n      })\n      .catch(fetchError => {\n        setError(fetchError.message);\n      });\n  }, [count, user]);\n\n  const handleClickMore = () => {\n    setCount(count + 10);\n    setLoadingMore(true);\n    setLoadedRemote(false);\n  };\n\n  useEffect(() => {\n    if (!loadedLocal) {\n      const localUserIssues = getStore('userIssues');\n      setIssues(localUserIssues);\n      setLoadedLocal(true);\n    }\n  }, [issues, loadedLocal]);\n\n  useEffect(\n    () => setStore('userIssues', issues ? issues.slice(0, 10) : issues),\n    [issues],\n  );\n\n  useEffect(() => {\n    if (!loadedRemote && !loading) {\n      getIssues();\n    }\n  }, [getIssues, loadedRemote, loading]);\n\n  if (!issues && !loading) {\n    return (\n      <div className={styles.noContributions}>\n        <div className={styles.noContributionsWrapper}>\n          <div>\n            <Image\n              alt={MSG.noContributionsTitle}\n              className={styles.noContributionsImage}\n              src=\"/img/no_contributions.svg\"\n            />\n            <h1 className={styles.title}>\n              <FormattedMessage {...MSG.noContributionsTitle} />\n            </h1>\n            <p className={styles.subTitle}>\n              <FormattedMessage\n                values={{\n                  noContributionsLink: (\n                    <Link\n                      href={PAGE_DEVELOPER_PORTAL_CONTRIBUTE}\n                      text={MSG.noContributionsLink}\n                    />\n                  ),\n                }}\n                {...MSG.noContributionsMessage}\n              />\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <div className={styles.main}>\n        <h1 className={styles.title}>\n          <FormattedMessage {...MSG.title} />\n        </h1>\n        <p className={styles.subTitle}>\n          <FormattedMessage\n            values={{\n              joinColonyLink: (\n                <Link href=\"https://github.com/joincolony\" text=\"JoinColony\" />\n              ),\n            }}\n            {...MSG.description}\n          />\n        </p>\n        <div className={styles.content}>\n          <table className={styles.issues}>\n            <thead>\n              <tr>\n                <td>\n                  <FormattedMessage {...MSG.issuesHeaderDate} />\n                </td>\n                <td>\n                  <FormattedMessage {...MSG.issuesHeaderTitle} />\n                </td>\n                <td>\n                  <FormattedMessage {...MSG.issuesHeaderLink} />\n                </td>\n                <td>\n                  <FormattedMessage {...MSG.issuesHeaderReward} />\n                  {network && ' *'}\n                </td>\n              </tr>\n            </thead>\n            <tbody>\n              {issues &&\n                issues.map(issue => (\n                  <IssueTableRow\n                    key={issue.node.url}\n                    issue={issue}\n                    loadedRemote={loadedRemote}\n                    network={network}\n                  />\n                ))}\n            </tbody>\n          </table>\n          {network && (\n            <div className={styles.issuesSubtext}>\n              <FormattedMessage {...MSG.issuesSubtext} />\n            </div>\n          )}\n          <div className={styles.showMore}>\n            {loadingMore && <SpinnerLoader appearance={{ theme: 'primary' }} />}\n            <Button\n              appearance={{\n                theme: 'reset',\n                font: 'small',\n                color: 'blue',\n                weight: 'medium',\n              }}\n              disabled={loadingMore}\n              onClick={handleClickMore}\n              text={MSG.showMore}\n              type=\"submit\"\n            />\n          </div>\n        </div>\n        {error && <ErrorMessage error={error} />}\n      </div>\n    </>\n  );\n};\n\nContributions.displayName = displayName;\n\nexport default Contributions;\n","/* @flow */\n\nimport type {\n  ColonyClient,\n  ColonyNetworkClient,\n} from '@colony/colony-js-client';\nimport type { WalletObjectType } from '@colony/purser-core';\nimport type { IntlShape } from 'react-intl';\n\nimport React from 'react';\nimport { Router } from '@reach/router';\nimport { defineMessages } from 'react-intl';\nimport { Helmet } from 'react-helmet';\n\nimport SEO from '~parts/SEO';\n\nimport {\n  PAGE_DEVELOPER_PORTAL_DASHBOARD,\n  PAGE_DEVELOPER_PORTAL_DASHBOARD_ACCOUNT,\n  PAGE_DEVELOPER_PORTAL_DASHBOARD_ADMIN,\n  PAGE_DEVELOPER_PORTAL_DASHBOARD_COLONIES,\n  PAGE_DEVELOPER_PORTAL_DASHBOARD_CONTRIBUTIONS,\n} from '~routes';\n\nimport type { Network, Provider, User } from '~types';\n\nimport SpinnerLoader from '~core/SpinnerLoader';\n\nimport Login from './Login';\nimport Sidebar from './Sidebar';\n\nimport Account from './Account';\nimport Admin from './Admin';\nimport Colonies from './Colonies';\nimport Contributions from './Contributions';\n\nimport styles from './Dashboard.module.css';\n\nconst MSG = defineMessages({\n  pageDescription: {\n    id: 'pages.Dashboard.pageDescription',\n    defaultMessage: `A dashboard for developers building with Colony. Manage\n    your developer account, add and remove colonies from your watchlist, and\n    earn reputation and tokens for contributing to our open source projects.`,\n  },\n  pageTitle: {\n    id: 'pages.Dashboard.pageTitle',\n    defaultMessage: 'Developer Dashboard',\n  },\n});\n\ntype Props = {|\n  authenticate: (provider: Provider) => void,\n  colonyClient: ?ColonyClient,\n  disconnect: (provider: Provider) => void,\n  intl: IntlShape,\n  network: ?Network,\n  networkClient: ?ColonyNetworkClient,\n  page: string,\n  serverError?: string,\n  setUser: (user: ?User) => void,\n  user: ?User,\n  wallet: ?WalletObjectType,\n|};\n\nconst displayName = 'pages.Dashboard';\n\nconst Dashboard = ({\n  authenticate,\n  colonyClient,\n  disconnect,\n  intl: { formatMessage },\n  network,\n  networkClient,\n  page,\n  serverError,\n  setUser,\n  user,\n  wallet,\n}: Props) => {\n  const title = formatMessage(MSG.pageTitle);\n  if (typeof window !== 'undefined' && page === 'close') {\n    window.close();\n  }\n  if (!wallet && !user) {\n    return <div style={{ height: '100vh' }} />;\n  }\n  if (wallet && !user) {\n    return (\n      <Login\n        authenticate={authenticate}\n        serverError={serverError}\n        wallet={wallet}\n      />\n    );\n  }\n  return (\n    <>\n      <SEO description={MSG.pageDescription} title={title} />\n      {/*\n        Helmet title must be a prop to work with react hooks.\n        See https://github.com/nfl/react-helmet/issues/437\n      */}\n      <Helmet title={title} />\n      <main className={styles.main}>\n        {user && (\n          <>\n            <div className={styles.sidebar}>\n              <Sidebar\n                active={page || 'colonies'}\n                network={network}\n                user={user}\n              />\n            </div>\n            {network && wallet ? (\n              <div className={styles.content}>\n                <Router primary={false}>\n                  <Colonies\n                    path={\n                      page\n                        ? PAGE_DEVELOPER_PORTAL_DASHBOARD_COLONIES\n                        : PAGE_DEVELOPER_PORTAL_DASHBOARD\n                    }\n                    network={network}\n                    networkClient={networkClient}\n                    setUser={setUser}\n                    user={user}\n                    wallet={wallet}\n                  />\n                  <Contributions\n                    path={PAGE_DEVELOPER_PORTAL_DASHBOARD_CONTRIBUTIONS}\n                    network={network}\n                    user={user}\n                    wallet={wallet}\n                  />\n                  <Account\n                    path={PAGE_DEVELOPER_PORTAL_DASHBOARD_ACCOUNT}\n                    authenticate={authenticate}\n                    colonyClient={colonyClient}\n                    disconnect={disconnect}\n                    network={network}\n                    serverError={serverError}\n                    setUser={setUser}\n                    user={user}\n                    wallet={wallet}\n                  />\n                  <Admin\n                    path={PAGE_DEVELOPER_PORTAL_DASHBOARD_ADMIN}\n                    colonyClient={colonyClient}\n                    network={network}\n                    user={user}\n                  />\n                </Router>\n              </div>\n            ) : (\n              <div className={styles.loading}>\n                <SpinnerLoader\n                  appearance={{ theme: 'primary', size: 'huge' }}\n                />\n              </div>\n            )}\n          </>\n        )}\n      </main>\n    </>\n  );\n};\n\nDashboard.displayName = displayName;\n\nexport default Dashboard;\n","/* @flow */\n\nimport { compose, nest } from 'recompose';\nimport { injectIntl } from 'react-intl';\n\nimport DeveloperPortalLayout from '~layouts/DeveloperPortalLayout';\n\nimport Dashboard from './Dashboard.jsx';\n\nconst enhance = compose(injectIntl);\n\nexport default nest<{}>(DeveloperPortalLayout, enhance(Dashboard));\n","/* @flow */\n\nexport { default } from './Dashboard';\n"],"sourceRoot":""}