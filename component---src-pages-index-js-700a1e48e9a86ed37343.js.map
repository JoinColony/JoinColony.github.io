{"version":3,"sources":["webpack:///./src/modules/parts/components/SupportCta/SupportCta.jsx","webpack:///./src/modules/pages/components/Developers/CoreProductsItem/CoreProductsItem.jsx","webpack:///./src/modules/pages/components/Developers/CoreProducts/CoreProducts.jsx","webpack:///./src/modules/pages/components/Developers/HeroFeatureItem/HeroFeatureItem.jsx","webpack:///./src/modules/pages/components/Developers/Hero/Hero.jsx","webpack:///./src/modules/pages/components/Developers/OpenSourceItem/OpenSourceItem.jsx","webpack:///./src/modules/pages/components/Developers/OpenSource/OpenSource.jsx","webpack:///./src/modules/pages/components/Developers/Developers.jsx","webpack:///./src/modules/pages/components/Developers/Developers.js","webpack:///./src/pages/index.js","webpack:///./node_modules/core-js/modules/es6.string.starts-with.js","webpack:///./src/modules/parts/components/SEO/SEO.jsx","webpack:///./src/modules/parts/components/SEO/SEO.js","webpack:///./src/hoc/files/index.js","webpack:///./src/modules/parts/components/SEO/index.js"],"names":["MSG","defineMessages","sectionTitle","id","defaultMessage","SupportCta","react_default","a","createElement","className","styles","main","contentWrapper","Heading","appearance","size","theme","weight","text","iconRow","Link","iconItemLink","href","COLONY_DISCOURSE","Icon","name","title","COLONY_GITHUB","COLONY_GITTER_COLONYJS","displayName","docsLinkText","CoreProductsItem","_ref","_ref$project","project","description","entryPoint","logoSmall","repoUrl","Fragment","imageContainer","Image","alt","image","src","descriptionText","itemLink","arrow","sectionText","CoreProducts","locale","intl","projects","_2144333317","data","coreProjects","edges","map","projectEdge","transformProjectData","sort","_ref2","_ref3","nameARaw","nameBRaw","nameA","toLowerCase","nameB","gradientWrapper","sectionIntroContent","index_es","coreProductsRow","coreProductsItem","key","Developers_CoreProductsItem_CoreProductsItem","injectIntl","HeroFeatureItem","contentText","headingText","linkText","linkUrl","margin","heroFeatureTextContainer","heroFeatureText","heroFeatureLink","heroTitle","heroFeatureGetStartedTitle","heroFeatureGetStartedText","heroFeatureGetStartedLinkText","heroFeatureContributeTitle","heroFeatureContributeText","heroFeatureForumTitle","heroFeatureForumText","Hero","heroBackgroundImage","withPrefix","contentContainer","heroFeature","heroFeatureItem","Developers_HeroFeatureItem_HeroFeatureItem","PAGE_GET_STARTED_COLONYJS","OpenSourceItem","linkContainer","sectionIntroTitle","sectionIntroText","projectSortOrder","OpenSource","_1632122742","openSourceProjects","edge","indexOf","introSection","openSourceProductGrid","openSourceItem","Developers_OpenSourceItem_OpenSourceItem","pageDescription","pageTitle","Developers","formatMessage","SEO","Helmet","Developers_Hero_Hero","Developers_CoreProducts_CoreProducts","Developers_OpenSource_OpenSource","components_SupportCta_SupportCta","withBackground","enhance","compose","nest","DeveloperPortalLayout","Home","$export","__webpack_require__","toLength","context","$startsWith","P","F","startsWith","searchString","that","this","index","Math","min","arguments","length","undefined","search","String","call","slice","siteName","baseUrl","descriptionContent","descriptionValues","getAbsoluteImagePath","isDocPage","location","siteLogo","titleContent","titleValues","_ref$images","images","absolutePath","pathname","imagePaths","push","ogType","schemaOrgJSONLD","@context","@type","url","itemListElement","position","item","@id","author","headline","Helmet_default","content","imagePath","type","JSON","stringify","itemProp","property","BaseComponent","fromRenderProps","FileContext","Consumer","files","withLocation","defaultProps","withProps","withHandlers","d","__webpack_exports__","parts_components_SEO_SEO"],"mappings":"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","file":"component---src-pages-index-js-700a1e48e9a86ed37343.js","sourcesContent":["/* @flow */\nimport React from 'react';\nimport { defineMessages } from 'react-intl';\n\nimport Heading from '~core/Heading';\nimport Icon from '~core/Icon';\nimport Link from '~core/Link';\nimport {\n  COLONY_DISCOURSE,\n  COLONY_GITHUB,\n  COLONY_GITTER_COLONYJS,\n} from '~routes';\n\nimport styles from './SupportCta.module.css';\n\nconst MSG = defineMessages({\n  sectionTitle: {\n    id: 'parts.SupportCta.sectionTitle',\n    defaultMessage: 'Questions? Problems? Existential dilemmas? We can help!',\n  },\n});\n\nconst displayName = 'parts.SupportCta';\n\nconst SupportCta = () => (\n  <div className={styles.main}>\n    <div className={styles.contentWrapper}>\n      <Heading\n        appearance={{\n          size: 'large',\n          theme: 'primary',\n          weight: 'medium',\n        }}\n        text={MSG.sectionTitle}\n      />\n      <div className={styles.iconRow}>\n        <Link className={styles.iconItemLink} href={COLONY_DISCOURSE}>\n          <Icon name=\"social_discourse_devPortal\" title=\"Discourse\" />\n        </Link>\n        <Link className={styles.iconItemLink} href={COLONY_GITHUB}>\n          <Icon name=\"social_github_devPortal\" title=\"GitHub\" />\n        </Link>\n        <Link className={styles.iconItemLink} href={COLONY_GITTER_COLONYJS}>\n          <Icon name=\"social_gitter_devPortal\" title=\"Gitter\" />\n        </Link>\n      </div>\n    </div>\n  </div>\n);\n\nSupportCta.displayName = displayName;\n\nexport default SupportCta;\n","/* @flow */\nimport React from 'react';\nimport { defineMessages } from 'react-intl';\n\nimport type { Project } from '~types';\n\nimport Heading from '~core/Heading';\nimport Image from '~core/Image';\nimport Link from '~core/Link';\n\nimport styles from './CoreProductsItem.module.css';\n\nconst MSG = defineMessages({\n  docsLinkText: {\n    id: 'pages.Developers.CoreProductsItem.docsLinkText',\n    defaultMessage: 'Docs',\n  },\n});\n\ntype Props = {|\n  project: Project,\n|};\n\nconst displayName = 'pages.Developers.CoreProductsItem';\n\nconst CoreProductsItem = ({\n  project: { description, entryPoint, logoSmall, name, repoUrl },\n}: Props) => (\n  <>\n    <div>\n      <Link href={entryPoint}>\n        <div className={styles.imageContainer}>\n          {/* @TODO get dark logo for hover state, link image to docs */}\n          <Image\n            alt={name}\n            className={styles.image}\n            project={name}\n            src={logoSmall}\n          />\n        </div>\n      </Link>\n      <Heading\n        appearance={{ theme: 'invert', size: 'medium', weight: 'medium' }}\n        text={name}\n      />\n      <p className={styles.descriptionText}>{description}</p>\n    </div>\n    <p>\n      <Link\n        className={styles.itemLink}\n        href={entryPoint}\n        text={MSG.docsLinkText}\n      />\n      <Link\n        arrow=\"right\"\n        className={styles.itemLink}\n        href={repoUrl}\n        text=\"GitHub\"\n      />\n    </p>\n  </>\n);\n\nCoreProductsItem.displayName = displayName;\n\nexport default CoreProductsItem;\n","/* @flow */\nimport type { IntlShape } from 'react-intl';\n\nimport React from 'react';\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport type { Project } from '~types';\n\nimport Heading from '~core/Heading';\nimport { transformProjectData } from '~utils/docs';\n\nimport CoreProductsItem from '../CoreProductsItem';\n\nimport styles from './CoreProducts.module.css';\n\nconst MSG = defineMessages({\n  sectionTitle: {\n    id: 'pages.Developers.CoreProducts.sectionTitle',\n    defaultMessage: 'Colony Core',\n  },\n  sectionText: {\n    id: 'pages.Developers.CoreProducts.sectionText',\n    defaultMessage:\n      // eslint-disable-next-line max-len\n      'Engage with Colony to manage work, shared funds, and reputation. Integrate directly with the smart contracts, use colonyJS to build Colony into your dapp, or fire up the colonyStarter for boilerplates and implementation examples.',\n  },\n});\n\ntype Props = {|\n  /** Injected via `injectIntl` */\n  intl: IntlShape,\n|};\n\nconst displayName = 'pages.Developers.CoreProducts';\n\nconst CoreProducts = ({ intl: { locale } }: Props) => {\n  const projectQueryData = useStaticQuery(graphql`\n    {\n      ...coreProjectsFragment\n    }\n  `);\n\n  const projects: Array<Project> = projectQueryData.coreProjects.edges\n    .map(projectEdge => transformProjectData(projectEdge, locale))\n    // Order the projects alphabetically\n    .sort(({ name: nameARaw }, { name: nameBRaw }) => {\n      const nameA = nameARaw.toLowerCase();\n      const nameB = nameBRaw.toLowerCase();\n      if (nameA === nameB) {\n        return 0;\n      }\n      return nameA < nameB ? -1 : 1;\n    });\n\n  return (\n    <div className={styles.main}>\n      <div className={styles.gradientWrapper}>\n        <div className={styles.sectionIntroContent}>\n          <Heading\n            appearance={{ size: 'large', theme: 'invert', weight: 'medium' }}\n            text={MSG.sectionTitle}\n          />\n          <p>\n            <FormattedMessage {...MSG.sectionText} />\n          </p>\n        </div>\n        <div className={styles.coreProductsRow}>\n          {projects.map(project => (\n            <div className={styles.coreProductsItem} key={project.name}>\n              <CoreProductsItem project={project} />\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nCoreProducts.displayName = displayName;\n\nexport default injectIntl(CoreProducts);\n","/* @flow */\nimport type { MessageDescriptor } from 'react-intl';\n\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport Heading from '~core/Heading';\nimport Link from '~core/Link';\n\nimport styles from './HeroFeatureItem.module.css';\n\ntype Props = {|\n  contentText: MessageDescriptor,\n  headingText: MessageDescriptor,\n  linkText: MessageDescriptor | string,\n  linkUrl: string,\n|};\n\nconst displayName = 'pages.Developers.HeroFeatureItem';\n\nconst HeroFeatureItem = ({\n  contentText,\n  headingText,\n  linkText,\n  linkUrl,\n}: Props) => (\n  <>\n    <div>\n      <div>\n        <Heading\n          appearance={{\n            margin: 'none',\n            size: 'medium',\n            theme: 'invert',\n            weight: 'medium',\n          }}\n          text={headingText}\n        />\n      </div>\n      <div className={styles.heroFeatureTextContainer}>\n        <p className={styles.heroFeatureText}>\n          <FormattedMessage {...contentText} />\n        </p>\n      </div>\n    </div>\n    <div>\n      <Link\n        arrow=\"right\"\n        className={styles.heroFeatureLink}\n        href={linkUrl}\n        text={linkText}\n      />\n    </div>\n  </>\n);\n\nHeroFeatureItem.displayName = displayName;\n\nexport default HeroFeatureItem;\n","/* @flow */\nimport React from 'react';\nimport { defineMessages } from 'react-intl';\nimport { withPrefix } from 'gatsby';\n\nimport Heading from '~core/Heading';\nimport Image from '~core/Image';\nimport {\n  COLONY_DISCOURSE,\n  COLONY_GITHUB,\n  PAGE_GET_STARTED_COLONYJS,\n} from '~routes';\n\nimport HeroFeatureItem from '../HeroFeatureItem';\n\nimport styles from './Hero.module.css';\n\nconst MSG = defineMessages({\n  heroTitle: {\n    id: 'pages.Developers.heroTitle',\n    defaultMessage: 'Build with Colony',\n  },\n  heroFeatureGetStartedTitle: {\n    id: 'pages.Developers.heroFeatureGetStartedTitle',\n    defaultMessage: 'Get Started',\n  },\n  heroFeatureGetStartedText: {\n    id: 'pages.Developers.heroFeatureGetStartedText',\n    defaultMessage:\n      'Build incentives and reputation into your app, firm, or community.',\n  },\n  heroFeatureGetStartedLinkText: {\n    id: 'pages.Developers.heroFeatureGetStartedLinkText',\n    defaultMessage: 'Build',\n  },\n  heroFeatureContributeTitle: {\n    id: 'pages.Developers.heroFeatureContributeTitle',\n    defaultMessage: 'Contribute',\n  },\n  heroFeatureContributeText: {\n    id: 'pages.Developers.heroFeatureContributeText',\n    defaultMessage:\n      // eslint-disable-next-line max-len\n      'We believe in being open. All of our projects are open-source and accepting contributions.',\n  },\n  heroFeatureForumTitle: {\n    id: 'pages.Developers.heroFeatureForumTitle',\n    defaultMessage: 'Discuss',\n  },\n  heroFeatureForumText: {\n    id: 'pages.Developers.heroFeatureForumText',\n    defaultMessage:\n      'Join in the discussion and collaborate with our community of builders.',\n  },\n});\n\nconst displayName = 'pages.Developers.Hero';\n\nconst Hero = () => (\n  <div className={styles.main}>\n    <div className={styles.heroBackgroundImage}>\n      <Image\n        alt={MSG.heroTitle}\n        src={withPrefix('img/devPortal_banner_bg.svg')}\n      />\n    </div>\n    <div className={styles.contentContainer}>\n      <div className={styles.heroTitle}>\n        <Heading\n          appearance={{ size: 'huge', theme: 'invert', weight: 'medium' }}\n          text={MSG.heroTitle}\n        />\n      </div>\n      <div className={styles.heroFeature}>\n        <div className={styles.heroFeatureItem}>\n          <HeroFeatureItem\n            contentText={MSG.heroFeatureGetStartedText}\n            headingText={MSG.heroFeatureGetStartedTitle}\n            linkText={MSG.heroFeatureGetStartedLinkText}\n            linkUrl={PAGE_GET_STARTED_COLONYJS}\n          />\n        </div>\n        <div className={styles.heroFeatureItem}>\n          <HeroFeatureItem\n            contentText={MSG.heroFeatureContributeText}\n            headingText={MSG.heroFeatureContributeTitle}\n            linkText=\"GitHub\"\n            linkUrl={COLONY_GITHUB}\n          />\n        </div>\n        <div className={styles.heroFeatureItem}>\n          <HeroFeatureItem\n            contentText={MSG.heroFeatureForumText}\n            headingText={MSG.heroFeatureForumTitle}\n            linkText=\"Discourse\"\n            linkUrl={COLONY_DISCOURSE}\n          />\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nHero.displayName = displayName;\n\nexport default Hero;\n","/* @flow */\nimport React from 'react';\nimport { defineMessages } from 'react-intl';\n\nimport type { Project } from '~types';\n\nimport Heading from '~core/Heading';\nimport Image from '~core/Image';\nimport Link from '~core/Link';\n\nimport styles from './OpenSourceItem.module.css';\n\nconst MSG = defineMessages({\n  docsLinkText: {\n    id: 'pages.Developers.OpenSourceItem.docsLinkText',\n    defaultMessage: 'Docs',\n  },\n});\n\ntype Props = {|\n  project: Project,\n|};\n\nconst displayName = 'pages.Developers.OpenSourceItem';\n\nconst OpenSourceItem = ({\n  project: { description, entryPoint, logoSmall, name, repoUrl },\n}: Props) => (\n  <div className={styles.main}>\n    <Link href={entryPoint}>\n      <div className={styles.imageContainer}>\n        <Image\n          alt={name}\n          className={styles.image}\n          project={name}\n          src={logoSmall}\n        />\n      </div>\n    </Link>\n    <div className={styles.contentContainer}>\n      <div>\n        <Heading\n          appearance={{\n            margin: 'none',\n            size: 'medium',\n            theme: 'invert',\n            weight: 'medium',\n          }}\n          text={name}\n        />\n        <div className={styles.description}>\n          <p>{description}</p>\n        </div>\n      </div>\n      <div className={styles.linkContainer}>\n        <p>\n          <Link\n            className={styles.itemLink}\n            href={entryPoint}\n            text={MSG.docsLinkText}\n          />\n          <Link\n            arrow=\"right\"\n            className={styles.itemLink}\n            href={repoUrl}\n            text=\"GitHub\"\n          />\n        </p>\n      </div>\n    </div>\n  </div>\n);\n\nOpenSourceItem.displayName = displayName;\n\nexport default OpenSourceItem;\n","/* @flow */\nimport type { IntlShape } from 'react-intl';\n\nimport React from 'react';\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport type { Project } from '~types';\n\nimport Heading from '~core/Heading';\nimport { transformProjectData } from '~utils/docs';\n\nimport OpenSourceItem from '../OpenSourceItem';\n\nimport styles from './OpenSource.module.css';\n\nconst MSG = defineMessages({\n  sectionIntroTitle: {\n    id: 'pages.Developers.OpenSource.sectionIntroTitle',\n    defaultMessage: 'Open Source Tools',\n  },\n  sectionIntroText: {\n    id: 'pages.Developers.OpenSource.sectionIntroText',\n    defaultMessage: 'Standalone tools for Ethereum developers.',\n  },\n});\n\ntype Props = {|\n  /** Injected via `injectIntl` */\n  intl: IntlShape,\n|};\n\nconst projectSortOrder: Array<string> = [\n  'budgetBox',\n  'tailor',\n  'pinion',\n  'trufflepig',\n  'purser',\n  'solcover',\n];\n\nconst displayName = 'pages.Developers.OpenSource';\n\nconst OpenSource = ({ intl: { locale } }: Props) => {\n  const projectQueryData = useStaticQuery(graphql`\n    {\n      ...openSourceProjectsFragment\n    }\n  `);\n\n  const projects: Array<Project> = projectQueryData.openSourceProjects.edges\n    .map(edge => transformProjectData(edge, locale))\n    // Sort projects by order defined in above array\n    .sort(\n      ({ name: nameA }, { name: nameB }) =>\n        projectSortOrder.indexOf(nameA) - projectSortOrder.indexOf(nameB),\n    );\n\n  return (\n    <div className={styles.main}>\n      <div className={styles.introSection}>\n        <Heading\n          appearance={{\n            margin: 'double',\n            size: 'large',\n            theme: 'invert',\n            weight: 'medium',\n          }}\n          text={MSG.sectionIntroTitle}\n        />\n        <p>\n          <FormattedMessage {...MSG.sectionIntroText} />\n        </p>\n      </div>\n      <div className={styles.openSourceProductGrid}>\n        {projects.map(project => (\n          <div className={styles.openSourceItem} key={project.name}>\n            <OpenSourceItem project={project} />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nOpenSource.displayName = displayName;\n\nexport default injectIntl(OpenSource);\n","/* @flow */\nimport type { IntlShape } from 'react-intl';\n\nimport React from 'react';\nimport { defineMessages } from 'react-intl';\nimport { Helmet } from 'react-helmet';\n\nimport SEO from '~parts/SEO';\nimport SupportCta from '~parts/SupportCta';\n\nimport CoreProducts from './CoreProducts';\nimport Hero from './Hero';\nimport OpenSource from './OpenSource';\n\nimport styles from './Developers.module.css';\n\nconst MSG = defineMessages({\n  pageDescription: {\n    id: 'pages.Developers.pageDescription',\n    defaultMessage: `Just like the organizations that will run on Colony,\neach component in the colony stack is the product of collaboration and open\nengagement. Here, you'll find the up-to-date documentation for all of the\nColony projects.`,\n  },\n  pageTitle: {\n    id: 'pages.Developers.pageTitle',\n    defaultMessage: 'Developer Portal',\n  },\n});\n\ntype Props = {|\n  /** Injected via `injectIntl` */\n  intl: IntlShape,\n|};\n\nconst displayName = 'pages.Developers';\n\nconst Developers = ({ intl: { formatMessage } }: Props) => {\n  const title = formatMessage(MSG.pageTitle);\n  return (\n    <>\n      <SEO description={MSG.pageDescription} title={title} />\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      <main className={styles.main}>\n        <Hero />\n        <CoreProducts />\n        <OpenSource />\n        <SupportCta withBackground />\n      </main>\n    </>\n  );\n};\n\nDevelopers.displayName = displayName;\n\nexport default Developers;\n","/* @flow */\nimport { compose, nest } from 'recompose';\nimport { injectIntl } from 'react-intl';\n\nimport DeveloperPortalLayout from '~layouts/DeveloperPortalLayout';\n\nimport Developers from './Developers.jsx';\n\nconst enhance = compose(injectIntl);\n\nexport default nest<{}>(DeveloperPortalLayout, enhance(Developers));\n","/* @flow */\nimport { createElement } from 'react';\n\nimport Developers from '~pages/Developers';\n\nconst Home = () => createElement(Developers);\n\nexport default Home;\n","// 21.1.3.18 String.prototype.startsWith(searchString [, position ])\n'use strict';\nvar $export = require('./_export');\nvar toLength = require('./_to-length');\nvar context = require('./_string-context');\nvar STARTS_WITH = 'startsWith';\nvar $startsWith = ''[STARTS_WITH];\n\n$export($export.P + $export.F * require('./_fails-is-regexp')(STARTS_WITH), 'String', {\n  startsWith: function startsWith(searchString /* , position = 0 */) {\n    var that = context(this, searchString, STARTS_WITH);\n    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));\n    var search = String(searchString);\n    return $startsWith\n      ? $startsWith.call(that, search, index)\n      : that.slice(index, index + search.length) === search;\n  }\n});\n","/* @flow */\nimport React from 'react';\nimport { defineMessages } from 'react-intl';\nimport Helmet from 'react-helmet';\nimport { withPrefix } from 'gatsby';\n\nimport type { OutProps as Props } from './types';\n\nconst MSG = defineMessages({\n  siteName: {\n    id: 'parts.SEO.siteName',\n    defaultMessage: 'Colony Open Source Docs',\n  },\n});\n\nconst displayName = 'parts.SEO';\n\nconst SEO = ({\n  baseUrl,\n  description: descriptionContent,\n  descriptionValues,\n  getAbsoluteImagePath,\n  intl: { formatMessage },\n  isDocPage,\n  location,\n  siteLogo,\n  title: titleContent,\n  titleValues,\n  images = [siteLogo],\n}: Props) => {\n  const absolutePath = location && `${baseUrl}${withPrefix(location.pathname)}`;\n  const imagePaths = images.map(getAbsoluteImagePath);\n  if (imagePaths.indexOf(siteLogo) < 0) imagePaths.push(siteLogo);\n  const ogType = location && location.pathname === '/' ? 'website' : 'article';\n  const siteName = formatMessage(MSG.siteName);\n  const title =\n    typeof titleContent === 'string'\n      ? titleContent\n      : formatMessage(titleContent, titleValues);\n  const description =\n    typeof descriptionContent === 'string'\n      ? descriptionContent\n      : formatMessage(descriptionContent, descriptionValues);\n\n  const schemaOrgJSONLD = [\n    {\n      '@context': 'http://schema.org',\n      '@type': 'WebSite',\n      url: baseUrl,\n      name: siteName,\n    },\n  ];\n\n  if (isDocPage) {\n    schemaOrgJSONLD.push(\n      {\n        '@context': 'http://schema.org',\n        '@type': 'BreadcrumbList',\n        itemListElement: [\n          {\n            '@type': 'ListItem',\n            position: 1,\n            item: {\n              '@id': absolutePath,\n              name: title,\n              image: imagePaths[0],\n            },\n          },\n        ],\n      },\n      {\n        '@context': 'http://schema.org',\n        '@type': 'BlogPosting',\n        author: 'Colony',\n        url: absolutePath,\n        name: title,\n        headline: title,\n        image: {\n          '@type': 'ImageObject',\n          url: imagePaths[0],\n        },\n        description,\n      },\n    );\n  }\n\n  return (\n    <Helmet>\n      {/* General tags */}\n      <meta name=\"description\" content={description} />\n      {imagePaths.map(imagePath => (\n        <meta name=\"image\" content={imagePath} key={imagePath} />\n      ))}\n\n      {/* Schema.org tags */}\n      <script type=\"application/ld+json\">\n        {JSON.stringify(schemaOrgJSONLD)}\n      </script>\n\n      {/* Google+ tags */}\n      <meta itemProp=\"name\" content={title} />\n      <meta itemProp=\"description\" content={description} />\n      {imagePaths.map(imagePath => (\n        <meta itemProp=\"image\" content={imagePath} key={imagePath} />\n      ))}\n\n      {/* OpenGraph tags */}\n      <meta property=\"og:url\" content={absolutePath} />\n      <meta property=\"og:type\" content={ogType} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={description} />\n      <meta property=\"og:site_name\" content={siteName} />\n      {imagePaths.map(imagePath => (\n        <meta property=\"og:image\" content={imagePath} key={imagePath} />\n      ))}\n\n      {/* Twitter Card tags */}\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:site\" content=\"@joincolony\" />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={description} />\n      {imagePaths.map(imagePath => (\n        <meta name=\"twitter:image\" content={imagePath} key={imagePath} />\n      ))}\n    </Helmet>\n  );\n};\n\nSEO.displayName = displayName;\n\nexport default SEO;\n","/* @flow */\nimport type { HOC } from 'recompose';\n\nimport { injectIntl } from 'react-intl';\nimport { compose, defaultProps, withHandlers, withProps } from 'recompose';\n\nimport { withFileContext } from '~hoc/files';\nimport { withLocation } from '~hoc/location';\n\nimport type { InProps } from './types';\n\nimport SEO from './SEO.jsx';\n\nconst enhance: HOC<*, InProps> = compose(\n  injectIntl,\n  withFileContext(),\n  withLocation(),\n  defaultProps({\n    isDocPage: false,\n  }),\n  withProps(() => ({\n    baseUrl: 'https://docs.colony.io',\n  })),\n  withHandlers({\n    getAbsoluteImagePath: ({ baseUrl, files, project }) => (\n      imagePath: string,\n    ) => {\n      return imagePath.startsWith('http')\n        ? imagePath\n        : `${baseUrl}${\n            files && files[`${project}/${imagePath}`]\n              ? files[`${project}/${imagePath}`]\n              : imagePath\n          }`;\n    },\n  }),\n  withProps(({ getAbsoluteImagePath }) => ({\n    siteLogo: getAbsoluteImagePath('/img/colonyDocs_combomark.svg'),\n  })),\n);\n\nexport default enhance(SEO);\n","/* @flow */\nimport type { ComponentType } from 'react';\n\nimport { fromRenderProps } from 'recompose';\n\nimport FileContext from '~context/FileContext';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const withFileContext = () => (BaseComponent: ComponentType<Object>) =>\n  // $FlowFixMe\n  fromRenderProps(FileContext.Consumer, files => ({ files }))(BaseComponent);\n","/* @flow */\nexport { default } from './SEO';\n"],"sourceRoot":""}