{"version":3,"sources":["webpack:///./src/modules/core/components/Link/Link.jsx","webpack:///./src/modules/core/components/Link/Link.js","webpack:///./src/modules/core/components/Link/index.js","webpack:///./src/modules/core/components/Heading/Heading.jsx","webpack:///./src/modules/core/components/Heading/index.js","webpack:///./src/utils/css/index.js","webpack:///./src/routes/index.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/modules/core/components/Icon/Icon.jsx","webpack:///./src/modules/core/components/Icon/index.js","webpack:///./src/modules/core/components/Button/Button.jsx","webpack:///./src/modules/core/components/Button/index.js","webpack:///./src/utils/docs/index.js","webpack:///./src/modules/core/components/Image/Image.jsx","webpack:///./src/modules/core/components/Image/index.js","webpack:///./src/utils/strings/index.js","webpack:///./src/context/FileContext.js","webpack:///./i18nConfig.js","webpack:///./src/hoc/location/index.js","webpack:///./.cache/public-page-renderer.js","webpack:///./src/modules/layouts/components/GlobalLayout/GlobalLayout.jsx","webpack:///./src/modules/layouts/components/GlobalLayout/GlobalLayout.js","webpack:///./src/modules/layouts/components/GlobalLayout/index.js","webpack:///./src/modules/core/components/Search/Search.jsx","webpack:///./src/docsearch-settings.js","webpack:///./src/modules/core/components/Search/index.js","webpack:///./.cache/public-page-renderer-prod.js"],"names":["Link","_ref","arrow","children","className","href","formatMessage","intl","isInternal","text","persistLocale","textValues","props","transformUrl","objectWithoutPropertiesLoose_default","linkContent","classNames","styles","main","react_default","a","createElement","gatsby_browser_entry","Object","assign","to","displayName","enhance","compose","injectIntl","defaultProps","withProps","url","locale","test","isOnPageAnchor","shouldPersistLocale","DEFAULT_LOCALE","rel","undefined","target","__webpack_require__","d","__webpack_exports__","core_components_Link_Link","Heading","_ref$appearance","appearance","size","tagName","HeadingElement","huge","large","medium","mediumLarge","normal","small","tiny","value","getChildrenOrText","title","getMainClasses","components_Heading_Heading","styleObject","state","_appearance","theme","modifiers","_babel_runtime_helpers_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_3___default","styleArray","themeClass","capitalize","camelcase","push","modifierClasses","keys","map","key","filter","i","stateClasses","concat","join","PAGE_INDEX","PAGE_GET_STARTED_COLONYJS","PAGE_DEVELOPER_PORTAL","PAGE_GET_INVOLVED","PAGE_LOGIN","PAGE_PRIVACY_POLICY","PAGE_TERMS_SERVICE","PAGE_BUG_BOUNTY","COLONY_BLOG","COLONY_DISCOURSE","COLONY_DISCOURSE_SUPPORT","COLONY_GITHUB","COLONY_GITTER","COLONY_GITTER_COLONYJS","COLONY_REDDIT","COLONY_TWITTER","COLONY_WEBSITE","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","StaticQueryContext","React","createContext","Consumer","staticQueryData","data","query","render","propTypes","PropTypes","object","string","isRequired","func","icons","iconNames","reduce","prev","current","withPrefix","Icon","name","titleValues","_ref$viewBox","viewBox","viewBoxOverride","icon","titleText","role","aria-label","xlinkHref","components_Icon_Icon","Button","linkTo","_ref$type","type","rest","buttonContent","components_Button_Button","orderDocs","b","frontmatter","order","getSectionsForLocale","project","sectionOrderForLocale","sectionOrder","sectionTranslations","localeTranslatedSectionConfig","find","sections","_ref2","docs","some","_ref3","fields","sort","indexOf","slug","bind","getDocsForLocale","doc","getProjectEntryPoint","docSections","length","firstSectionDocs","docsForLocale","firstDoc","transformProjectData","edge","edgeNode","node","entryPoint","Image","alt","altValues","src","altText","FileContext","files","components_Image_Image","word","charAt","toUpperCase","slice","CONFIGURED_LOCALES","module","exports","withLocation","_reach_router__WEBPACK_IMPORTED_MODULE_0__","recompose__WEBPACK_IMPORTED_MODULE_1__","BaseComponent","fromRenderProps","Location","locationProps","m","require","default","localeMessages","en","messages","enMessages","enLocaleData","configuredLocalesData","accumulator","configKey","addLocaleData","configuredMessageLocales","localesWithoutMessages","missingLocalesString","localesString","console","warn","checkLocaleConfig","GlobalLayout","location","getLocaleString","pathname","split","getMessagesForLocale","_2396874169","Fragment","Helmet_default","Provider","edges","next","_Object$assign","sourceInstanceName","relativePath","publicURL","index_es","defaultLocale","layouts_components_GlobalLayout_GlobalLayout","MSG","defineMessages","defaultPlaceholderText","id","defaultMessage","Search","_this","_Component","call","this","isEnabled","focusInput","inputRef","focus","createRef","componentDidMount","window","inputId","e","then","t","docsearch","apiKey","indexName","inputSelector","setState","_this$props","placeholderText","placeholderTextValues","placeholderTextContent","isQuickSearch","searchInput","placeholder","ref","onClick","tabIndex","quickSearchIcon","Component","components_Search_Search","ProdPageRenderer","pageResources","loader","getResourcesForPathnameSync","InternalPageRenderer","json","shape"],"mappings":"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","file":"2-ff5aa8125b451956839a.js","sourcesContent":["/* @flow */\nimport React from 'react';\nimport { Link as GatsbyLink } from 'gatsby';\n\nimport type { OutProps } from './types';\n\nimport styles from './Link.module.css';\n\nconst displayName = 'Link';\n\nconst Link = ({\n  arrow,\n  children,\n  className,\n  href,\n  intl: { formatMessage },\n  isInternal,\n  persistLocale,\n  text,\n  textValues,\n  transformUrl,\n  ...props\n}: OutProps) => {\n  const linkText =\n    typeof text === 'string' ? text : text && formatMessage(text, textValues);\n  const linkContent = linkText || children || null;\n  const classNames = className ? `${styles.main} ${className}` : styles.main;\n  return isInternal ? (\n    <GatsbyLink className={classNames} to={href} {...props}>\n      <span className={styles[arrow]}>{linkContent}</span>\n    </GatsbyLink>\n  ) : (\n    <a className={classNames} href={href} {...props}>\n      <span className={styles[arrow]}>{linkContent}</span>\n    </a>\n  );\n};\n\nLink.displayName = displayName;\n\nexport default Link;\n","/* @flow */\nimport type { HOC } from 'recompose';\n\nimport { compose, defaultProps, withProps } from 'recompose';\nimport { injectIntl } from 'react-intl';\n\nimport { DEFAULT_LOCALE } from '~i18nConfig';\n\nimport type { InProps } from './types';\n\nimport Link from './Link.jsx';\n\nconst enhance: HOC<*, InProps> = compose(\n  injectIntl,\n  defaultProps({ persistLocale: true }),\n  withProps(({ href: url, intl: { locale }, persistLocale, transformUrl }) => {\n    /*\n     * A url is only considered to be \"internal\" if it starts with one slash.\n     */\n    const isInternal = /^\\/(?!\\/)/.test(url);\n    /*\n     * On-page anchors are considered \"external\" by Gatsby.\n     */\n    const isOnPageAnchor = /^#(?!\\/)/.test(url);\n\n    let href: string =\n      isInternal && typeof transformUrl === 'function'\n        ? transformUrl(url)\n        : url;\n\n    const shouldPersistLocale: boolean =\n      isInternal && locale && locale !== DEFAULT_LOCALE;\n\n    if (persistLocale && shouldPersistLocale) {\n      href = `/${locale}${href}`;\n    }\n\n    return {\n      href,\n      isInternal,\n      rel: !isOnPageAnchor ? 'noopener noreferrer' : undefined,\n      target: !isOnPageAnchor ? '_blank' : undefined,\n    };\n  }),\n);\n\nexport default enhance(Link);\n","/* @flow */\nexport { default } from './Link';\n","/* @flow */\nimport type { Node } from 'react';\nimport type { IntlShape, MessageDescriptor } from 'react-intl';\n\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\n\nimport { getMainClasses } from '~utils/css';\nimport { getChildrenOrText } from '~utils/strings';\n\nimport styles from './Heading.module.css';\n\nexport type Appearance = {|\n  theme?: 'dark' | 'light' | 'invert' | 'primary' | 'grey',\n  margin?: 'none' | 'tiny' | 'small' | 'medium' | 'large' | 'double',\n  size?:\n    | 'tiny'\n    | 'small'\n    | 'normal'\n    | 'medium'\n    | 'mediumLarge'\n    | 'large'\n    | 'huge',\n  weight?: 'thin' | 'medium' | 'bold',\n|};\n\ntype ValidTagNames = 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';\n\ntype Props = {\n  /** Appearance object */\n  appearance?: Appearance,\n  /** Used to extend the functionality of the component. This will not generate a title attribute on the element. */\n  children?: Node,\n  /** Injected by `injectIntl` */\n  intl: IntlShape,\n  /** String that will hard set the heading element to render */\n  tagName?: ValidTagNames,\n  /** A string or a `MessageDescriptor` that make up the headings's text */\n  text?: MessageDescriptor | string,\n  /** Values for text (react-intl interpolation) */\n  textValues?: Object,\n};\n\nconst displayName = 'Heading';\n\nconst Heading = ({\n  appearance = { size: 'huge' },\n  children,\n  intl,\n  tagName,\n  text,\n  textValues,\n  ...props\n}: Props) => {\n  const { size } = appearance;\n  const HeadingElement =\n    tagName ||\n    {\n      huge: 'h1',\n      large: 'h2',\n      medium: 'h3',\n      mediumLarge: 'h3',\n      normal: 'h4',\n      small: 'h5',\n      tiny: 'h6',\n    }[size || 'huge'];\n  const value = getChildrenOrText(children, text, textValues, intl);\n  return (\n    <HeadingElement\n      title={typeof value === 'string' ? value : undefined}\n      className={getMainClasses(appearance, styles)}\n      {...props}\n    >\n      {value}\n    </HeadingElement>\n  );\n};\n\nHeading.displayName = displayName;\n\nexport default injectIntl(Heading);\n","/* @flow */\nexport { default } from './Heading.jsx';\n\nexport * from './Heading.jsx';\n","/* @flow */\n/* eslint-disable import/prefer-default-export */\nimport camelcase from 'camelcase';\n\nimport { capitalize } from '../strings';\n\n/**\n * This function maps an appearance object onto CSS modules classes\n * The theme replaces the main class, the others will be treated as modifiers for the main class.\n * Example:\n *\n * appearance={{ theme: 'foo', colorSchema: 'dark', direction: 'horizontal' }}\n * yields\n * Component_themeFoo_xxx Component_colorSchemaDark_xxx Component_directionHorizontal_xxx\n *\n * appearance={{ colorSchema: 'dark', direction: 'horizontal' }}\n * yields\n * Component_main_xxx Component_colorSchemaDark_xxx Component_directionHorizontal_xxx\n *\n * @method getMainClasses\n *\n * @param {object} appearance Appearance object\n * @param {styleObject} CSS modules styles object\n *\n * @return {string} The composed class names string\n */\nexport const getMainClasses = (\n  appearance: Object = {},\n  styleObject: { [string]: string } = {},\n  state: { [string]: boolean } = {},\n) => {\n  const { theme, ...modifiers } = appearance;\n  const styleArray = [];\n  if (theme) {\n    const themeClass = `theme${capitalize(camelcase(theme))}`;\n    styleArray.push(styleObject[themeClass]);\n  } else {\n    styleArray.push(styleObject.main);\n  }\n  const modifierClasses = Object.keys(modifiers)\n    .map(key =>\n      modifiers[key]\n        ? styleObject[`${key}${capitalize(camelcase(modifiers[key]))}`]\n        : undefined,\n    )\n    .filter(i => !!i);\n  const stateClasses = Object.keys(state)\n    .map(key =>\n      state[key] ? styleObject[`state${capitalize(camelcase(key))}`] : '',\n    )\n    .filter(i => !!i);\n  return [...styleArray, ...modifierClasses, ...stateClasses].join(' ');\n};\n","/* @flow */\n/*\n * Pages\n */\nexport const PAGE_INDEX = '/';\nexport const PAGE_GET_STARTED_COLONYJS = '/colonyjs/intro-get-started';\nexport const PAGE_DEVELOPER_PORTAL = PAGE_INDEX;\nexport const PAGE_GET_INVOLVED = '/get-involved';\nexport const PAGE_LOGIN = '/login';\nexport const PAGE_MEDIA_KIT = '/media-kit';\nexport const PAGE_PRIVACY_POLICY = 'https://colony.io/terms/#privacy-policy';\nexport const PAGE_TERMS_SERVICE = 'https://colony.io/terms/';\nexport const PAGE_BUG_BOUNTY = '/colonynetwork/bug-bounty-program-overview';\n\n/*\n * Absolute\n */\nexport const COLONY_BLOG = 'https://blog.colony.io';\nexport const COLONY_DISCOURSE = 'https://build.colony.io';\nexport const COLONY_DISCOURSE_SUPPORT = `${COLONY_DISCOURSE}/c/support`;\nexport const COLONY_GITHUB = 'https://github.com/JoinColony';\nexport const COLONY_GITTER = 'https://gitter.im/JoinColony';\nexport const COLONY_GITTER_COLONYJS = `${COLONY_GITTER}/colonyJS`;\nexport const COLONY_REDDIT = 'https://www.reddit.com/r/joincolony/';\nexport const COLONY_TWITTER = 'https://twitter.com/joincolony';\nexport const COLONY_WEBSITE = 'https://colony.io';\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","/* @flow */\nimport type { IntlShape, MessageDescriptor } from 'react-intl';\n\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { withPrefix } from 'gatsby';\n\nimport iconNames from './icons.json';\n\ntype Props = {|\n  /** Standard className */\n  className?: string,\n  /** Injected by `injectIntl` */\n  intl: IntlShape,\n  /** Name of the icon (all available names found in `icons.json`) */\n  name: string,\n  /** Standard html title attribute. Can be a string or a `messageDescriptor` */\n  title: MessageDescriptor | string,\n  /** Values for loading title (react-intl interpolation) */\n  titleValues?: Object,\n  /** Override the default viewBox */\n  viewBox?: string,\n|};\n\nconst getIcons = (map: Array<string>) =>\n  map.reduce((prev, current) => {\n    // eslint-disable-next-line no-param-reassign\n    prev[current] = withPrefix(`/img/${current}.svg#${current}`);\n    return prev;\n  }, {});\n\nconst icons = getIcons(iconNames);\n\nconst displayName = 'Icon';\n\nconst Icon = ({\n  className,\n  intl: { formatMessage },\n  name,\n  title,\n  titleValues,\n  viewBox: viewBoxOverride = '0 0 30 30',\n}: Props) => {\n  const icon = icons[name];\n  const titleText =\n    typeof title === 'string' ? title : formatMessage(title, titleValues);\n  return (\n    <i className={className} title={titleText}>\n      <svg viewBox={viewBoxOverride} role=\"img\" aria-label={titleText}>\n        <title>{titleText}</title>\n        <use xlinkHref={icon} />\n      </svg>\n    </i>\n  );\n};\n\nIcon.displayName = displayName;\n\nexport default injectIntl(Icon);\n","/* @flow */\nexport { default } from './Icon.jsx';\n","/* @flow */\nimport type { Node } from 'react';\nimport type { IntlShape, MessageDescriptor } from 'react-intl';\n\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\n\nimport Link from '~core/Link';\nimport { getMainClasses } from '~utils/css';\n\nimport styles from './Button.module.css';\n\ntype Appearance = {\n  theme?: 'primary' | 'primaryHollow' | 'reset',\n  padding?: 'small',\n};\n\ntype Props = {\n  /** Appearance object */\n  appearance?: Appearance,\n  /** `children` to render (only works if `text` is not set) */\n  children?: Node,\n  /** Overwriting class name(s). Setting this will overwrite the `appearance` object */\n  className?: string,\n  /** Injected by `injectIntl` */\n  intl: IntlShape,\n  /** Use a link instead of a button. Like `@reach/router`'s `to` property */\n  linkTo?: string,\n  /** A string or a `messageDescriptor` that make up the button's text label */\n  text?: MessageDescriptor | string,\n  /** Values for loading text (react-intl interpolation) */\n  textValues?: Object,\n  /** Standard html title attribute. Can be a string or a `messageDescriptor` */\n  title?: MessageDescriptor | string,\n  /** Values for loading title (react-intl interpolation) */\n  titleValues?: Object,\n  /** Button html type attribute */\n  type?: 'button' | 'submit',\n};\n\nconst displayName = 'Button';\n\nconst Button = ({\n  appearance = { theme: 'primary' },\n  children,\n  className,\n  intl: { formatMessage },\n  linkTo,\n  text,\n  textValues,\n  title,\n  titleValues,\n  type = 'button',\n  ...rest\n}: Props) => {\n  const classNames = className || getMainClasses(appearance, styles);\n  const titleText =\n    typeof title == 'string'\n      ? title\n      : title && formatMessage(title, titleValues);\n  const buttonText =\n    typeof text === 'string' ? text : text && formatMessage(text, textValues);\n\n  /*\n   * Fall-back to `null` since `text` and `children`\n   * are both technically optional.\n   */\n  const buttonContent = buttonText || children || null;\n\n  if (linkTo) {\n    return (\n      <Link className={classNames} href={linkTo} {...rest}>\n        {buttonContent}\n      </Link>\n    );\n  }\n\n  return (\n    // eslint-disable-next-line react/button-has-type\n    <button className={classNames} title={titleText} type={type} {...rest}>\n      {buttonContent}\n    </button>\n  );\n};\n\nButton.displayName = displayName;\n\nexport default injectIntl(Button);\n","/* @flow */\nexport { default } from './Button.jsx';\n","/* @flow */\nimport { DEFAULT_LOCALE } from '~i18nConfig';\nimport type { Doc, Project, Section } from '~types';\n\ntype ProjectEdge = {|\n  node: Project,\n|};\n\nexport const orderDocs = (a: Doc, b: Doc): number =>\n  a.frontmatter.order - b.frontmatter.order;\n\nexport const orderSections = (\n  sectionOrder: Array<string>,\n  a: Section,\n  b: Section,\n): number =>\n  sectionOrder\n    ? sectionOrder.indexOf(a.slug) - sectionOrder.indexOf(b.slug)\n    : 0;\n\nexport const getSectionsForLocale = (\n  project: Project,\n  locale: string,\n): Array<Section> => {\n  let { sectionOrder: sectionOrderForLocale } = project;\n  if (locale !== DEFAULT_LOCALE && project.sectionTranslations) {\n    const localeTranslatedSectionConfig = project.sectionTranslations.find(\n      ({ locale: sectionTranslationLocale }) =>\n        sectionTranslationLocale === locale,\n    );\n    if (\n      localeTranslatedSectionConfig &&\n      localeTranslatedSectionConfig.sectionOrder\n    ) {\n      sectionOrderForLocale = localeTranslatedSectionConfig.sectionOrder;\n    }\n  }\n  return project.sections\n    .filter(({ docs }) =>\n      docs.some(({ fields: { locale: docLocale } }) => docLocale === locale),\n    )\n    .sort(orderSections.bind(null, sectionOrderForLocale));\n};\n\nexport const getDocsForLocale = (\n  docs: Array<Doc>,\n  locale: string,\n): Array<Doc> =>\n  docs.filter(doc => {\n    const {\n      fields: { locale: docLocale },\n    } = doc;\n    if (docLocale === locale) {\n      return true;\n    }\n    return false;\n  });\n\nexport const getProjectDescriptionForLocale = (\n  project: Project,\n  locale: string,\n): string => {\n  const projectOrLocaleDescription =\n    locale !== DEFAULT_LOCALE && project.descriptionTranslations\n      ? project.descriptionTranslations.find(\n          ({ locale: descriptionLocale }) => descriptionLocale === locale,\n        ) || project\n      : project;\n  return projectOrLocaleDescription.description;\n};\n\nexport const getProjectEntryPoint = (\n  project: Project,\n  locale: string,\n): string => {\n  let docSections = getSectionsForLocale(project, locale);\n  if (!docSections || !docSections.length) {\n    docSections = getSectionsForLocale(project, DEFAULT_LOCALE);\n  }\n  const { docs: firstSectionDocs } = docSections[0];\n  let docsForLocale = getDocsForLocale(firstSectionDocs, locale);\n  if (!docsForLocale || !docsForLocale.length) {\n    docsForLocale = getDocsForLocale(firstSectionDocs, DEFAULT_LOCALE);\n  }\n  const firstDoc = docsForLocale.sort(orderDocs)[0];\n  return (firstDoc && firstDoc.fields && firstDoc.fields.slug) || '/';\n};\n\nexport const transformProjectData = (edge: ProjectEdge, locale: string) => {\n  const edgeNode = edge.node;\n  edgeNode.entryPoint = getProjectEntryPoint(edge.node, locale);\n  return edgeNode;\n};\n","/* @flow */\nimport type { IntlShape, MessageDescriptor } from 'react-intl';\n\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\n\nimport FileContext from '~context/FileContext';\n\ntype Props = {\n  alt: MessageDescriptor | string,\n  altValues?: Object,\n  intl: IntlShape,\n  project?: string,\n  src: string,\n};\n\nconst displayName = 'Image';\n\nconst Image = ({\n  alt,\n  altValues,\n  intl: { formatMessage },\n  project,\n  src,\n  ...props\n}: Props) => {\n  const altText = typeof alt === 'string' ? alt : formatMessage(alt, altValues);\n  return (\n    <FileContext.Consumer>\n      {files => (\n        <img\n          {...props}\n          alt={altText}\n          src={\n            files && project && files[`${project}/${src}`]\n              ? files[`${project}/${src}`]\n              : src\n          }\n        />\n      )}\n    </FileContext.Consumer>\n  );\n};\n\nImage.displayName = displayName;\n\nexport default injectIntl(Image);\n","/* @flow */\nexport { default } from './Image.jsx';\n","/* @flow */\nimport type { Node } from 'react';\nimport type { IntlShape, MessageDescriptor } from 'react-intl';\n\n/**\n * Capitalize a word (converts the first letter of the word to upper case)\n *\n * @method capitalize\n *\n * @param {string} word The word / string to capitalize\n * @return {string} The capitalized string\n */\nexport const capitalize = (word: string): string =>\n  word && word.charAt(0).toUpperCase() + word.slice(1);\n\nexport const getChildrenOrText = (\n  children?: Node,\n  text?: MessageDescriptor | string,\n  textValues?: Object,\n  { formatMessage }: IntlShape,\n): Node | string => {\n  if (children) {\n    return children;\n  }\n  if (!text) {\n    return '';\n  }\n  if (typeof text == 'string') {\n    return text;\n  }\n  return formatMessage(text, textValues);\n};\n","/* @flow */\nimport React from 'react';\n\nimport type { FileContext as FileContextType } from '~types';\n\nconst FileContext = React.createContext<FileContextType>({});\n\nexport default FileContext;\n","/* @flow */\nconst DEFAULT_LOCALE = 'en';\n\nconst CONFIGURED_LOCALES = [DEFAULT_LOCALE];\n\nmodule.exports = {\n  CONFIGURED_LOCALES,\n  DEFAULT_LOCALE,\n};\n","/* @flow */\nimport type { ComponentType } from 'react';\nimport type { CommonRouteProps } from '@reach/router';\n\nimport { Location } from '@reach/router';\nimport { fromRenderProps } from 'recompose';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const withLocation = () => (BaseComponent: ComponentType<Object>) =>\n  // $FlowFixMe\n  fromRenderProps(Location, (locationProps): CommonRouteProps => locationProps)(\n    BaseComponent,\n  );\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","/* @flow */\nimport type { Node } from 'react';\nimport type { RouteProps } from '@reach/router';\nimport type { $npm$ReactIntl$LocaleData } from 'react-intl';\n\nimport React from 'react';\nimport Helmet from 'react-helmet';\nimport { addLocaleData, IntlProvider } from 'react-intl';\nimport enLocaleData from 'react-intl/locale-data/en';\nimport { graphql, useStaticQuery, withPrefix } from 'gatsby';\n\nimport 'prism-themes/themes/prism-base16-ateliersulphurpool.light.css';\n\nimport FileContext from '~context/FileContext';\nimport { CONFIGURED_LOCALES, DEFAULT_LOCALE } from '~i18nConfig';\nimport enMessages from '~i18n/en.json';\n\nimport '~styles/normalize.css';\nimport '~styles/fonts.css';\nimport '~styles/syntax-hightlight.css';\n\ntype LocaleMessage = { [key: string]: string };\n\ntype LocaleConfig = {|\n  messages: LocaleMessage,\n  data: $npm$ReactIntl$LocaleData,\n|};\n\ntype LocaleConfigs = {\n  [locale: string]: LocaleConfig,\n};\n\nexport type GlobalLayoutProps = {\n  children: Node,\n};\n\ntype Props = RouteProps & GlobalLayoutProps;\n\nconst localeMessages: LocaleConfigs = {\n  en: {\n    messages: enMessages,\n    data: enLocaleData,\n  },\n};\n\nconst configuredLocalesData: Array<$npm$ReactIntl$LocaleData> = Object.keys(\n  localeMessages,\n).reduce(\n  (accumulator, configKey) => [\n    ...accumulator,\n    ...localeMessages[configKey].data,\n  ],\n  [],\n);\n\naddLocaleData(configuredLocalesData);\n\nconst getMessagesForLocale = (locale: string): LocaleMessage =>\n  localeMessages[locale].messages || localeMessages[DEFAULT_LOCALE].messages;\n\nconst getLocaleString = (locale?: string): string =>\n  !!locale && !!localeMessages[locale] ? locale : DEFAULT_LOCALE;\n\nconst getFileMapping = (files): Object => {\n  return files.reduce(\n    (current, next) => ({\n      ...current,\n      [`${next.node.sourceInstanceName}/${next.node.relativePath}`]: next.node\n        .publicURL,\n    }),\n    {},\n  );\n};\n\n/*\n * Check that the configured locales in `~i18nConfig` match the locale messages\n * configured here with the `IntlProvider`. If locales aren't configured, accessing\n * those locales on gatsby pages will yield a 404 (doc pages will likely work partially).\n *\n * This will merely `warn` to the console of the issue, as this shouldn't be a breaking\n * error.\n */\nconst checkLocaleConfig = (): void => {\n  const configuredMessageLocales: Array<string> = Object.keys(localeMessages);\n  const localesWithoutMessages: Array<string> = CONFIGURED_LOCALES.filter(\n    locale => configuredMessageLocales.indexOf(locale) === -1,\n  );\n  if (localesWithoutMessages.length > 0) {\n    const missingLocalesString: string = localesWithoutMessages.reduce(\n      (accumulator, locale) => {\n        let localesString = accumulator;\n        localesString += accumulator.length > 0 ? `, ${locale}` : locale;\n        return localesString;\n      },\n      '',\n    );\n    console.warn(\n      'i18n messages have not been configured with' +\n        ' the IntlProvider for the following locales:',\n      missingLocalesString,\n      '\\n\\nAs a result, translated content & links may be inconsistent' +\n        ' across the site. To supress this warning, add locale messages' +\n        ' for the above locales in the `GlobalLayout` component.',\n    );\n  }\n};\n\ncheckLocaleConfig();\n\nconst displayName = 'layouts.GlobalLayout';\n\nconst GlobalLayout = ({ children, location }: Props) => {\n  const potentialLocale = location && location.pathname.split('/')[1];\n  const locale = getLocaleString(potentialLocale);\n  const messages: LocaleMessage = getMessagesForLocale(locale);\n  const data = useStaticQuery(graphql`\n    query {\n      files: allFile {\n        edges {\n          node {\n            sourceInstanceName\n            relativePath\n            publicURL\n          }\n        }\n      }\n    }\n  `);\n  return (\n    <>\n      <Helmet>\n        <link\n          rel=\"shortcut icon\"\n          type=\"image/png\"\n          href={withPrefix('/img/favicon.ico')}\n        />\n        <script src={withPrefix('/js/fontloader.js')} />\n      </Helmet>\n      <FileContext.Provider value={getFileMapping(data.files.edges)}>\n        <IntlProvider\n          locale={locale}\n          defaultLocale={DEFAULT_LOCALE}\n          messages={messages}\n        >\n          {children}\n        </IntlProvider>\n      </FileContext.Provider>\n    </>\n  );\n};\n\nGlobalLayout.displayName = displayName;\n\nexport default GlobalLayout;\n","/* @flow */\nimport { withLocation } from '~hoc/location';\n\nimport GlobalLayout from './GlobalLayout.jsx';\n\nexport default withLocation()(GlobalLayout);\n","/* @flow */\nexport { default } from './GlobalLayout';\n","/* @flow */\nimport type { IntlShape, MessageDescriptor } from 'react-intl';\n\nimport React, { Component, createRef } from 'react';\nimport { defineMessages, injectIntl } from 'react-intl';\n\nimport 'docsearch.js/dist/cdn/docsearch.min.css';\n\nimport Button from '~core/Button';\nimport Icon from '~core/Icon';\nimport { getMainClasses } from '~utils/css';\n\nimport {\n  docSearchApiKey,\n  docSearcIndexName,\n} from '../../../../docsearch-settings';\n\nimport styles from './Search.module.css';\nimport './algolia-overrides.css';\n\nconst MSG = defineMessages({\n  defaultPlaceholderText: {\n    id: 'Search.defaultPlaceholderText',\n    defaultMessage: 'Search',\n  },\n});\n\ntype Appearance = {|\n  theme?: 'light',\n  type?: 'quickSearch',\n|};\n\ntype Props = {|\n  appearance?: Appearance,\n  /** Required by `docsearch`, can't be dynamic because of static build process */\n  inputId: string,\n  /** Injected by `injectIntl` */\n  intl: IntlShape,\n  placeholderText: MessageDescriptor | string,\n  placeholderTextValues?: Object,\n|};\n\ntype State = {|\n  isEnabled: boolean,\n|};\n\nclass Search extends Component<Props, State> {\n  inputRef: { current: null | HTMLInputElement };\n\n  static defaultProps = {\n    placeholderText: MSG.defaultPlaceholderText,\n  };\n\n  static displayName = 'Search';\n\n  constructor(props) {\n    super(props);\n\n    this.inputRef = createRef();\n  }\n\n  state = {\n    isEnabled: true,\n  };\n\n  componentDidMount() {\n    if (typeof window !== 'undefined') {\n      const { inputId } = this.props;\n      import(/* webpackChunkName: \"docSearch\" */ 'docsearch.js').then(\n        ({ default: docsearch }) => {\n          docsearch({\n            apiKey: docSearchApiKey,\n            indexName: docSearcIndexName,\n            inputSelector: `#${inputId}`,\n          });\n        },\n      );\n    } else {\n      this.setState({ isEnabled: false });\n    }\n  }\n\n  focusInput = () => {\n    if (this.inputRef && this.inputRef.current) {\n      this.inputRef.current.focus();\n    }\n  };\n\n  render() {\n    const {\n      appearance,\n      inputId,\n      intl: { formatMessage },\n      placeholderText,\n      placeholderTextValues,\n    } = this.props;\n    const { isEnabled } = this.state;\n    const placeholderTextContent =\n      typeof placeholderText === 'string'\n        ? placeholderText\n        : formatMessage(placeholderText, placeholderTextValues);\n    const isQuickSearch = appearance && appearance.type === 'quickSearch';\n    return isEnabled ? (\n      <div className={getMainClasses(appearance, styles)}>\n        <input\n          className={styles.searchInput}\n          id={inputId}\n          placeholder={placeholderTextContent}\n          ref={this.inputRef}\n          title={placeholderTextContent}\n          type=\"text\"\n        />\n        {isQuickSearch && (\n          <Button\n            appearance={{ theme: 'reset' }}\n            onClick={this.focusInput}\n            /*\n             * Because the adjacent `input` is naturally focusable,\n             * let's disable tabstop on this button.\n             */\n            tabIndex=\"-1\"\n          >\n            <Icon\n              className={styles.quickSearchIcon}\n              name=\"search\"\n              title={placeholderTextContent}\n              viewBox=\"0 0 25 34\"\n            />\n          </Button>\n        )}\n      </div>\n    ) : null;\n  }\n}\n\nexport default injectIntl(Search);\n","/* @flow */\nexport const docSearchApiKey = 'bda3b62b0c5a0d2028abfaebbb651336';\nexport const docSearcIndexName = 'colony';\n","/* @flow */\nexport { default } from './Search.jsx';\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}