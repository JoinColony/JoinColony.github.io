{"version":3,"sources":["webpack:///./src/modules/parts/components/SupportCta/SupportCta.jsx","webpack:///./src/modules/pages/components/Developers/CoreProductsItem/CoreProductsItem.jsx","webpack:///./src/modules/pages/components/Developers/CoreProducts/CoreProducts.jsx","webpack:///./src/modules/pages/components/Developers/HeroFeatureItem/HeroFeatureItem.jsx","webpack:///./src/modules/pages/components/Developers/Hero/Hero.jsx","webpack:///./src/modules/pages/components/Developers/OpenSourceItem/OpenSourceItem.jsx","webpack:///./src/modules/pages/components/Developers/OpenSource/OpenSource.jsx","webpack:///./src/modules/pages/components/Developers/Developers.jsx","webpack:///./src/modules/pages/components/Developers/Developers.js","webpack:///./src/pages/index.js","webpack:///./src/modules/core/components/NavigationToggle/NavigationToggle.jsx","webpack:///./src/modules/core/components/Popover/getPopoverArrowClasses.js","webpack:///./src/modules/core/components/Popover/PopoverWrapper.jsx","webpack:///./src/modules/core/components/Popover/Popover.jsx","webpack:///./src/modules/core/components/VerticalMenu/VerticalMenu.jsx","webpack:///./src/modules/layouts/components/DeveloperPortalLayout/DocsDropdownContent/DocsDropdownContent.jsx","webpack:///./src/modules/layouts/components/DeveloperPortalLayout/Header/Header.jsx","webpack:///./src/modules/layouts/components/DeveloperPortalLayout/Footer/Footer.jsx","webpack:///./src/modules/layouts/components/DeveloperPortalLayout/DeveloperPortalLayout.jsx","webpack:///./src/modules/layouts/components/DeveloperPortalLayout/DeveloperPortalLayout.js","webpack:///./src/modules/layouts/components/DeveloperPortalLayout/index.js","webpack:///./src/modules/parts/components/SEO/SEO.jsx","webpack:///./src/modules/parts/components/SEO/SEO.js","webpack:///./src/hoc/files/index.js","webpack:///./src/modules/parts/components/SEO/index.js"],"names":["MSG","defineMessages","sectionTitle","id","defaultMessage","SupportCta","react_default","a","createElement","className","styles","main","contentWrapper","Heading","appearance","size","theme","weight","text","iconRow","Link","iconItemLink","href","COLONY_DISCOURSE","Icon","name","title","COLONY_GITHUB","COLONY_GITTER_COLONYJS","displayName","docsLinkText","CoreProductsItem","_ref","_ref$project","project","description","entryPoint","logoSmall","repoUrl","Fragment","imageContainer","Image","alt","image","src","descriptionText","itemLink","arrow","sectionText","CoreProducts","locale","intl","projects","_2144333317","data","coreProjects","edges","map","projectEdge","transformProjectData","sort","_ref2","_ref3","nameARaw","nameBRaw","nameA","toLowerCase","nameB","gradientWrapper","sectionIntroContent","index_es","coreProductsRow","coreProductsItem","key","Developers_CoreProductsItem_CoreProductsItem","injectIntl","HeroFeatureItem","contentText","headingText","linkText","linkUrl","margin","heroFeatureTextContainer","heroFeatureText","heroFeatureLink","heroTitle","heroFeatureGetStartedTitle","heroFeatureGetStartedText","heroFeatureGetStartedLinkText","heroFeatureContributeTitle","heroFeatureContributeText","heroFeatureForumTitle","heroFeatureForumText","Hero","heroBackgroundImage","withPrefix","contentContainer","heroFeature","heroFeatureItem","Developers_HeroFeatureItem_HeroFeatureItem","PAGE_GET_STARTED_COLONYJS","OpenSourceItem","linkContainer","sectionIntroTitle","sectionIntroText","projectSortOrder","OpenSource","_1632122742","openSourceProjects","edge","indexOf","introSection","openSourceProductGrid","openSourceItem","Developers_OpenSourceItem_OpenSourceItem","pageDescription","pageTitle","Developers","formatMessage","SEO","Helmet","Developers_Hero_Hero","Developers_CoreProducts_CoreProducts","Developers_OpenSource_OpenSource","components_SupportCta_SupportCta","withBackground","enhance","compose","nest","DeveloperPortalLayout","Home","btnTitleToggleNavigation","NavigationToggle","isNavOpen","onClick","getMainClasses","Button","aria-hidden","mobileIcon","mobileIconLine","getPopoverArrowClasses","_temp","placement","styleObject","placementClass","camelcase","styleArray","themeClass","capitalize","push","join","PopoverWrapper","arrowProps","children","innerRef","onFocus","retainRefFocus","style","_ref$wrapperClassName","wrapperClassName","hideArrow","showArrow","role","ref","data-placement","tabIndex","Popover","props","_this","_Component","call","this","removeOutsideClickListener","document","body","removeEventListener","handleOutsideClick","getChildProps","assertThisInitialized_default","_this$props","trigger","childProps","aria-describedby","state","isOpen","type","Object","assign","hover","onMouseEnter","requestOpen","onMouseLeave","close","click","toggle","disabled","evt","target","HTMLElement","contentNode","contains","refNode","openDelay","openTimeout","setTimeout","open","bind","setState","modifiers","onClose","clearTimeout","registerRefNode","node","registerContentNode","handleWrapperFocus","HTMLInputElement","focus","renderReference","_assertThisInitialize2","React","cloneElement","renderContent","_this$props2","content","contentValues","isValidElement","nanoid","componentDidUpdate","_ref4","closeOnOutsideClick","prevIsOpenProp","prevOpen","isOpenProp","addEventListener","componentWillUnmount","render","_this2","_this$props3","origPlacement","popperProps","esm","_ref5","Popover_PopoverWrapper","Component","defaultProps","navAriaLabelDefault","VerticalMenu","_ref$headingAppearanc","headingAppearance","headingTextValues","menuItems","_ref$numColumns","numColumns","columnStyles","columnCount","labelText","ariaProps","slugify","textValues","length","menu","menuItemProps","menuItem","ariaLabel","heroSubTitle","headingCoreProducts","headingOpenSourceProducts","getProjectLinks","DocsDropdownContent","coreProjectsLinks","openSourceProjectsLinks","featureProject","find","aria-label","heroLink","hero","logoContainer","logo","cta","menuContent","menuContainer","components_VerticalMenu_VerticalMenu","margins","expandForViewport","imageAltDevPortal","navAriaLabel","navLinkDocs","navLinkSupport","Header","_useState","useState","setIsNavOpen","menuWrapper","PAGE_DEVELOPER_PORTAL","viewBox","aria-expanded","navContainer","navigation","navLink","docsDropdownParent","components_Popover_Popover","DeveloperPortalLayout_DocsDropdownContent_DocsDropdownContent","offset","docsDropdownContainer","dropdownParent","aria-haspopup","mobileDocsDropdown","COLONY_DISCOURSE_SUPPORT","searchContainer","Search","inputId","navToggle","components_NavigationToggle_NavigationToggle","hideAtSize","linkVisitColony","navTitleGetStarted","navTitleCoreProducts","navTitleOpenSourceTools","metaLinkTos","metaLinkPrivacy","metaLinkMediaKit","Footer","footerContent","navRow","COLONY_WEBSITE","domain","navGroup","navGroupItem","metaRow","metaNavContainer","metaNav","PAGE_TERMS_SERVICE","metaNavLink","PAGE_PRIVACY_POLICY","socialIconContainer","COLONY_BLOG","socialIcon","COLONY_TWITTER","COLONY_GITTER","projectQueryData","_3078273232","DeveloperPortalLayout_Header_Header","DeveloperPortalLayout_Footer_Footer","GlobalLayout","__webpack_require__","d","__webpack_exports__","layouts_components_DeveloperPortalLayout_DeveloperPortalLayout","siteName","baseUrl","descriptionContent","descriptionValues","getAbsoluteImagePath","isDocPage","location","siteLogo","titleContent","titleValues","_ref$images","images","absolutePath","pathname","imagePaths","ogType","schemaOrgJSONLD","@context","@type","url","itemListElement","position","item","@id","author","headline","Helmet_default","imagePath","JSON","stringify","itemProp","property","BaseComponent","fromRenderProps","FileContext","Consumer","files","withLocation","withProps","withHandlers","startsWith","parts_components_SEO_SEO"],"mappings":"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","file":"component---src-pages-index-js-5f3beaad6a3154ad6ad5.js","sourcesContent":["/* @flow */\nimport React from 'react';\nimport { defineMessages } from 'react-intl';\n\nimport Heading from '~core/Heading';\nimport Icon from '~core/Icon';\nimport Link from '~core/Link';\nimport {\n  COLONY_DISCOURSE,\n  COLONY_GITHUB,\n  COLONY_GITTER_COLONYJS,\n} from '~routes';\n\nimport styles from './SupportCta.module.css';\n\nconst MSG = defineMessages({\n  sectionTitle: {\n    id: 'parts.SupportCta.sectionTitle',\n    defaultMessage: 'Questions? Problems? Existential dilemmas? We can help!',\n  },\n});\n\nconst displayName = 'parts.SupportCta';\n\nconst SupportCta = () => (\n  <div className={styles.main}>\n    <div className={styles.contentWrapper}>\n      <Heading\n        appearance={{\n          size: 'large',\n          theme: 'primary',\n          weight: 'medium',\n        }}\n        text={MSG.sectionTitle}\n      />\n      <div className={styles.iconRow}>\n        <Link className={styles.iconItemLink} href={COLONY_DISCOURSE}>\n          <Icon name=\"social_discourse_devPortal\" title=\"Discourse\" />\n        </Link>\n        <Link className={styles.iconItemLink} href={COLONY_GITHUB}>\n          <Icon name=\"social_github_devPortal\" title=\"GitHub\" />\n        </Link>\n        <Link className={styles.iconItemLink} href={COLONY_GITTER_COLONYJS}>\n          <Icon name=\"social_gitter_devPortal\" title=\"Gitter\" />\n        </Link>\n      </div>\n    </div>\n  </div>\n);\n\nSupportCta.displayName = displayName;\n\nexport default SupportCta;\n","/* @flow */\nimport React from 'react';\nimport { defineMessages } from 'react-intl';\n\nimport type { Project } from '~types';\n\nimport Heading from '~core/Heading';\nimport Image from '~core/Image';\nimport Link from '~core/Link';\n\nimport styles from './CoreProductsItem.module.css';\n\nconst MSG = defineMessages({\n  docsLinkText: {\n    id: 'pages.Developers.CoreProductsItem.docsLinkText',\n    defaultMessage: 'Docs',\n  },\n});\n\ntype Props = {|\n  project: Project,\n|};\n\nconst displayName = 'pages.Developers.CoreProductsItem';\n\nconst CoreProductsItem = ({\n  project: { description, entryPoint, logoSmall, name, repoUrl },\n}: Props) => (\n  <>\n    <div>\n      <Link href={entryPoint}>\n        <div className={styles.imageContainer}>\n          {/* @TODO get dark logo for hover state, link image to docs */}\n          <Image\n            alt={name}\n            className={styles.image}\n            project={name}\n            src={logoSmall}\n          />\n        </div>\n      </Link>\n      <Heading\n        appearance={{ theme: 'invert', size: 'medium', weight: 'medium' }}\n        text={name}\n      />\n      <p className={styles.descriptionText}>{description}</p>\n    </div>\n    <p>\n      <Link\n        className={styles.itemLink}\n        href={entryPoint}\n        text={MSG.docsLinkText}\n      />\n      <Link\n        arrow=\"right\"\n        className={styles.itemLink}\n        href={repoUrl}\n        text=\"GitHub\"\n      />\n    </p>\n  </>\n);\n\nCoreProductsItem.displayName = displayName;\n\nexport default CoreProductsItem;\n","/* @flow */\nimport type { IntlShape } from 'react-intl';\n\nimport React from 'react';\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport type { Project } from '~types';\n\nimport Heading from '~core/Heading';\nimport { transformProjectData } from '~utils/docs';\n\nimport CoreProductsItem from '../CoreProductsItem';\n\nimport styles from './CoreProducts.module.css';\n\nconst MSG = defineMessages({\n  sectionTitle: {\n    id: 'pages.Developers.CoreProducts.sectionTitle',\n    defaultMessage: 'Colony Core',\n  },\n  sectionText: {\n    id: 'pages.Developers.CoreProducts.sectionText',\n    defaultMessage:\n      // eslint-disable-next-line max-len\n      'Engage with Colony to manage work, shared funds, and reputation. Integrate directly with the smart contracts, use colonyJS to build Colony into your dapp, or fire up the colonyStarter for boilerplates and implementation examples.',\n  },\n});\n\ntype Props = {|\n  /** Injected via `injectIntl` */\n  intl: IntlShape,\n|};\n\nconst displayName = 'pages.Developers.CoreProducts';\n\nconst CoreProducts = ({ intl: { locale } }: Props) => {\n  const projectQueryData = useStaticQuery(graphql`\n    {\n      ...coreProjectsFragment\n    }\n  `);\n\n  const projects: Array<Project> = projectQueryData.coreProjects.edges\n    .map(projectEdge => transformProjectData(projectEdge, locale))\n    // Order the projects alphabetically\n    .sort(({ name: nameARaw }, { name: nameBRaw }) => {\n      const nameA = nameARaw.toLowerCase();\n      const nameB = nameBRaw.toLowerCase();\n      if (nameA === nameB) {\n        return 0;\n      }\n      return nameA < nameB ? -1 : 1;\n    });\n\n  return (\n    <div className={styles.main}>\n      <div className={styles.gradientWrapper}>\n        <div className={styles.sectionIntroContent}>\n          <Heading\n            appearance={{ size: 'large', theme: 'invert', weight: 'medium' }}\n            text={MSG.sectionTitle}\n          />\n          <p>\n            <FormattedMessage {...MSG.sectionText} />\n          </p>\n        </div>\n        <div className={styles.coreProductsRow}>\n          {projects.map(project => (\n            <div className={styles.coreProductsItem} key={project.name}>\n              <CoreProductsItem project={project} />\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nCoreProducts.displayName = displayName;\n\nexport default injectIntl(CoreProducts);\n","/* @flow */\nimport type { MessageDescriptor } from 'react-intl';\n\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport Heading from '~core/Heading';\nimport Link from '~core/Link';\n\nimport styles from './HeroFeatureItem.module.css';\n\ntype Props = {|\n  contentText: MessageDescriptor,\n  headingText: MessageDescriptor,\n  linkText: MessageDescriptor | string,\n  linkUrl: string,\n|};\n\nconst displayName = 'pages.Developers.HeroFeatureItem';\n\nconst HeroFeatureItem = ({\n  contentText,\n  headingText,\n  linkText,\n  linkUrl,\n}: Props) => (\n  <>\n    <div>\n      <div>\n        <Heading\n          appearance={{\n            margin: 'none',\n            size: 'medium',\n            theme: 'invert',\n            weight: 'medium',\n          }}\n          text={headingText}\n        />\n      </div>\n      <div className={styles.heroFeatureTextContainer}>\n        <p className={styles.heroFeatureText}>\n          <FormattedMessage {...contentText} />\n        </p>\n      </div>\n    </div>\n    <div>\n      <Link\n        arrow=\"right\"\n        className={styles.heroFeatureLink}\n        href={linkUrl}\n        text={linkText}\n      />\n    </div>\n  </>\n);\n\nHeroFeatureItem.displayName = displayName;\n\nexport default HeroFeatureItem;\n","/* @flow */\nimport React from 'react';\nimport { defineMessages } from 'react-intl';\nimport { withPrefix } from 'gatsby';\n\nimport Heading from '~core/Heading';\nimport Image from '~core/Image';\nimport {\n  COLONY_DISCOURSE,\n  COLONY_GITHUB,\n  PAGE_GET_STARTED_COLONYJS,\n} from '~routes';\n\nimport HeroFeatureItem from '../HeroFeatureItem';\n\nimport styles from './Hero.module.css';\n\nconst MSG = defineMessages({\n  heroTitle: {\n    id: 'pages.Developers.heroTitle',\n    defaultMessage: 'Build with Colony',\n  },\n  heroFeatureGetStartedTitle: {\n    id: 'pages.Developers.heroFeatureGetStartedTitle',\n    defaultMessage: 'Get Started',\n  },\n  heroFeatureGetStartedText: {\n    id: 'pages.Developers.heroFeatureGetStartedText',\n    defaultMessage:\n      'Build incentives and reputation into your app, firm, or community.',\n  },\n  heroFeatureGetStartedLinkText: {\n    id: 'pages.Developers.heroFeatureGetStartedLinkText',\n    defaultMessage: 'Build',\n  },\n  heroFeatureContributeTitle: {\n    id: 'pages.Developers.heroFeatureContributeTitle',\n    defaultMessage: 'Contribute',\n  },\n  heroFeatureContributeText: {\n    id: 'pages.Developers.heroFeatureContributeText',\n    defaultMessage:\n      // eslint-disable-next-line max-len\n      'We believe in being open. All of our projects are open-source and accepting contributions.',\n  },\n  heroFeatureForumTitle: {\n    id: 'pages.Developers.heroFeatureForumTitle',\n    defaultMessage: 'Discuss',\n  },\n  heroFeatureForumText: {\n    id: 'pages.Developers.heroFeatureForumText',\n    defaultMessage:\n      'Join in the discussion and collaborate with our community of builders.',\n  },\n});\n\nconst displayName = 'pages.Developers.Hero';\n\nconst Hero = () => (\n  <div className={styles.main}>\n    <div className={styles.heroBackgroundImage}>\n      <Image\n        alt={MSG.heroTitle}\n        src={withPrefix('img/devPortal_banner_bg.svg')}\n      />\n    </div>\n    <div className={styles.contentContainer}>\n      <div className={styles.heroTitle}>\n        <Heading\n          appearance={{ size: 'huge', theme: 'invert', weight: 'medium' }}\n          text={MSG.heroTitle}\n        />\n      </div>\n      <div className={styles.heroFeature}>\n        <div className={styles.heroFeatureItem}>\n          <HeroFeatureItem\n            contentText={MSG.heroFeatureGetStartedText}\n            headingText={MSG.heroFeatureGetStartedTitle}\n            linkText={MSG.heroFeatureGetStartedLinkText}\n            linkUrl={PAGE_GET_STARTED_COLONYJS}\n          />\n        </div>\n        <div className={styles.heroFeatureItem}>\n          <HeroFeatureItem\n            contentText={MSG.heroFeatureContributeText}\n            headingText={MSG.heroFeatureContributeTitle}\n            linkText=\"GitHub\"\n            linkUrl={COLONY_GITHUB}\n          />\n        </div>\n        <div className={styles.heroFeatureItem}>\n          <HeroFeatureItem\n            contentText={MSG.heroFeatureForumText}\n            headingText={MSG.heroFeatureForumTitle}\n            linkText=\"Discourse\"\n            linkUrl={COLONY_DISCOURSE}\n          />\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nHero.displayName = displayName;\n\nexport default Hero;\n","/* @flow */\nimport React from 'react';\nimport { defineMessages } from 'react-intl';\n\nimport type { Project } from '~types';\n\nimport Heading from '~core/Heading';\nimport Image from '~core/Image';\nimport Link from '~core/Link';\n\nimport styles from './OpenSourceItem.module.css';\n\nconst MSG = defineMessages({\n  docsLinkText: {\n    id: 'pages.Developers.OpenSourceItem.docsLinkText',\n    defaultMessage: 'Docs',\n  },\n});\n\ntype Props = {|\n  project: Project,\n|};\n\nconst displayName = 'pages.Developers.OpenSourceItem';\n\nconst OpenSourceItem = ({\n  project: { description, entryPoint, logoSmall, name, repoUrl },\n}: Props) => (\n  <div className={styles.main}>\n    <Link href={entryPoint}>\n      <div className={styles.imageContainer}>\n        <Image\n          alt={name}\n          className={styles.image}\n          project={name}\n          src={logoSmall}\n        />\n      </div>\n    </Link>\n    <div className={styles.contentContainer}>\n      <div>\n        <Heading\n          appearance={{\n            margin: 'none',\n            size: 'medium',\n            theme: 'invert',\n            weight: 'medium',\n          }}\n          text={name}\n        />\n        <div className={styles.description}>\n          <p>{description}</p>\n        </div>\n      </div>\n      <div className={styles.linkContainer}>\n        <p>\n          <Link\n            className={styles.itemLink}\n            href={entryPoint}\n            text={MSG.docsLinkText}\n          />\n          <Link\n            arrow=\"right\"\n            className={styles.itemLink}\n            href={repoUrl}\n            text=\"GitHub\"\n          />\n        </p>\n      </div>\n    </div>\n  </div>\n);\n\nOpenSourceItem.displayName = displayName;\n\nexport default OpenSourceItem;\n","/* @flow */\nimport type { IntlShape } from 'react-intl';\n\nimport React from 'react';\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport type { Project } from '~types';\n\nimport Heading from '~core/Heading';\nimport { transformProjectData } from '~utils/docs';\n\nimport OpenSourceItem from '../OpenSourceItem';\n\nimport styles from './OpenSource.module.css';\n\nconst MSG = defineMessages({\n  sectionIntroTitle: {\n    id: 'pages.Developers.OpenSource.sectionIntroTitle',\n    defaultMessage: 'Open Source Tools',\n  },\n  sectionIntroText: {\n    id: 'pages.Developers.OpenSource.sectionIntroText',\n    defaultMessage: 'Standalone tools for Ethereum developers.',\n  },\n});\n\ntype Props = {|\n  /** Injected via `injectIntl` */\n  intl: IntlShape,\n|};\n\nconst projectSortOrder: Array<string> = [\n  'budgetBox',\n  'tailor',\n  'pinion',\n  'trufflepig',\n  'purser',\n  'solcover',\n];\n\nconst displayName = 'pages.Developers.OpenSource';\n\nconst OpenSource = ({ intl: { locale } }: Props) => {\n  const projectQueryData = useStaticQuery(graphql`\n    {\n      ...openSourceProjectsFragment\n    }\n  `);\n\n  const projects: Array<Project> = projectQueryData.openSourceProjects.edges\n    .map(edge => transformProjectData(edge, locale))\n    // Sort projects by order defined in above array\n    .sort(\n      ({ name: nameA }, { name: nameB }) =>\n        projectSortOrder.indexOf(nameA) - projectSortOrder.indexOf(nameB),\n    );\n\n  return (\n    <div className={styles.main}>\n      <div className={styles.introSection}>\n        <Heading\n          appearance={{\n            margin: 'double',\n            size: 'large',\n            theme: 'invert',\n            weight: 'medium',\n          }}\n          text={MSG.sectionIntroTitle}\n        />\n        <p>\n          <FormattedMessage {...MSG.sectionIntroText} />\n        </p>\n      </div>\n      <div className={styles.openSourceProductGrid}>\n        {projects.map(project => (\n          <div className={styles.openSourceItem} key={project.name}>\n            <OpenSourceItem project={project} />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nOpenSource.displayName = displayName;\n\nexport default injectIntl(OpenSource);\n","/* @flow */\nimport type { IntlShape } from 'react-intl';\n\nimport React from 'react';\nimport { defineMessages } from 'react-intl';\nimport { Helmet } from 'react-helmet';\n\nimport SEO from '~parts/SEO';\nimport SupportCta from '~parts/SupportCta';\n\nimport CoreProducts from './CoreProducts';\nimport Hero from './Hero';\nimport OpenSource from './OpenSource';\n\nimport styles from './Developers.module.css';\n\nconst MSG = defineMessages({\n  pageDescription: {\n    id: 'pages.Developers.pageDescription',\n    defaultMessage: `Just like the organizations that will run on Colony,\neach component in the colony stack is the product of collaboration and open\nengagement. Here, you'll find the up-to-date documentation for all of the\nColony projects.`,\n  },\n  pageTitle: {\n    id: 'pages.Developers.pageTitle',\n    defaultMessage: 'Developer Portal',\n  },\n});\n\ntype Props = {|\n  /** Injected via `injectIntl` */\n  intl: IntlShape,\n|};\n\nconst displayName = 'pages.Developers';\n\nconst Developers = ({ intl: { formatMessage } }: Props) => {\n  const title = formatMessage(MSG.pageTitle);\n  return (\n    <>\n      <SEO description={MSG.pageDescription} title={title} />\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      <main className={styles.main}>\n        <Hero />\n        <CoreProducts />\n        <OpenSource />\n        <SupportCta withBackground />\n      </main>\n    </>\n  );\n};\n\nDevelopers.displayName = displayName;\n\nexport default Developers;\n","/* @flow */\nimport { compose, nest } from 'recompose';\nimport { injectIntl } from 'react-intl';\n\nimport DeveloperPortalLayout from '~layouts/DeveloperPortalLayout';\n\nimport Developers from './Developers.jsx';\n\nconst enhance = compose(injectIntl);\n\nexport default nest<{}>(DeveloperPortalLayout, enhance(Developers));\n","/* @flow */\nimport { createElement } from 'react';\n\nimport Developers from '~pages/Developers';\n\nconst Home = () => createElement(Developers);\n\nexport default Home;\n","/* @flow */\nimport React from 'react';\nimport { defineMessages } from 'react-intl';\n\nimport Button from '~core/Button';\nimport { getMainClasses } from '~utils/css';\n\nimport styles from './NavigationToggle.module.css';\n\nconst MSG = defineMessages({\n  btnTitleToggleNavigation: {\n    id: 'NavigationToggle.btnTitleToggleNavigation',\n    defaultMessage: 'Toggle Navigation',\n  },\n});\n\ntype Appearance = {|\n  /*\n   * Hides this component at a given viewport size (and up). Will\n   * be visible at all viewport sizes below this value.\n   */\n  hideAtSize?: 'small' | 'medium' | 'large',\n  theme?: 'light',\n|};\n\ntype Props = {|\n  appearance?: Appearance,\n  isNavOpen: boolean,\n  onClick: (evt: SyntheticEvent<HTMLButtonElement>) => void,\n|};\n\nconst displayName = 'NavigationToggle';\n\nconst NavigationToggle = ({ appearance, isNavOpen, onClick }: Props) => (\n  <div\n    className={getMainClasses(appearance, styles, {\n      isNavOpen,\n    })}\n  >\n    <Button\n      aria-hidden\n      className={styles.mobileIcon}\n      onClick={onClick}\n      title={MSG.btnTitleToggleNavigation}\n    >\n      <span className={styles.mobileIconLine} />\n      <span className={styles.mobileIconLine} />\n      <span className={styles.mobileIconLine} />\n      <span className={styles.mobileIconLine} />\n    </Button>\n  </div>\n);\n\nNavigationToggle.displayName = displayName;\n\nexport default NavigationToggle;\n","/* @flow */\nimport camelcase from 'camelcase';\n\nimport { capitalize } from '~utils/strings';\n\n/**\n * This is a stripped down version of the `getMainClasses` method, that is specifically\n * designed to generate the classes required to properly render the Popover\n * Component's various arrows.\n *\n * @NOTE It won't work anywhere else, and in all fairness it should be placed\n * inside the actual component, but to preserve code cleanliness, I've placed\n * it here.\n *\n * @method getPopoverArrowClasses\n *\n * @param {object} appearance Appearance object\n * @param {placement} string Positioning of the arrow (this is reversed from in the Popover)\n * @param {styleObject} CSS modules styles object\n *\n * @return {string} The string of classes to pass down to the arrow element\n */\nconst getPopoverArrowClasses = (\n  { theme }: Object = {},\n  placement: string,\n  styleObject: { [string]: string } = {},\n) => {\n  /*\n   * @NOTE Arrows have the position encoded in the class's name\n   */\n  const placementClass = `${camelcase(placement)}Arrow`;\n  const styleArray = [styleObject[placementClass]];\n  if (theme) {\n    /*\n     * @NOTE Arrows have the theme name encoded in the class's name (which also\n     * has the position encoded, as above)\n     */\n    const themeClass = `theme${capitalize(theme)}${capitalize(placementClass)}`;\n    styleArray.push(styleObject[themeClass]);\n  }\n  return styleArray.join(' ');\n};\n\nexport default getPopoverArrowClasses;\n","/* @flow */\nimport type { Node } from 'react';\nimport type { PopperArrowProps } from 'react-popper';\nimport React from 'react';\n\n// eslint-disable-next-line import/no-cycle\nimport type { Appearance as PopoverAppearance, Placement } from './Popover.jsx';\n\nimport { getMainClasses } from '~utils/css';\nimport getPopoverArrowClasses from './getPopoverArrowClasses';\n\nimport styles from './PopoverWrapper.module.css';\n\ntype Appearance = PopoverAppearance & {\n  placement?: Placement,\n};\n\ntype ArrowProps = PopperArrowProps & {\n  showArrow: boolean,\n};\n\ntype Props = {|\n  appearance?: Appearance,\n  arrowProps: ArrowProps,\n  children: Node,\n  id: string,\n  innerRef: (?HTMLElement) => void,\n  onFocus: (evt: SyntheticFocusEvent<HTMLElement>) => void,\n  retainRefFocus?: boolean,\n  placement: string,\n  style: any,\n  wrapperClassName?: string,\n|};\n\nconst PopoverWrapper = ({\n  appearance,\n  arrowProps,\n  children,\n  id,\n  innerRef,\n  onFocus,\n  placement,\n  retainRefFocus,\n  style,\n  wrapperClassName = '',\n}: Props) => (\n  <div\n    className={`${getMainClasses(appearance, styles, {\n      hideArrow: !arrowProps.showArrow,\n      showArrow: arrowProps.showArrow,\n    })} ${wrapperClassName}`}\n    id={id}\n    role=\"tooltip\"\n    ref={innerRef}\n    style={style}\n    data-placement={placement}\n    tabIndex={retainRefFocus ? '-1' : null}\n    onFocus={onFocus}\n  >\n    {children}\n    <span\n      className={getPopoverArrowClasses(appearance, placement, styles)}\n      ref={arrowProps.ref}\n      style={arrowProps.style}\n    />\n  </div>\n);\n\nexport default PopoverWrapper;\n","/* @flow */\nimport type { Node as ReactNode } from 'react';\nimport type { IntlShape, MessageDescriptor } from 'react-intl';\n\nimport React, { Component } from 'react';\nimport { Manager, Reference, Popper } from 'react-popper';\nimport { injectIntl } from 'react-intl';\nimport nanoid from 'nanoid';\n\nimport type { ReactRef } from './types';\n\n// eslint-disable-next-line import/no-cycle\nimport PopoverWrapper from './PopoverWrapper.jsx';\n\nexport type Placement =\n  | 'auto'\n  | 'top'\n  | 'right'\n  | 'bottom'\n  | 'bottom-end'\n  | 'left';\n\ntype RefObj = { ref: ReactRef };\n\nexport type Appearance = {\n  theme: 'dark' | 'grey',\n};\n\nexport type PopoverTrigger = ({\n  ref: ReactRef,\n  id: string,\n  isOpen: boolean,\n  open: () => void,\n  close: () => void,\n  toggle: () => void,\n}) => ReactNode;\n\nexport type Props = {|\n  appearance?: Appearance,\n  /** Child element to trigger the popover */\n  children: React$Element<*> | PopoverTrigger,\n  /** Whether the popover should close when clicking anywhere */\n  closeOnOutsideClick?: boolean,\n  /** Popover content */\n  content:\n    | ReactNode\n    | MessageDescriptor\n    | (({ close: () => void }) => ReactNode),\n  /** Values for content (react-intl interpolation) */\n  contentValues?: Object,\n  /** Set the open state from outside */\n  isOpen?: boolean,\n  /** Called when Popover closes */\n  onClose?: (data?: any, modifiers?: { cancelled: boolean }) => void,\n  /** Delay opening of popover for `openDelay` ms */\n  openDelay?: number,\n  /** Popover placement */\n  placement?: Placement,\n  /** Options to pass through the <Popper> element. See here: https://github.com/FezVrasta/react-popper#api-documentation */\n  popperProps?: Object,\n  /** Whether the reference element should retain focus when popover is open (only for `HTMLInputElements`) */\n  retainRefFocus?: boolean,\n  /** Whether there should be an arrow on the popover */\n  showArrow: boolean,\n  /** How the popover gets triggered. Won't work when using a render prop as `children` */\n  trigger?: 'hover' | 'click' | 'disabled',\n  /** @ignore injected by `react-intl` */\n  intl: IntlShape,\n  /** `className` to be used IN ADDITION TO the normal wrapper classNames */\n  wrapperClassName?: string,\n|};\n\ntype State = {\n  isOpen: boolean,\n};\n\nclass Popover extends Component<Props, State> {\n  refNode: ?HTMLElement;\n\n  contentNode: ?HTMLElement;\n\n  id: string;\n\n  openTimeout: TimeoutID;\n\n  static displayName = 'Popover';\n\n  static defaultProps = {\n    closeOnOutsideClick: true,\n    placement: 'top',\n    showArrow: true,\n    trigger: 'click',\n  };\n\n  constructor(props: Props) {\n    super(props);\n    this.id = nanoid();\n    this.state = {\n      isOpen: props.isOpen || false,\n    };\n  }\n\n  componentDidUpdate(\n    { closeOnOutsideClick, isOpen: prevIsOpenProp, trigger },\n    { isOpen: prevOpen },\n  ) {\n    const { isOpen: isOpenProp } = this.props;\n    const { isOpen } = this.state;\n    if (\n      isOpen &&\n      !prevOpen &&\n      closeOnOutsideClick &&\n      document.body &&\n      (trigger === 'click' || !trigger)\n    ) {\n      document.body.addEventListener('click', this.handleOutsideClick, true);\n    } else if (!isOpen && prevOpen) {\n      this.removeOutsideClickListener();\n    }\n    if (isOpenProp !== prevIsOpenProp) {\n      // We are guarded perfectly fine against this, only when the outside prop changes we change the state as well\n      // Maybe there's a better way that I'm not seeing right now\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState({\n        isOpen: isOpenProp,\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.removeOutsideClickListener();\n  }\n\n  removeOutsideClickListener = () => {\n    if (document.body) {\n      document.body.removeEventListener('click', this.handleOutsideClick, true);\n    }\n  };\n\n  getChildProps = (ref: ReactRef) => {\n    const { id } = this;\n    const { children, trigger } = this.props;\n    const { isOpen } = this.state;\n    const childProps: {\n      'aria-describedby': ?string,\n      innerRef?: ReactRef,\n      ref?: ReactRef,\n    } = {\n      'aria-describedby': isOpen ? id : null,\n    };\n    if (typeof children.type == 'function') {\n      childProps.innerRef = ref;\n    } else {\n      childProps.ref = ref;\n    }\n    return Object.assign(\n      {},\n      childProps,\n      trigger\n        ? {\n            hover: {\n              onMouseEnter: this.requestOpen,\n              onMouseLeave: this.close,\n            },\n            click: { onClick: this.toggle },\n            disabled: null,\n          }[trigger]\n        : null,\n    );\n  };\n\n  handleOutsideClick = (evt: MouseEvent) => {\n    if (\n      (evt.target instanceof HTMLElement &&\n        this.contentNode &&\n        this.contentNode.contains(evt.target)) ||\n      (evt.target instanceof HTMLElement &&\n        this.refNode &&\n        this.refNode.contains(evt.target))\n    ) {\n      return;\n    }\n    this.close();\n  };\n\n  requestOpen = () => {\n    const { isOpen } = this.state;\n    const { openDelay } = this.props;\n    if (isOpen) {\n      return;\n    }\n    if (openDelay) {\n      this.openTimeout = setTimeout(this.open.bind(this), openDelay);\n      return;\n    }\n    this.open();\n  };\n\n  open = () => {\n    const { isOpen } = this.state;\n    if (isOpen) return;\n    this.setState({ isOpen: true });\n  };\n\n  close = (data?: any, modifiers?: { cancelled: boolean }) => {\n    const { onClose } = this.props;\n    const { isOpen } = this.state;\n    clearTimeout(this.openTimeout);\n    if (!isOpen) return;\n    this.setState({ isOpen: false });\n    if (typeof onClose == 'function') onClose(data, modifiers);\n  };\n\n  toggle = () => {\n    const { isOpen } = this.state;\n    if (isOpen) {\n      return this.close();\n    }\n    return this.requestOpen();\n  };\n\n  registerRefNode = (node: ?HTMLElement | ?HTMLInputElement) => {\n    this.refNode = node;\n  };\n\n  registerContentNode = (node: ?HTMLElement) => {\n    this.contentNode = node;\n  };\n\n  handleWrapperFocus = () => {\n    const { retainRefFocus } = this.props;\n    if (retainRefFocus && this.refNode instanceof HTMLInputElement) {\n      this.refNode.focus();\n    }\n  };\n\n  renderReference = () => {\n    const { children } = this.props;\n    const { isOpen } = this.state;\n    const { id, requestOpen, close, toggle } = this;\n\n    if (typeof children == 'function') {\n      return ({ ref }: RefObj) =>\n        children({ ref, id, isOpen, open: requestOpen, close, toggle });\n    }\n    return ({ ref }: RefObj) =>\n      React.cloneElement(children, this.getChildProps(ref));\n  };\n\n  renderContent = () => {\n    const {\n      content,\n      contentValues,\n      intl: { formatMessage },\n    } = this.props;\n    if (typeof content == 'string') {\n      return content;\n    }\n    if (typeof content == 'function') {\n      return content({ close: this.close });\n    }\n    if (React.isValidElement(content)) {\n      return content;\n    }\n    // How to tell flow that this can only be a MessageDescriptor in this case?\n    // $FlowFixMe - might be related to https://github.com/facebook/flow/issues/4775\n    return formatMessage(content, contentValues);\n  };\n\n  render() {\n    const {\n      appearance,\n      placement: origPlacement,\n      popperProps,\n      retainRefFocus,\n      showArrow,\n      wrapperClassName,\n    } = this.props;\n\n    const { isOpen } = this.state;\n    const content = this.renderContent();\n    return (\n      <Manager>\n        <Reference innerRef={this.registerRefNode}>\n          {this.renderReference()}\n        </Reference>\n        {isOpen && (\n          <Popper\n            innerRef={this.registerContentNode}\n            placement={origPlacement}\n            {...popperProps}\n          >\n            {({ ref, style, arrowProps }) => (\n              // $FlowFixMe see above renderContent\n              <PopoverWrapper\n                appearance={{ ...appearance, placement: origPlacement }}\n                id={this.id}\n                innerRef={ref}\n                style={style}\n                placement={origPlacement}\n                arrowProps={{\n                  ...arrowProps,\n                  showArrow,\n                }}\n                onFocus={this.handleWrapperFocus}\n                retainRefFocus={retainRefFocus}\n                wrapperClassName={wrapperClassName}\n              >\n                {content}\n              </PopoverWrapper>\n            )}\n          </Popper>\n        )}\n      </Manager>\n    );\n  }\n}\n\nexport default injectIntl(Popover);\n","/* @flow */\nimport type { IntlShape, MessageDescriptor } from 'react-intl';\n\nimport React from 'react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport slugify from 'slugify';\n\nimport type { Appearance as HeadingAppearance } from '~core/Heading';\nimport type { InProps as LinkProps } from '~core/Link/types';\nimport { getMainClasses } from '~utils/css';\n\nimport Heading from '~core/Heading';\nimport Link from '~core/Link';\n\nimport styles from './VerticalMenu.module.css';\n\nconst MSG = defineMessages({\n  navAriaLabelDefault: {\n    id: 'VerticalMenu.navAriaLabelDefault',\n    defaultMessage: 'Alternate Navigation',\n  },\n});\n\ntype Appearance = {|\n  /*\n   * Only has impact if `numColumns` is provided, and > 1.\n   *\n   * Since responsiveness is mobile-first, this will determine at\n   * which viewport size (and up) the menu will be multi-column.\n   *\n   * Below this size, items will be in 1 column.\n   */\n  expandForViewport?: 'small' | 'medium' | 'large',\n  margins?: 'none' | 'small' | 'large',\n|};\n\ntype Props = {|\n  appearance?: Appearance,\n  headingAppearance?: HeadingAppearance,\n  headingText?: MessageDescriptor | string,\n  headingTextValues?: Object,\n  /* Injected via `injectIntl` */\n  intl: IntlShape,\n  menuItems: Array<LinkProps>,\n  numColumns?: number,\n|};\n\nconst displayName = 'VerticalMenu';\n\nconst VerticalMenu = ({\n  appearance,\n  headingAppearance = {},\n  headingText,\n  headingTextValues,\n  intl: { formatMessage },\n  menuItems,\n  numColumns = 1,\n}: Props) => {\n  const columnStyles = {\n    columnCount: `${numColumns}`,\n  };\n  const labelText =\n    typeof headingText === 'string'\n      ? headingText\n      : headingText && formatMessage(headingText, headingTextValues);\n  const ariaProps = {};\n  if (labelText) {\n    ariaProps['aria-labelledby'] = slugify(labelText);\n  } else {\n    ariaProps['aria-label'] = formatMessage(MSG.navAriaLabelDefault);\n  }\n  return (\n    <div className={getMainClasses(appearance, styles)}>\n      {headingText && (\n        <Heading\n          appearance={{\n            margin: 'small',\n            size: 'normal',\n            weight: 'medium',\n            ...headingAppearance,\n          }}\n          id={slugify(labelText)}\n          text={headingText}\n          textValues={headingTextValues}\n        />\n      )}\n      {menuItems && menuItems.length > 0 && (\n        <nav\n          className={styles.menu}\n          role=\"navigation\"\n          style={columnStyles}\n          {...ariaProps}\n        >\n          {menuItems.map(menuItemProps => (\n            <div key={menuItemProps.href} className={styles.menuItem}>\n              <Link {...menuItemProps} />\n            </div>\n          ))}\n        </nav>\n      )}\n    </div>\n  );\n};\n\nVerticalMenu.displayName = displayName;\n\nexport default injectIntl(VerticalMenu);\n","/* @flow */\nimport type { IntlShape } from 'react-intl';\n\nimport React from 'react';\nimport { defineMessages } from 'react-intl';\n\nimport type { Project } from '~types';\n\nimport Heading from '~core/Heading';\nimport Image from '~core/Image';\nimport Link from '~core/Link';\nimport VerticalMenu from '~core/VerticalMenu';\n\nimport styles from './DocsDropdownContent.module.css';\n\nconst MSG = defineMessages({\n  ariaLabel: {\n    id: 'layouts.DeveloperPortalLayout.DocsDropdownContent.ariaLabel',\n    defaultMessage: 'Docs Menu',\n  },\n  heroTitle: {\n    id: 'layouts.DeveloperPortalLayout.DocsDropdownContent.heroTitle',\n    defaultMessage: 'Start building with Colony',\n  },\n  heroSubTitle: {\n    id: 'layouts.DeveloperPortalLayout.DocsDropdownContent.heroSubTitle',\n    defaultMessage: 'Get started',\n  },\n  headingCoreProducts: {\n    id: 'layouts.DeveloperPortalLayout.DocsDropdownContent.headingCoreProducts',\n    defaultMessage: 'Colony Core',\n  },\n  headingOpenSourceProducts: {\n    id:\n      // eslint-disable-next-line max-len\n      'layouts.DeveloperPortalLayout.DocsDropdownContent.headingOpenSourceProducts',\n    defaultMessage: 'Open Source Tools',\n  },\n});\n\nconst getProjectLinks = ({ entryPoint, name }: Project) => ({\n  href: entryPoint,\n  text: name,\n});\n\ntype Props = {|\n  coreProjects: Array<Project>,\n  intl: IntlShape,\n  openSourceProjects: Array<Project>,\n|};\n\nconst displayName = 'layouts.DeveloperPortalLayout.DocsDropdownContent';\n\nconst DocsDropdownContent = ({\n  coreProjects,\n  intl: { formatMessage },\n  openSourceProjects,\n}: Props) => {\n  const coreProjectsLinks = coreProjects.map(getProjectLinks);\n  const openSourceProjectsLinks = openSourceProjects.map(getProjectLinks);\n  const featureProject = coreProjects.find(({ name }) => name === 'colonyJS');\n  const ariaLabel = formatMessage(MSG.ariaLabel);\n  return (\n    <div className={styles.main} aria-label={ariaLabel}>\n      {featureProject && (\n        <Link className={styles.heroLink} href={featureProject.entryPoint}>\n          <div className={styles.hero}>\n            <div className={styles.logoContainer}>\n              <Image\n                alt={featureProject.name}\n                className={styles.logo}\n                project={featureProject.name}\n                src={featureProject.logoSmall}\n              />\n            </div>\n            <div className={styles.cta}>\n              <Heading\n                appearance={{\n                  margin: 'none',\n                  size: 'small',\n                  theme: 'light',\n                  weight: 'thin',\n                }}\n                text={MSG.heroSubTitle}\n              />\n              <Heading\n                appearance={{\n                  margin: 'none',\n                  size: 'medium',\n                  theme: 'dark',\n                  weight: 'thin',\n                }}\n                text={MSG.heroTitle}\n              />\n            </div>\n          </div>\n        </Link>\n      )}\n      <div className={styles.menuContent}>\n        <div className={styles.menuContainer}>\n          <VerticalMenu\n            appearance={{ margins: 'small' }}\n            headingAppearance={{\n              size: 'small',\n              theme: 'light',\n              weight: 'thin',\n            }}\n            headingText={MSG.headingCoreProducts}\n            menuItems={coreProjectsLinks}\n          />\n        </div>\n        <div className={styles.menuContainer}>\n          <VerticalMenu\n            appearance={{ expandForViewport: 'medium', margins: 'small' }}\n            headingAppearance={{\n              size: 'small',\n              theme: 'light',\n              weight: 'thin',\n            }}\n            headingText={MSG.headingOpenSourceProducts}\n            menuItems={openSourceProjectsLinks}\n            numColumns={2}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nDocsDropdownContent.displayName = displayName;\n\nexport default DocsDropdownContent;\n","/* @flow */\nimport type { IntlShape } from 'react-intl';\n\nimport React, { useState } from 'react';\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\n\nimport type { Project } from '~types';\n\nimport Button from '~core/Button';\nimport Icon from '~core/Icon';\nimport Link from '~core/Link';\nimport NavigationToggle from '~core/NavigationToggle';\nimport Popover from '~core/Popover';\nimport Search from '~core/Search';\nimport DocsDropdownContent from '~layouts/DeveloperPortalLayout/DocsDropdownContent';\nimport { COLONY_DISCOURSE_SUPPORT, PAGE_DEVELOPER_PORTAL } from '~routes';\n\nimport styles from './Header.module.css';\n\nconst MSG = defineMessages({\n  imageAltDevPortal: {\n    id: 'layouts.DeveloperPortalLayout.Header.imageAltDevPortal',\n    defaultMessage: 'Colony Developer Portal',\n  },\n  navAriaLabel: {\n    id: 'layouts.DeveloperPortalLayout.Header.navAriaLabel',\n    defaultMessage: 'Main Navigation',\n  },\n  navLinkDocs: {\n    id: 'layouts.DeveloperPortalLayout.Header.navLinkDocs',\n    defaultMessage: 'Docs',\n  },\n  navLinkSupport: {\n    id: 'layouts.DeveloperPortalLayout.Header.navLinkSupport',\n    defaultMessage: 'Support',\n  },\n});\n\ntype Props = {|\n  coreProjects: Array<Project>,\n  /* Injected via `injectIntl` */\n  intl: IntlShape,\n  openSourceProjects: Array<Project>,\n|};\n\nconst displayName = 'layouts.DeveloperPortalLayout.Header';\n\nconst Header = ({\n  coreProjects,\n  intl: { formatMessage },\n  intl,\n  openSourceProjects,\n}: Props) => {\n  const [isNavOpen, setIsNavOpen] = useState(false);\n  const navAriaLabel = formatMessage(MSG.navAriaLabel);\n  return (\n    <div className={styles.main}>\n      <div className={styles.menuWrapper}>\n        <Link href={PAGE_DEVELOPER_PORTAL}>\n          <Icon\n            className={styles.logo}\n            name=\"developerPortal_white\"\n            title={MSG.imageAltDevPortal}\n            viewBox=\"0 0 134 33\"\n          />\n        </Link>\n        <div aria-expanded={isNavOpen} className={styles.navContainer}>\n          <nav\n            className={styles.navigation}\n            role=\"navigation\"\n            aria-label={navAriaLabel}\n          >\n            <span className={`${styles.navLink} ${styles.docsDropdownParent}`}>\n              <Button appearance={{ theme: 'reset' }}>\n                <Popover\n                  appearance={{ theme: 'grey' }}\n                  content={() => (\n                    <DocsDropdownContent\n                      coreProjects={coreProjects}\n                      intl={intl}\n                      openSourceProjects={openSourceProjects}\n                    />\n                  )}\n                  /*\n                   * `isOpen` is always true for a11y purposes. This ensures the dropdown\n                   * menu is always in the DOM, and visibility is controlled via CSS.\n                   */\n                  isOpen\n                  placement=\"bottom-end\"\n                  popperProps={{\n                    modifiers: {\n                      offset: {\n                        offset: '140px',\n                      },\n                    },\n                  }}\n                  trigger=\"disabled\"\n                  wrapperClassName={styles.docsDropdownContainer}\n                >\n                  <div className={styles.dropdownParent} aria-haspopup=\"true\">\n                    <FormattedMessage {...MSG.navLinkDocs} />\n                  </div>\n                </Popover>\n              </Button>\n              <div className={styles.mobileDocsDropdown}>\n                <DocsDropdownContent\n                  coreProjects={coreProjects}\n                  intl={intl}\n                  openSourceProjects={openSourceProjects}\n                />\n              </div>\n            </span>\n            <Link\n              className={styles.navLink}\n              href={COLONY_DISCOURSE_SUPPORT}\n              text={MSG.navLinkSupport}\n            />\n          </nav>\n          <div className={styles.searchContainer}>\n            <Search\n              appearance={{ theme: 'light', type: 'quickSearch' }}\n              inputId=\"devPortalLayoutHeaderSearch\"\n            />\n          </div>\n        </div>\n        <div className={styles.navToggle}>\n          <NavigationToggle\n            appearance={{ hideAtSize: 'medium', theme: 'light' }}\n            isNavOpen={isNavOpen}\n            onClick={() => setIsNavOpen(!isNavOpen)}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nHeader.displayName = displayName;\n\nexport default injectIntl(Header);\n","/* @flow */\nimport React from 'react';\nimport { defineMessages } from 'react-intl';\n\nimport type { Project } from '~types';\n\nimport Icon from '~core/Icon';\nimport Link from '~core/Link';\nimport VerticalMenu from '~core/VerticalMenu';\nimport {\n  COLONY_BLOG,\n  COLONY_DISCOURSE,\n  COLONY_GITHUB,\n  COLONY_GITTER,\n  COLONY_TWITTER,\n  COLONY_WEBSITE,\n  PAGE_PRIVACY_POLICY,\n  PAGE_TERMS_SERVICE,\n} from '~routes';\n\nimport styles from './Footer.module.css';\n\nconst MSG = defineMessages({\n  linkVisitColony: {\n    id: 'layouts.DeveloperPortalLayout.Footer.linkVisitColony',\n    defaultMessage: 'Visit {domain}',\n  },\n  navTitleGetStarted: {\n    id: 'layouts.DeveloperPortalLayout.Footer.navTitleGetStarted',\n    defaultMessage: 'Get Started',\n  },\n  navLinkSupport: {\n    id: 'layouts.DeveloperPortalLayout.Footer.navLinkSupport',\n    defaultMessage: 'Support',\n  },\n  navTitleCoreProducts: {\n    id: 'layouts.DeveloperPortalLayout.Footer.navTitleCoreProducts',\n    defaultMessage: 'Colony Core',\n  },\n  navTitleOpenSourceTools: {\n    id: 'layouts.DeveloperPortalLayout.Footer.navTitleOpenSourceTools',\n    defaultMessage: 'Open Source Tools',\n  },\n  metaLinkTos: {\n    id: 'layouts.DeveloperPortalLayout.Footer.metaLinkTos',\n    defaultMessage: 'Terms & Service',\n  },\n  metaLinkPrivacy: {\n    id: 'layouts.DeveloperPortalLayout.Footer.metaLinkPrivacy',\n    defaultMessage: 'Privacy Policy',\n  },\n  metaLinkMediaKit: {\n    id: 'layouts.DeveloperPortalLayout.Footer.metaLinkMediaKit',\n    defaultMessage: 'Media Kit',\n  },\n});\n\nconst getProjectLinks = ({ repoUrl, name }: Project) => ({\n  href: repoUrl,\n  text: name,\n});\n\ntype Props = {|\n  coreProjects: Array<Project>,\n  openSourceProjects: Array<Project>,\n|};\n\nconst displayName = 'layouts.DeveloperPortalLayout.Footer';\n\nconst Footer = ({ coreProjects, openSourceProjects }: Props) => {\n  const coreProjectsLinks = coreProjects.map(getProjectLinks);\n  const openSourceProjectsLinks = openSourceProjects.map(getProjectLinks);\n  return (\n    <div className={styles.main}>\n      <div className={styles.footerContent}>\n        <div className={styles.navRow}>\n          <div className={styles.logoContainer}>\n            <Icon\n              className={styles.logo}\n              name=\"colony_logomark\"\n              title=\"Colony\"\n            />\n            <div>\n              <Link\n                href={COLONY_WEBSITE}\n                text={MSG.linkVisitColony}\n                textValues={{ domain: 'colony.io' }}\n              />\n            </div>\n          </div>\n          <div className={styles.navGroup}>\n            <div className={styles.navGroupItem}>\n              <VerticalMenu\n                appearance={{ margins: 'large' }}\n                headingAppearance={{ theme: 'invert' }}\n                headingText={MSG.navTitleGetStarted}\n                menuItems={[\n                  {\n                    href: COLONY_DISCOURSE,\n                    text: MSG.navLinkSupport,\n                  },\n                ]}\n              />\n            </div>\n            <div className={styles.navGroupItem}>\n              <VerticalMenu\n                appearance={{ margins: 'large' }}\n                headingAppearance={{ theme: 'invert' }}\n                headingText={MSG.navTitleCoreProducts}\n                menuItems={coreProjectsLinks}\n              />\n            </div>\n            <div className={styles.navGroupItem}>\n              <VerticalMenu\n                appearance={{ expandForViewport: 'medium', margins: 'large' }}\n                headingAppearance={{ theme: 'invert' }}\n                headingText={MSG.navTitleOpenSourceTools}\n                menuItems={openSourceProjectsLinks}\n                numColumns={2}\n              />\n            </div>\n          </div>\n        </div>\n        <div className={styles.metaRow}>\n          <div className={styles.metaNavContainer}>\n            <nav className={styles.metaNav}>\n              <Link\n                href={PAGE_TERMS_SERVICE}\n                className={styles.metaNavLink}\n                text={MSG.metaLinkTos}\n              />\n              <Link\n                href={PAGE_PRIVACY_POLICY}\n                className={styles.metaNavLink}\n                text={MSG.metaLinkPrivacy}\n              />\n            </nav>\n          </div>\n          <div className={styles.socialIconContainer}>\n            <Link alt=\"Ghost\" href={COLONY_BLOG}>\n              <Icon\n                className={styles.socialIcon}\n                title=\"Ghost\"\n                name=\"social_ghost_devPortal\"\n              />\n            </Link>\n            <Link alt=\"Twitter\" href={COLONY_TWITTER}>\n              <Icon\n                className={styles.socialIcon}\n                title=\"Twitter\"\n                name=\"social_twitter_devPortal\"\n              />\n            </Link>\n            <Link alt=\"Discourse\" href={COLONY_DISCOURSE}>\n              <Icon\n                className={styles.socialIcon}\n                title=\"Discourse\"\n                name=\"social_discourse_devPortal\"\n              />\n            </Link>\n            <Link alt=\"GitHub\" href={COLONY_GITHUB}>\n              <Icon\n                className={styles.socialIcon}\n                title=\"GitHub\"\n                name=\"social_github_devPortal\"\n              />\n            </Link>\n            <Link alt=\"Gitter\" href={COLONY_GITTER}>\n              <Icon\n                className={styles.socialIcon}\n                title=\"Gitter\"\n                name=\"social_gitter_devPortal\"\n              />\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nFooter.displayName = displayName;\n\nexport default Footer;\n","/* @flow */\nimport type { Node } from 'react';\nimport type { IntlShape } from 'react-intl';\n\nimport React from 'react';\nimport { graphql, useStaticQuery } from 'gatsby';\n\nimport type { Project } from '~types';\n\nimport { transformProjectData } from '~utils/docs';\n\nimport Header from './Header';\nimport Footer from './Footer';\n\nimport styles from './DeveloperPortalLayout.module.css';\n\ntype Props = {|\n  children: Node,\n  intl: IntlShape,\n|};\n\nconst displayName = 'layouts.DeveloperPortalLayout';\n\nconst DeveloperPortalLayout = ({ children, intl: { locale } }: Props) => {\n  const projectQueryData = useStaticQuery(graphql`\n    {\n      ...coreProjectsFragment\n      ...openSourceProjectsFragment\n    }\n  `);\n  const coreProjects: Array<Project> =\n    projectQueryData.coreProjects.edges.map(edge =>\n      transformProjectData(edge, locale),\n    ) || [];\n  const openSourceProjects: Array<Project> =\n    projectQueryData.openSourceProjects.edges.map(edge =>\n      transformProjectData(edge, locale),\n    ) || [];\n  return (\n    <>\n      <Header\n        coreProjects={coreProjects}\n        openSourceProjects={openSourceProjects}\n      />\n      <div className={styles.body}>{children}</div>\n      <Footer\n        coreProjects={coreProjects}\n        openSourceProjects={openSourceProjects}\n      />\n    </>\n  );\n};\n\nDeveloperPortalLayout.displayName = displayName;\n\nexport default DeveloperPortalLayout;\n","/* @flow */\nimport { compose, nest } from 'recompose';\nimport { injectIntl } from 'react-intl';\n\nimport type { GlobalLayoutProps } from '~layouts/GlobalLayout/GlobalLayout.jsx';\n\nimport GlobalLayout from '~layouts/GlobalLayout';\n\nimport DeveloperPortalLayout from './DeveloperPortalLayout.jsx';\n\nconst enhance = compose(injectIntl);\n\nexport default nest<GlobalLayoutProps>(\n  GlobalLayout,\n  enhance(DeveloperPortalLayout),\n);\n","/* @flow */\nexport { default } from './DeveloperPortalLayout';\n","/* @flow */\nimport React from 'react';\nimport { defineMessages } from 'react-intl';\nimport Helmet from 'react-helmet';\nimport { withPrefix } from 'gatsby';\n\nimport type { OutProps as Props } from './types';\n\nconst MSG = defineMessages({\n  siteName: {\n    id: 'parts.SEO.siteName',\n    defaultMessage: 'Colony Open Source Docs',\n  },\n});\n\nconst displayName = 'parts.SEO';\n\nconst SEO = ({\n  baseUrl,\n  description: descriptionContent,\n  descriptionValues,\n  getAbsoluteImagePath,\n  intl: { formatMessage },\n  isDocPage,\n  location,\n  siteLogo,\n  title: titleContent,\n  titleValues,\n  images = [siteLogo],\n}: Props) => {\n  const absolutePath = location && `${baseUrl}${withPrefix(location.pathname)}`;\n  const imagePaths = images.map(getAbsoluteImagePath);\n  if (imagePaths.indexOf(siteLogo) < 0) imagePaths.push(siteLogo);\n  const ogType = location && location.pathname === '/' ? 'website' : 'article';\n  const siteName = formatMessage(MSG.siteName);\n  const title =\n    typeof titleContent === 'string'\n      ? titleContent\n      : formatMessage(titleContent, titleValues);\n  const description =\n    typeof descriptionContent === 'string'\n      ? descriptionContent\n      : formatMessage(descriptionContent, descriptionValues);\n\n  const schemaOrgJSONLD = [\n    {\n      '@context': 'http://schema.org',\n      '@type': 'WebSite',\n      url: baseUrl,\n      name: siteName,\n    },\n  ];\n\n  if (isDocPage) {\n    schemaOrgJSONLD.push(\n      {\n        '@context': 'http://schema.org',\n        '@type': 'BreadcrumbList',\n        itemListElement: [\n          {\n            '@type': 'ListItem',\n            position: 1,\n            item: {\n              '@id': absolutePath,\n              name: title,\n              image: imagePaths[0],\n            },\n          },\n        ],\n      },\n      {\n        '@context': 'http://schema.org',\n        '@type': 'BlogPosting',\n        author: 'Colony',\n        url: absolutePath,\n        name: title,\n        headline: title,\n        image: {\n          '@type': 'ImageObject',\n          url: imagePaths[0],\n        },\n        description,\n      },\n    );\n  }\n\n  return (\n    <Helmet>\n      {/* General tags */}\n      <meta name=\"description\" content={description} />\n      {imagePaths.map(imagePath => (\n        <meta name=\"image\" content={imagePath} key={imagePath} />\n      ))}\n\n      {/* Schema.org tags */}\n      <script type=\"application/ld+json\">\n        {JSON.stringify(schemaOrgJSONLD)}\n      </script>\n\n      {/* Google+ tags */}\n      <meta itemProp=\"name\" content={title} />\n      <meta itemProp=\"description\" content={description} />\n      {imagePaths.map(imagePath => (\n        <meta itemProp=\"image\" content={imagePath} key={imagePath} />\n      ))}\n\n      {/* OpenGraph tags */}\n      <meta property=\"og:url\" content={absolutePath} />\n      <meta property=\"og:type\" content={ogType} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={description} />\n      <meta property=\"og:site_name\" content={siteName} />\n      {imagePaths.map(imagePath => (\n        <meta property=\"og:image\" content={imagePath} key={imagePath} />\n      ))}\n\n      {/* Twitter Card tags */}\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:site\" content=\"@joincolony\" />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={description} />\n      {imagePaths.map(imagePath => (\n        <meta name=\"twitter:image\" content={imagePath} key={imagePath} />\n      ))}\n    </Helmet>\n  );\n};\n\nSEO.displayName = displayName;\n\nexport default SEO;\n","/* @flow */\nimport type { HOC } from 'recompose';\n\nimport { injectIntl } from 'react-intl';\nimport { compose, defaultProps, withHandlers, withProps } from 'recompose';\n\nimport { withFileContext } from '~hoc/files';\nimport { withLocation } from '~hoc/location';\n\nimport type { InProps } from './types';\n\nimport SEO from './SEO.jsx';\n\nconst enhance: HOC<*, InProps> = compose(\n  injectIntl,\n  withFileContext(),\n  withLocation(),\n  defaultProps({\n    isDocPage: false,\n  }),\n  withProps(() => ({\n    baseUrl: 'https://docs.colony.io',\n  })),\n  withHandlers({\n    getAbsoluteImagePath: ({ baseUrl, files, project }) => (\n      imagePath: string,\n    ) => {\n      return imagePath.startsWith('http')\n        ? imagePath\n        : `${baseUrl}${\n            files && files[`${project}/${imagePath}`]\n              ? files[`${project}/${imagePath}`]\n              : imagePath\n          }`;\n    },\n  }),\n  withProps(({ getAbsoluteImagePath }) => ({\n    siteLogo: getAbsoluteImagePath('/img/colonyDocs_combomark.svg'),\n  })),\n);\n\nexport default enhance(SEO);\n","/* @flow */\nimport type { ComponentType } from 'react';\n\nimport { fromRenderProps } from 'recompose';\n\nimport FileContext from '~context/FileContext';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const withFileContext = () => (BaseComponent: ComponentType<Object>) =>\n  // $FlowFixMe\n  fromRenderProps(FileContext.Consumer, files => ({ files }))(BaseComponent);\n","/* @flow */\nexport { default } from './SEO';\n"],"sourceRoot":""}